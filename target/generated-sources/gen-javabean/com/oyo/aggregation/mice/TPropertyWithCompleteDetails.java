/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.oyo.aggregation.mice;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-03-20")
public class TPropertyWithCompleteDetails implements org.apache.thrift.TBase<TPropertyWithCompleteDetails, TPropertyWithCompleteDetails._Fields>, java.io.Serializable, Cloneable, Comparable<TPropertyWithCompleteDetails> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPropertyWithCompleteDetails");

  private static final org.apache.thrift.protocol.TField COMMON_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("commonValues", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField PROPERTY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("propertyCode", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LOCALITY_FIELD_DESC = new org.apache.thrift.protocol.TField("locality", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField STANDING_CAPACITY_FIELD_DESC = new org.apache.thrift.protocol.TField("standingCapacity", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField THEATRE_SEATING_CAPACITY_FIELD_DESC = new org.apache.thrift.protocol.TField("theatreSeatingCapacity", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CLUSTER_SEATING_CAPACITY_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterSeatingCapacity", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField MAP_POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("mapPoints", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField FOOD_PACKAGE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("foodPackageList", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField PAYMENT_POLICY_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentPolicy", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CANCELLATION_POLICY_FIELD_DESC = new org.apache.thrift.protocol.TField("cancellationPolicy", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField AMENITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("amenities", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField IS_RENTAL_ONLY_ALLOWED_FIELD_DESC = new org.apache.thrift.protocol.TField("isRentalOnlyAllowed", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField SERVICES_FIELD_DESC = new org.apache.thrift.protocol.TField("services", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField RESTRICTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("restrictions", org.apache.thrift.protocol.TType.LIST, (short)16);
  private static final org.apache.thrift.protocol.TField RENTAL_ONLY_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("rentalOnlyPrice", org.apache.thrift.protocol.TType.STRUCT, (short)17);
  private static final org.apache.thrift.protocol.TField RENTAL_PLUS_FOOD_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("rentalPlusFoodPrice", org.apache.thrift.protocol.TType.STRUCT, (short)18);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TPropertyWithCompleteDetailsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TPropertyWithCompleteDetailsTupleSchemeFactory();

  private TCommonValues commonValues; // required
  private java.lang.String propertyCode; // required
  private java.lang.String locality; // required
  private java.lang.String city; // required
  private int standingCapacity; // required
  private int theatreSeatingCapacity; // required
  private int clusterSeatingCapacity; // required
  private TMapLocation mapPoints; // required
  private java.util.List<TFoodPackage> foodPackageList; // required
  private java.lang.String paymentPolicy; // required
  private java.lang.String cancellationPolicy; // required
  private java.util.List<TAmenity> amenities; // required
  private java.util.List<TTag> tags; // required
  private boolean isRentalOnlyAllowed; // required
  private java.util.List<TService> services; // required
  private java.util.List<TRestriction> restrictions; // required
  private TPrice rentalOnlyPrice; // required
  private TPrice rentalPlusFoodPrice; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMMON_VALUES((short)1, "commonValues"),
    PROPERTY_CODE((short)2, "propertyCode"),
    LOCALITY((short)3, "locality"),
    CITY((short)4, "city"),
    STANDING_CAPACITY((short)5, "standingCapacity"),
    THEATRE_SEATING_CAPACITY((short)6, "theatreSeatingCapacity"),
    CLUSTER_SEATING_CAPACITY((short)7, "clusterSeatingCapacity"),
    MAP_POINTS((short)8, "mapPoints"),
    FOOD_PACKAGE_LIST((short)9, "foodPackageList"),
    PAYMENT_POLICY((short)10, "paymentPolicy"),
    CANCELLATION_POLICY((short)11, "cancellationPolicy"),
    AMENITIES((short)12, "amenities"),
    TAGS((short)13, "tags"),
    IS_RENTAL_ONLY_ALLOWED((short)14, "isRentalOnlyAllowed"),
    SERVICES((short)15, "services"),
    RESTRICTIONS((short)16, "restrictions"),
    RENTAL_ONLY_PRICE((short)17, "rentalOnlyPrice"),
    RENTAL_PLUS_FOOD_PRICE((short)18, "rentalPlusFoodPrice");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMMON_VALUES
          return COMMON_VALUES;
        case 2: // PROPERTY_CODE
          return PROPERTY_CODE;
        case 3: // LOCALITY
          return LOCALITY;
        case 4: // CITY
          return CITY;
        case 5: // STANDING_CAPACITY
          return STANDING_CAPACITY;
        case 6: // THEATRE_SEATING_CAPACITY
          return THEATRE_SEATING_CAPACITY;
        case 7: // CLUSTER_SEATING_CAPACITY
          return CLUSTER_SEATING_CAPACITY;
        case 8: // MAP_POINTS
          return MAP_POINTS;
        case 9: // FOOD_PACKAGE_LIST
          return FOOD_PACKAGE_LIST;
        case 10: // PAYMENT_POLICY
          return PAYMENT_POLICY;
        case 11: // CANCELLATION_POLICY
          return CANCELLATION_POLICY;
        case 12: // AMENITIES
          return AMENITIES;
        case 13: // TAGS
          return TAGS;
        case 14: // IS_RENTAL_ONLY_ALLOWED
          return IS_RENTAL_ONLY_ALLOWED;
        case 15: // SERVICES
          return SERVICES;
        case 16: // RESTRICTIONS
          return RESTRICTIONS;
        case 17: // RENTAL_ONLY_PRICE
          return RENTAL_ONLY_PRICE;
        case 18: // RENTAL_PLUS_FOOD_PRICE
          return RENTAL_PLUS_FOOD_PRICE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STANDINGCAPACITY_ISSET_ID = 0;
  private static final int __THEATRESEATINGCAPACITY_ISSET_ID = 1;
  private static final int __CLUSTERSEATINGCAPACITY_ISSET_ID = 2;
  private static final int __ISRENTALONLYALLOWED_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMMON_VALUES, new org.apache.thrift.meta_data.FieldMetaData("commonValues", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCommonValues.class)));
    tmpMap.put(_Fields.PROPERTY_CODE, new org.apache.thrift.meta_data.FieldMetaData("propertyCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCALITY, new org.apache.thrift.meta_data.FieldMetaData("locality", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STANDING_CAPACITY, new org.apache.thrift.meta_data.FieldMetaData("standingCapacity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.THEATRE_SEATING_CAPACITY, new org.apache.thrift.meta_data.FieldMetaData("theatreSeatingCapacity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CLUSTER_SEATING_CAPACITY, new org.apache.thrift.meta_data.FieldMetaData("clusterSeatingCapacity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAP_POINTS, new org.apache.thrift.meta_data.FieldMetaData("mapPoints", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMapLocation.class)));
    tmpMap.put(_Fields.FOOD_PACKAGE_LIST, new org.apache.thrift.meta_data.FieldMetaData("foodPackageList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TFoodPackage.class))));
    tmpMap.put(_Fields.PAYMENT_POLICY, new org.apache.thrift.meta_data.FieldMetaData("paymentPolicy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CANCELLATION_POLICY, new org.apache.thrift.meta_data.FieldMetaData("cancellationPolicy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AMENITIES, new org.apache.thrift.meta_data.FieldMetaData("amenities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAmenity.class))));
    tmpMap.put(_Fields.TAGS, new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTag.class))));
    tmpMap.put(_Fields.IS_RENTAL_ONLY_ALLOWED, new org.apache.thrift.meta_data.FieldMetaData("isRentalOnlyAllowed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SERVICES, new org.apache.thrift.meta_data.FieldMetaData("services", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TService.class))));
    tmpMap.put(_Fields.RESTRICTIONS, new org.apache.thrift.meta_data.FieldMetaData("restrictions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRestriction.class))));
    tmpMap.put(_Fields.RENTAL_ONLY_PRICE, new org.apache.thrift.meta_data.FieldMetaData("rentalOnlyPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPrice.class)));
    tmpMap.put(_Fields.RENTAL_PLUS_FOOD_PRICE, new org.apache.thrift.meta_data.FieldMetaData("rentalPlusFoodPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPrice.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPropertyWithCompleteDetails.class, metaDataMap);
  }

  public TPropertyWithCompleteDetails() {
  }

  public TPropertyWithCompleteDetails(
    TCommonValues commonValues,
    java.lang.String propertyCode,
    java.lang.String locality,
    java.lang.String city,
    int standingCapacity,
    int theatreSeatingCapacity,
    int clusterSeatingCapacity,
    TMapLocation mapPoints,
    java.util.List<TFoodPackage> foodPackageList,
    java.lang.String paymentPolicy,
    java.lang.String cancellationPolicy,
    java.util.List<TAmenity> amenities,
    java.util.List<TTag> tags,
    boolean isRentalOnlyAllowed,
    java.util.List<TService> services,
    java.util.List<TRestriction> restrictions,
    TPrice rentalOnlyPrice,
    TPrice rentalPlusFoodPrice)
  {
    this();
    this.commonValues = commonValues;
    this.propertyCode = propertyCode;
    this.locality = locality;
    this.city = city;
    this.standingCapacity = standingCapacity;
    setStandingCapacityIsSet(true);
    this.theatreSeatingCapacity = theatreSeatingCapacity;
    setTheatreSeatingCapacityIsSet(true);
    this.clusterSeatingCapacity = clusterSeatingCapacity;
    setClusterSeatingCapacityIsSet(true);
    this.mapPoints = mapPoints;
    this.foodPackageList = foodPackageList;
    this.paymentPolicy = paymentPolicy;
    this.cancellationPolicy = cancellationPolicy;
    this.amenities = amenities;
    this.tags = tags;
    this.isRentalOnlyAllowed = isRentalOnlyAllowed;
    setIsRentalOnlyAllowedIsSet(true);
    this.services = services;
    this.restrictions = restrictions;
    this.rentalOnlyPrice = rentalOnlyPrice;
    this.rentalPlusFoodPrice = rentalPlusFoodPrice;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPropertyWithCompleteDetails(TPropertyWithCompleteDetails other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCommonValues()) {
      this.commonValues = new TCommonValues(other.commonValues);
    }
    if (other.isSetPropertyCode()) {
      this.propertyCode = other.propertyCode;
    }
    if (other.isSetLocality()) {
      this.locality = other.locality;
    }
    if (other.isSetCity()) {
      this.city = other.city;
    }
    this.standingCapacity = other.standingCapacity;
    this.theatreSeatingCapacity = other.theatreSeatingCapacity;
    this.clusterSeatingCapacity = other.clusterSeatingCapacity;
    if (other.isSetMapPoints()) {
      this.mapPoints = new TMapLocation(other.mapPoints);
    }
    if (other.isSetFoodPackageList()) {
      java.util.List<TFoodPackage> __this__foodPackageList = new java.util.ArrayList<TFoodPackage>(other.foodPackageList.size());
      for (TFoodPackage other_element : other.foodPackageList) {
        __this__foodPackageList.add(new TFoodPackage(other_element));
      }
      this.foodPackageList = __this__foodPackageList;
    }
    if (other.isSetPaymentPolicy()) {
      this.paymentPolicy = other.paymentPolicy;
    }
    if (other.isSetCancellationPolicy()) {
      this.cancellationPolicy = other.cancellationPolicy;
    }
    if (other.isSetAmenities()) {
      java.util.List<TAmenity> __this__amenities = new java.util.ArrayList<TAmenity>(other.amenities.size());
      for (TAmenity other_element : other.amenities) {
        __this__amenities.add(new TAmenity(other_element));
      }
      this.amenities = __this__amenities;
    }
    if (other.isSetTags()) {
      java.util.List<TTag> __this__tags = new java.util.ArrayList<TTag>(other.tags.size());
      for (TTag other_element : other.tags) {
        __this__tags.add(new TTag(other_element));
      }
      this.tags = __this__tags;
    }
    this.isRentalOnlyAllowed = other.isRentalOnlyAllowed;
    if (other.isSetServices()) {
      java.util.List<TService> __this__services = new java.util.ArrayList<TService>(other.services.size());
      for (TService other_element : other.services) {
        __this__services.add(new TService(other_element));
      }
      this.services = __this__services;
    }
    if (other.isSetRestrictions()) {
      java.util.List<TRestriction> __this__restrictions = new java.util.ArrayList<TRestriction>(other.restrictions.size());
      for (TRestriction other_element : other.restrictions) {
        __this__restrictions.add(new TRestriction(other_element));
      }
      this.restrictions = __this__restrictions;
    }
    if (other.isSetRentalOnlyPrice()) {
      this.rentalOnlyPrice = new TPrice(other.rentalOnlyPrice);
    }
    if (other.isSetRentalPlusFoodPrice()) {
      this.rentalPlusFoodPrice = new TPrice(other.rentalPlusFoodPrice);
    }
  }

  public TPropertyWithCompleteDetails deepCopy() {
    return new TPropertyWithCompleteDetails(this);
  }

  @Override
  public void clear() {
    this.commonValues = null;
    this.propertyCode = null;
    this.locality = null;
    this.city = null;
    setStandingCapacityIsSet(false);
    this.standingCapacity = 0;
    setTheatreSeatingCapacityIsSet(false);
    this.theatreSeatingCapacity = 0;
    setClusterSeatingCapacityIsSet(false);
    this.clusterSeatingCapacity = 0;
    this.mapPoints = null;
    this.foodPackageList = null;
    this.paymentPolicy = null;
    this.cancellationPolicy = null;
    this.amenities = null;
    this.tags = null;
    setIsRentalOnlyAllowedIsSet(false);
    this.isRentalOnlyAllowed = false;
    this.services = null;
    this.restrictions = null;
    this.rentalOnlyPrice = null;
    this.rentalPlusFoodPrice = null;
  }

  public TCommonValues getCommonValues() {
    return this.commonValues;
  }

  public void setCommonValues(TCommonValues commonValues) {
    this.commonValues = commonValues;
  }

  public void unsetCommonValues() {
    this.commonValues = null;
  }

  /** Returns true if field commonValues is set (has been assigned a value) and false otherwise */
  public boolean isSetCommonValues() {
    return this.commonValues != null;
  }

  public void setCommonValuesIsSet(boolean value) {
    if (!value) {
      this.commonValues = null;
    }
  }

  public java.lang.String getPropertyCode() {
    return this.propertyCode;
  }

  public void setPropertyCode(java.lang.String propertyCode) {
    this.propertyCode = propertyCode;
  }

  public void unsetPropertyCode() {
    this.propertyCode = null;
  }

  /** Returns true if field propertyCode is set (has been assigned a value) and false otherwise */
  public boolean isSetPropertyCode() {
    return this.propertyCode != null;
  }

  public void setPropertyCodeIsSet(boolean value) {
    if (!value) {
      this.propertyCode = null;
    }
  }

  public java.lang.String getLocality() {
    return this.locality;
  }

  public void setLocality(java.lang.String locality) {
    this.locality = locality;
  }

  public void unsetLocality() {
    this.locality = null;
  }

  /** Returns true if field locality is set (has been assigned a value) and false otherwise */
  public boolean isSetLocality() {
    return this.locality != null;
  }

  public void setLocalityIsSet(boolean value) {
    if (!value) {
      this.locality = null;
    }
  }

  public java.lang.String getCity() {
    return this.city;
  }

  public void setCity(java.lang.String city) {
    this.city = city;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  public int getStandingCapacity() {
    return this.standingCapacity;
  }

  public void setStandingCapacity(int standingCapacity) {
    this.standingCapacity = standingCapacity;
    setStandingCapacityIsSet(true);
  }

  public void unsetStandingCapacity() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STANDINGCAPACITY_ISSET_ID);
  }

  /** Returns true if field standingCapacity is set (has been assigned a value) and false otherwise */
  public boolean isSetStandingCapacity() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STANDINGCAPACITY_ISSET_ID);
  }

  public void setStandingCapacityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STANDINGCAPACITY_ISSET_ID, value);
  }

  public int getTheatreSeatingCapacity() {
    return this.theatreSeatingCapacity;
  }

  public void setTheatreSeatingCapacity(int theatreSeatingCapacity) {
    this.theatreSeatingCapacity = theatreSeatingCapacity;
    setTheatreSeatingCapacityIsSet(true);
  }

  public void unsetTheatreSeatingCapacity() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __THEATRESEATINGCAPACITY_ISSET_ID);
  }

  /** Returns true if field theatreSeatingCapacity is set (has been assigned a value) and false otherwise */
  public boolean isSetTheatreSeatingCapacity() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __THEATRESEATINGCAPACITY_ISSET_ID);
  }

  public void setTheatreSeatingCapacityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __THEATRESEATINGCAPACITY_ISSET_ID, value);
  }

  public int getClusterSeatingCapacity() {
    return this.clusterSeatingCapacity;
  }

  public void setClusterSeatingCapacity(int clusterSeatingCapacity) {
    this.clusterSeatingCapacity = clusterSeatingCapacity;
    setClusterSeatingCapacityIsSet(true);
  }

  public void unsetClusterSeatingCapacity() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CLUSTERSEATINGCAPACITY_ISSET_ID);
  }

  /** Returns true if field clusterSeatingCapacity is set (has been assigned a value) and false otherwise */
  public boolean isSetClusterSeatingCapacity() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CLUSTERSEATINGCAPACITY_ISSET_ID);
  }

  public void setClusterSeatingCapacityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CLUSTERSEATINGCAPACITY_ISSET_ID, value);
  }

  public TMapLocation getMapPoints() {
    return this.mapPoints;
  }

  public void setMapPoints(TMapLocation mapPoints) {
    this.mapPoints = mapPoints;
  }

  public void unsetMapPoints() {
    this.mapPoints = null;
  }

  /** Returns true if field mapPoints is set (has been assigned a value) and false otherwise */
  public boolean isSetMapPoints() {
    return this.mapPoints != null;
  }

  public void setMapPointsIsSet(boolean value) {
    if (!value) {
      this.mapPoints = null;
    }
  }

  public int getFoodPackageListSize() {
    return (this.foodPackageList == null) ? 0 : this.foodPackageList.size();
  }

  public java.util.Iterator<TFoodPackage> getFoodPackageListIterator() {
    return (this.foodPackageList == null) ? null : this.foodPackageList.iterator();
  }

  public void addToFoodPackageList(TFoodPackage elem) {
    if (this.foodPackageList == null) {
      this.foodPackageList = new java.util.ArrayList<TFoodPackage>();
    }
    this.foodPackageList.add(elem);
  }

  public java.util.List<TFoodPackage> getFoodPackageList() {
    return this.foodPackageList;
  }

  public void setFoodPackageList(java.util.List<TFoodPackage> foodPackageList) {
    this.foodPackageList = foodPackageList;
  }

  public void unsetFoodPackageList() {
    this.foodPackageList = null;
  }

  /** Returns true if field foodPackageList is set (has been assigned a value) and false otherwise */
  public boolean isSetFoodPackageList() {
    return this.foodPackageList != null;
  }

  public void setFoodPackageListIsSet(boolean value) {
    if (!value) {
      this.foodPackageList = null;
    }
  }

  public java.lang.String getPaymentPolicy() {
    return this.paymentPolicy;
  }

  public void setPaymentPolicy(java.lang.String paymentPolicy) {
    this.paymentPolicy = paymentPolicy;
  }

  public void unsetPaymentPolicy() {
    this.paymentPolicy = null;
  }

  /** Returns true if field paymentPolicy is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentPolicy() {
    return this.paymentPolicy != null;
  }

  public void setPaymentPolicyIsSet(boolean value) {
    if (!value) {
      this.paymentPolicy = null;
    }
  }

  public java.lang.String getCancellationPolicy() {
    return this.cancellationPolicy;
  }

  public void setCancellationPolicy(java.lang.String cancellationPolicy) {
    this.cancellationPolicy = cancellationPolicy;
  }

  public void unsetCancellationPolicy() {
    this.cancellationPolicy = null;
  }

  /** Returns true if field cancellationPolicy is set (has been assigned a value) and false otherwise */
  public boolean isSetCancellationPolicy() {
    return this.cancellationPolicy != null;
  }

  public void setCancellationPolicyIsSet(boolean value) {
    if (!value) {
      this.cancellationPolicy = null;
    }
  }

  public int getAmenitiesSize() {
    return (this.amenities == null) ? 0 : this.amenities.size();
  }

  public java.util.Iterator<TAmenity> getAmenitiesIterator() {
    return (this.amenities == null) ? null : this.amenities.iterator();
  }

  public void addToAmenities(TAmenity elem) {
    if (this.amenities == null) {
      this.amenities = new java.util.ArrayList<TAmenity>();
    }
    this.amenities.add(elem);
  }

  public java.util.List<TAmenity> getAmenities() {
    return this.amenities;
  }

  public void setAmenities(java.util.List<TAmenity> amenities) {
    this.amenities = amenities;
  }

  public void unsetAmenities() {
    this.amenities = null;
  }

  /** Returns true if field amenities is set (has been assigned a value) and false otherwise */
  public boolean isSetAmenities() {
    return this.amenities != null;
  }

  public void setAmenitiesIsSet(boolean value) {
    if (!value) {
      this.amenities = null;
    }
  }

  public int getTagsSize() {
    return (this.tags == null) ? 0 : this.tags.size();
  }

  public java.util.Iterator<TTag> getTagsIterator() {
    return (this.tags == null) ? null : this.tags.iterator();
  }

  public void addToTags(TTag elem) {
    if (this.tags == null) {
      this.tags = new java.util.ArrayList<TTag>();
    }
    this.tags.add(elem);
  }

  public java.util.List<TTag> getTags() {
    return this.tags;
  }

  public void setTags(java.util.List<TTag> tags) {
    this.tags = tags;
  }

  public void unsetTags() {
    this.tags = null;
  }

  /** Returns true if field tags is set (has been assigned a value) and false otherwise */
  public boolean isSetTags() {
    return this.tags != null;
  }

  public void setTagsIsSet(boolean value) {
    if (!value) {
      this.tags = null;
    }
  }

  public boolean isIsRentalOnlyAllowed() {
    return this.isRentalOnlyAllowed;
  }

  public void setIsRentalOnlyAllowed(boolean isRentalOnlyAllowed) {
    this.isRentalOnlyAllowed = isRentalOnlyAllowed;
    setIsRentalOnlyAllowedIsSet(true);
  }

  public void unsetIsRentalOnlyAllowed() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISRENTALONLYALLOWED_ISSET_ID);
  }

  /** Returns true if field isRentalOnlyAllowed is set (has been assigned a value) and false otherwise */
  public boolean isSetIsRentalOnlyAllowed() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISRENTALONLYALLOWED_ISSET_ID);
  }

  public void setIsRentalOnlyAllowedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISRENTALONLYALLOWED_ISSET_ID, value);
  }

  public int getServicesSize() {
    return (this.services == null) ? 0 : this.services.size();
  }

  public java.util.Iterator<TService> getServicesIterator() {
    return (this.services == null) ? null : this.services.iterator();
  }

  public void addToServices(TService elem) {
    if (this.services == null) {
      this.services = new java.util.ArrayList<TService>();
    }
    this.services.add(elem);
  }

  public java.util.List<TService> getServices() {
    return this.services;
  }

  public void setServices(java.util.List<TService> services) {
    this.services = services;
  }

  public void unsetServices() {
    this.services = null;
  }

  /** Returns true if field services is set (has been assigned a value) and false otherwise */
  public boolean isSetServices() {
    return this.services != null;
  }

  public void setServicesIsSet(boolean value) {
    if (!value) {
      this.services = null;
    }
  }

  public int getRestrictionsSize() {
    return (this.restrictions == null) ? 0 : this.restrictions.size();
  }

  public java.util.Iterator<TRestriction> getRestrictionsIterator() {
    return (this.restrictions == null) ? null : this.restrictions.iterator();
  }

  public void addToRestrictions(TRestriction elem) {
    if (this.restrictions == null) {
      this.restrictions = new java.util.ArrayList<TRestriction>();
    }
    this.restrictions.add(elem);
  }

  public java.util.List<TRestriction> getRestrictions() {
    return this.restrictions;
  }

  public void setRestrictions(java.util.List<TRestriction> restrictions) {
    this.restrictions = restrictions;
  }

  public void unsetRestrictions() {
    this.restrictions = null;
  }

  /** Returns true if field restrictions is set (has been assigned a value) and false otherwise */
  public boolean isSetRestrictions() {
    return this.restrictions != null;
  }

  public void setRestrictionsIsSet(boolean value) {
    if (!value) {
      this.restrictions = null;
    }
  }

  public TPrice getRentalOnlyPrice() {
    return this.rentalOnlyPrice;
  }

  public void setRentalOnlyPrice(TPrice rentalOnlyPrice) {
    this.rentalOnlyPrice = rentalOnlyPrice;
  }

  public void unsetRentalOnlyPrice() {
    this.rentalOnlyPrice = null;
  }

  /** Returns true if field rentalOnlyPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetRentalOnlyPrice() {
    return this.rentalOnlyPrice != null;
  }

  public void setRentalOnlyPriceIsSet(boolean value) {
    if (!value) {
      this.rentalOnlyPrice = null;
    }
  }

  public TPrice getRentalPlusFoodPrice() {
    return this.rentalPlusFoodPrice;
  }

  public void setRentalPlusFoodPrice(TPrice rentalPlusFoodPrice) {
    this.rentalPlusFoodPrice = rentalPlusFoodPrice;
  }

  public void unsetRentalPlusFoodPrice() {
    this.rentalPlusFoodPrice = null;
  }

  /** Returns true if field rentalPlusFoodPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetRentalPlusFoodPrice() {
    return this.rentalPlusFoodPrice != null;
  }

  public void setRentalPlusFoodPriceIsSet(boolean value) {
    if (!value) {
      this.rentalPlusFoodPrice = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case COMMON_VALUES:
      if (value == null) {
        unsetCommonValues();
      } else {
        setCommonValues((TCommonValues)value);
      }
      break;

    case PROPERTY_CODE:
      if (value == null) {
        unsetPropertyCode();
      } else {
        setPropertyCode((java.lang.String)value);
      }
      break;

    case LOCALITY:
      if (value == null) {
        unsetLocality();
      } else {
        setLocality((java.lang.String)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((java.lang.String)value);
      }
      break;

    case STANDING_CAPACITY:
      if (value == null) {
        unsetStandingCapacity();
      } else {
        setStandingCapacity((java.lang.Integer)value);
      }
      break;

    case THEATRE_SEATING_CAPACITY:
      if (value == null) {
        unsetTheatreSeatingCapacity();
      } else {
        setTheatreSeatingCapacity((java.lang.Integer)value);
      }
      break;

    case CLUSTER_SEATING_CAPACITY:
      if (value == null) {
        unsetClusterSeatingCapacity();
      } else {
        setClusterSeatingCapacity((java.lang.Integer)value);
      }
      break;

    case MAP_POINTS:
      if (value == null) {
        unsetMapPoints();
      } else {
        setMapPoints((TMapLocation)value);
      }
      break;

    case FOOD_PACKAGE_LIST:
      if (value == null) {
        unsetFoodPackageList();
      } else {
        setFoodPackageList((java.util.List<TFoodPackage>)value);
      }
      break;

    case PAYMENT_POLICY:
      if (value == null) {
        unsetPaymentPolicy();
      } else {
        setPaymentPolicy((java.lang.String)value);
      }
      break;

    case CANCELLATION_POLICY:
      if (value == null) {
        unsetCancellationPolicy();
      } else {
        setCancellationPolicy((java.lang.String)value);
      }
      break;

    case AMENITIES:
      if (value == null) {
        unsetAmenities();
      } else {
        setAmenities((java.util.List<TAmenity>)value);
      }
      break;

    case TAGS:
      if (value == null) {
        unsetTags();
      } else {
        setTags((java.util.List<TTag>)value);
      }
      break;

    case IS_RENTAL_ONLY_ALLOWED:
      if (value == null) {
        unsetIsRentalOnlyAllowed();
      } else {
        setIsRentalOnlyAllowed((java.lang.Boolean)value);
      }
      break;

    case SERVICES:
      if (value == null) {
        unsetServices();
      } else {
        setServices((java.util.List<TService>)value);
      }
      break;

    case RESTRICTIONS:
      if (value == null) {
        unsetRestrictions();
      } else {
        setRestrictions((java.util.List<TRestriction>)value);
      }
      break;

    case RENTAL_ONLY_PRICE:
      if (value == null) {
        unsetRentalOnlyPrice();
      } else {
        setRentalOnlyPrice((TPrice)value);
      }
      break;

    case RENTAL_PLUS_FOOD_PRICE:
      if (value == null) {
        unsetRentalPlusFoodPrice();
      } else {
        setRentalPlusFoodPrice((TPrice)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case COMMON_VALUES:
      return getCommonValues();

    case PROPERTY_CODE:
      return getPropertyCode();

    case LOCALITY:
      return getLocality();

    case CITY:
      return getCity();

    case STANDING_CAPACITY:
      return getStandingCapacity();

    case THEATRE_SEATING_CAPACITY:
      return getTheatreSeatingCapacity();

    case CLUSTER_SEATING_CAPACITY:
      return getClusterSeatingCapacity();

    case MAP_POINTS:
      return getMapPoints();

    case FOOD_PACKAGE_LIST:
      return getFoodPackageList();

    case PAYMENT_POLICY:
      return getPaymentPolicy();

    case CANCELLATION_POLICY:
      return getCancellationPolicy();

    case AMENITIES:
      return getAmenities();

    case TAGS:
      return getTags();

    case IS_RENTAL_ONLY_ALLOWED:
      return isIsRentalOnlyAllowed();

    case SERVICES:
      return getServices();

    case RESTRICTIONS:
      return getRestrictions();

    case RENTAL_ONLY_PRICE:
      return getRentalOnlyPrice();

    case RENTAL_PLUS_FOOD_PRICE:
      return getRentalPlusFoodPrice();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case COMMON_VALUES:
      return isSetCommonValues();
    case PROPERTY_CODE:
      return isSetPropertyCode();
    case LOCALITY:
      return isSetLocality();
    case CITY:
      return isSetCity();
    case STANDING_CAPACITY:
      return isSetStandingCapacity();
    case THEATRE_SEATING_CAPACITY:
      return isSetTheatreSeatingCapacity();
    case CLUSTER_SEATING_CAPACITY:
      return isSetClusterSeatingCapacity();
    case MAP_POINTS:
      return isSetMapPoints();
    case FOOD_PACKAGE_LIST:
      return isSetFoodPackageList();
    case PAYMENT_POLICY:
      return isSetPaymentPolicy();
    case CANCELLATION_POLICY:
      return isSetCancellationPolicy();
    case AMENITIES:
      return isSetAmenities();
    case TAGS:
      return isSetTags();
    case IS_RENTAL_ONLY_ALLOWED:
      return isSetIsRentalOnlyAllowed();
    case SERVICES:
      return isSetServices();
    case RESTRICTIONS:
      return isSetRestrictions();
    case RENTAL_ONLY_PRICE:
      return isSetRentalOnlyPrice();
    case RENTAL_PLUS_FOOD_PRICE:
      return isSetRentalPlusFoodPrice();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TPropertyWithCompleteDetails)
      return this.equals((TPropertyWithCompleteDetails)that);
    return false;
  }

  public boolean equals(TPropertyWithCompleteDetails that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_commonValues = true && this.isSetCommonValues();
    boolean that_present_commonValues = true && that.isSetCommonValues();
    if (this_present_commonValues || that_present_commonValues) {
      if (!(this_present_commonValues && that_present_commonValues))
        return false;
      if (!this.commonValues.equals(that.commonValues))
        return false;
    }

    boolean this_present_propertyCode = true && this.isSetPropertyCode();
    boolean that_present_propertyCode = true && that.isSetPropertyCode();
    if (this_present_propertyCode || that_present_propertyCode) {
      if (!(this_present_propertyCode && that_present_propertyCode))
        return false;
      if (!this.propertyCode.equals(that.propertyCode))
        return false;
    }

    boolean this_present_locality = true && this.isSetLocality();
    boolean that_present_locality = true && that.isSetLocality();
    if (this_present_locality || that_present_locality) {
      if (!(this_present_locality && that_present_locality))
        return false;
      if (!this.locality.equals(that.locality))
        return false;
    }

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    boolean this_present_standingCapacity = true;
    boolean that_present_standingCapacity = true;
    if (this_present_standingCapacity || that_present_standingCapacity) {
      if (!(this_present_standingCapacity && that_present_standingCapacity))
        return false;
      if (this.standingCapacity != that.standingCapacity)
        return false;
    }

    boolean this_present_theatreSeatingCapacity = true;
    boolean that_present_theatreSeatingCapacity = true;
    if (this_present_theatreSeatingCapacity || that_present_theatreSeatingCapacity) {
      if (!(this_present_theatreSeatingCapacity && that_present_theatreSeatingCapacity))
        return false;
      if (this.theatreSeatingCapacity != that.theatreSeatingCapacity)
        return false;
    }

    boolean this_present_clusterSeatingCapacity = true;
    boolean that_present_clusterSeatingCapacity = true;
    if (this_present_clusterSeatingCapacity || that_present_clusterSeatingCapacity) {
      if (!(this_present_clusterSeatingCapacity && that_present_clusterSeatingCapacity))
        return false;
      if (this.clusterSeatingCapacity != that.clusterSeatingCapacity)
        return false;
    }

    boolean this_present_mapPoints = true && this.isSetMapPoints();
    boolean that_present_mapPoints = true && that.isSetMapPoints();
    if (this_present_mapPoints || that_present_mapPoints) {
      if (!(this_present_mapPoints && that_present_mapPoints))
        return false;
      if (!this.mapPoints.equals(that.mapPoints))
        return false;
    }

    boolean this_present_foodPackageList = true && this.isSetFoodPackageList();
    boolean that_present_foodPackageList = true && that.isSetFoodPackageList();
    if (this_present_foodPackageList || that_present_foodPackageList) {
      if (!(this_present_foodPackageList && that_present_foodPackageList))
        return false;
      if (!this.foodPackageList.equals(that.foodPackageList))
        return false;
    }

    boolean this_present_paymentPolicy = true && this.isSetPaymentPolicy();
    boolean that_present_paymentPolicy = true && that.isSetPaymentPolicy();
    if (this_present_paymentPolicy || that_present_paymentPolicy) {
      if (!(this_present_paymentPolicy && that_present_paymentPolicy))
        return false;
      if (!this.paymentPolicy.equals(that.paymentPolicy))
        return false;
    }

    boolean this_present_cancellationPolicy = true && this.isSetCancellationPolicy();
    boolean that_present_cancellationPolicy = true && that.isSetCancellationPolicy();
    if (this_present_cancellationPolicy || that_present_cancellationPolicy) {
      if (!(this_present_cancellationPolicy && that_present_cancellationPolicy))
        return false;
      if (!this.cancellationPolicy.equals(that.cancellationPolicy))
        return false;
    }

    boolean this_present_amenities = true && this.isSetAmenities();
    boolean that_present_amenities = true && that.isSetAmenities();
    if (this_present_amenities || that_present_amenities) {
      if (!(this_present_amenities && that_present_amenities))
        return false;
      if (!this.amenities.equals(that.amenities))
        return false;
    }

    boolean this_present_tags = true && this.isSetTags();
    boolean that_present_tags = true && that.isSetTags();
    if (this_present_tags || that_present_tags) {
      if (!(this_present_tags && that_present_tags))
        return false;
      if (!this.tags.equals(that.tags))
        return false;
    }

    boolean this_present_isRentalOnlyAllowed = true;
    boolean that_present_isRentalOnlyAllowed = true;
    if (this_present_isRentalOnlyAllowed || that_present_isRentalOnlyAllowed) {
      if (!(this_present_isRentalOnlyAllowed && that_present_isRentalOnlyAllowed))
        return false;
      if (this.isRentalOnlyAllowed != that.isRentalOnlyAllowed)
        return false;
    }

    boolean this_present_services = true && this.isSetServices();
    boolean that_present_services = true && that.isSetServices();
    if (this_present_services || that_present_services) {
      if (!(this_present_services && that_present_services))
        return false;
      if (!this.services.equals(that.services))
        return false;
    }

    boolean this_present_restrictions = true && this.isSetRestrictions();
    boolean that_present_restrictions = true && that.isSetRestrictions();
    if (this_present_restrictions || that_present_restrictions) {
      if (!(this_present_restrictions && that_present_restrictions))
        return false;
      if (!this.restrictions.equals(that.restrictions))
        return false;
    }

    boolean this_present_rentalOnlyPrice = true && this.isSetRentalOnlyPrice();
    boolean that_present_rentalOnlyPrice = true && that.isSetRentalOnlyPrice();
    if (this_present_rentalOnlyPrice || that_present_rentalOnlyPrice) {
      if (!(this_present_rentalOnlyPrice && that_present_rentalOnlyPrice))
        return false;
      if (!this.rentalOnlyPrice.equals(that.rentalOnlyPrice))
        return false;
    }

    boolean this_present_rentalPlusFoodPrice = true && this.isSetRentalPlusFoodPrice();
    boolean that_present_rentalPlusFoodPrice = true && that.isSetRentalPlusFoodPrice();
    if (this_present_rentalPlusFoodPrice || that_present_rentalPlusFoodPrice) {
      if (!(this_present_rentalPlusFoodPrice && that_present_rentalPlusFoodPrice))
        return false;
      if (!this.rentalPlusFoodPrice.equals(that.rentalPlusFoodPrice))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCommonValues()) ? 131071 : 524287);
    if (isSetCommonValues())
      hashCode = hashCode * 8191 + commonValues.hashCode();

    hashCode = hashCode * 8191 + ((isSetPropertyCode()) ? 131071 : 524287);
    if (isSetPropertyCode())
      hashCode = hashCode * 8191 + propertyCode.hashCode();

    hashCode = hashCode * 8191 + ((isSetLocality()) ? 131071 : 524287);
    if (isSetLocality())
      hashCode = hashCode * 8191 + locality.hashCode();

    hashCode = hashCode * 8191 + ((isSetCity()) ? 131071 : 524287);
    if (isSetCity())
      hashCode = hashCode * 8191 + city.hashCode();

    hashCode = hashCode * 8191 + standingCapacity;

    hashCode = hashCode * 8191 + theatreSeatingCapacity;

    hashCode = hashCode * 8191 + clusterSeatingCapacity;

    hashCode = hashCode * 8191 + ((isSetMapPoints()) ? 131071 : 524287);
    if (isSetMapPoints())
      hashCode = hashCode * 8191 + mapPoints.hashCode();

    hashCode = hashCode * 8191 + ((isSetFoodPackageList()) ? 131071 : 524287);
    if (isSetFoodPackageList())
      hashCode = hashCode * 8191 + foodPackageList.hashCode();

    hashCode = hashCode * 8191 + ((isSetPaymentPolicy()) ? 131071 : 524287);
    if (isSetPaymentPolicy())
      hashCode = hashCode * 8191 + paymentPolicy.hashCode();

    hashCode = hashCode * 8191 + ((isSetCancellationPolicy()) ? 131071 : 524287);
    if (isSetCancellationPolicy())
      hashCode = hashCode * 8191 + cancellationPolicy.hashCode();

    hashCode = hashCode * 8191 + ((isSetAmenities()) ? 131071 : 524287);
    if (isSetAmenities())
      hashCode = hashCode * 8191 + amenities.hashCode();

    hashCode = hashCode * 8191 + ((isSetTags()) ? 131071 : 524287);
    if (isSetTags())
      hashCode = hashCode * 8191 + tags.hashCode();

    hashCode = hashCode * 8191 + ((isRentalOnlyAllowed) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetServices()) ? 131071 : 524287);
    if (isSetServices())
      hashCode = hashCode * 8191 + services.hashCode();

    hashCode = hashCode * 8191 + ((isSetRestrictions()) ? 131071 : 524287);
    if (isSetRestrictions())
      hashCode = hashCode * 8191 + restrictions.hashCode();

    hashCode = hashCode * 8191 + ((isSetRentalOnlyPrice()) ? 131071 : 524287);
    if (isSetRentalOnlyPrice())
      hashCode = hashCode * 8191 + rentalOnlyPrice.hashCode();

    hashCode = hashCode * 8191 + ((isSetRentalPlusFoodPrice()) ? 131071 : 524287);
    if (isSetRentalPlusFoodPrice())
      hashCode = hashCode * 8191 + rentalPlusFoodPrice.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TPropertyWithCompleteDetails other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetCommonValues()).compareTo(other.isSetCommonValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommonValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonValues, other.commonValues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPropertyCode()).compareTo(other.isSetPropertyCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPropertyCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propertyCode, other.propertyCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLocality()).compareTo(other.isSetLocality());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocality()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locality, other.locality);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCity()).compareTo(other.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStandingCapacity()).compareTo(other.isSetStandingCapacity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStandingCapacity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.standingCapacity, other.standingCapacity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTheatreSeatingCapacity()).compareTo(other.isSetTheatreSeatingCapacity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTheatreSeatingCapacity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.theatreSeatingCapacity, other.theatreSeatingCapacity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetClusterSeatingCapacity()).compareTo(other.isSetClusterSeatingCapacity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClusterSeatingCapacity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterSeatingCapacity, other.clusterSeatingCapacity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMapPoints()).compareTo(other.isSetMapPoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapPoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapPoints, other.mapPoints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFoodPackageList()).compareTo(other.isSetFoodPackageList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFoodPackageList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foodPackageList, other.foodPackageList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPaymentPolicy()).compareTo(other.isSetPaymentPolicy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentPolicy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentPolicy, other.paymentPolicy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCancellationPolicy()).compareTo(other.isSetCancellationPolicy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCancellationPolicy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cancellationPolicy, other.cancellationPolicy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAmenities()).compareTo(other.isSetAmenities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAmenities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amenities, other.amenities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTags()).compareTo(other.isSetTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, other.tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsRentalOnlyAllowed()).compareTo(other.isSetIsRentalOnlyAllowed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsRentalOnlyAllowed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isRentalOnlyAllowed, other.isRentalOnlyAllowed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetServices()).compareTo(other.isSetServices());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServices()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.services, other.services);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRestrictions()).compareTo(other.isSetRestrictions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRestrictions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.restrictions, other.restrictions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRentalOnlyPrice()).compareTo(other.isSetRentalOnlyPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRentalOnlyPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rentalOnlyPrice, other.rentalOnlyPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRentalPlusFoodPrice()).compareTo(other.isSetRentalPlusFoodPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRentalPlusFoodPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rentalPlusFoodPrice, other.rentalPlusFoodPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TPropertyWithCompleteDetails(");
    boolean first = true;

    sb.append("commonValues:");
    if (this.commonValues == null) {
      sb.append("null");
    } else {
      sb.append(this.commonValues);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("propertyCode:");
    if (this.propertyCode == null) {
      sb.append("null");
    } else {
      sb.append(this.propertyCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("locality:");
    if (this.locality == null) {
      sb.append("null");
    } else {
      sb.append(this.locality);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("city:");
    if (this.city == null) {
      sb.append("null");
    } else {
      sb.append(this.city);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("standingCapacity:");
    sb.append(this.standingCapacity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("theatreSeatingCapacity:");
    sb.append(this.theatreSeatingCapacity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("clusterSeatingCapacity:");
    sb.append(this.clusterSeatingCapacity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mapPoints:");
    if (this.mapPoints == null) {
      sb.append("null");
    } else {
      sb.append(this.mapPoints);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("foodPackageList:");
    if (this.foodPackageList == null) {
      sb.append("null");
    } else {
      sb.append(this.foodPackageList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentPolicy:");
    if (this.paymentPolicy == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentPolicy);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cancellationPolicy:");
    if (this.cancellationPolicy == null) {
      sb.append("null");
    } else {
      sb.append(this.cancellationPolicy);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("amenities:");
    if (this.amenities == null) {
      sb.append("null");
    } else {
      sb.append(this.amenities);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tags:");
    if (this.tags == null) {
      sb.append("null");
    } else {
      sb.append(this.tags);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isRentalOnlyAllowed:");
    sb.append(this.isRentalOnlyAllowed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("services:");
    if (this.services == null) {
      sb.append("null");
    } else {
      sb.append(this.services);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("restrictions:");
    if (this.restrictions == null) {
      sb.append("null");
    } else {
      sb.append(this.restrictions);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rentalOnlyPrice:");
    if (this.rentalOnlyPrice == null) {
      sb.append("null");
    } else {
      sb.append(this.rentalOnlyPrice);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rentalPlusFoodPrice:");
    if (this.rentalPlusFoodPrice == null) {
      sb.append("null");
    } else {
      sb.append(this.rentalPlusFoodPrice);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (commonValues != null) {
      commonValues.validate();
    }
    if (mapPoints != null) {
      mapPoints.validate();
    }
    if (rentalOnlyPrice != null) {
      rentalOnlyPrice.validate();
    }
    if (rentalPlusFoodPrice != null) {
      rentalPlusFoodPrice.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPropertyWithCompleteDetailsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TPropertyWithCompleteDetailsStandardScheme getScheme() {
      return new TPropertyWithCompleteDetailsStandardScheme();
    }
  }

  private static class TPropertyWithCompleteDetailsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TPropertyWithCompleteDetails> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPropertyWithCompleteDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMMON_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.commonValues = new TCommonValues();
              struct.commonValues.read(iprot);
              struct.setCommonValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROPERTY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.propertyCode = iprot.readString();
              struct.setPropertyCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOCALITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.locality = iprot.readString();
              struct.setLocalityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.city = iprot.readString();
              struct.setCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STANDING_CAPACITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.standingCapacity = iprot.readI32();
              struct.setStandingCapacityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // THEATRE_SEATING_CAPACITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.theatreSeatingCapacity = iprot.readI32();
              struct.setTheatreSeatingCapacityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CLUSTER_SEATING_CAPACITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.clusterSeatingCapacity = iprot.readI32();
              struct.setClusterSeatingCapacityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MAP_POINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.mapPoints = new TMapLocation();
              struct.mapPoints.read(iprot);
              struct.setMapPointsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FOOD_PACKAGE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.foodPackageList = new java.util.ArrayList<TFoodPackage>(_list40.size);
                TFoodPackage _elem41;
                for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                {
                  _elem41 = new TFoodPackage();
                  _elem41.read(iprot);
                  struct.foodPackageList.add(_elem41);
                }
                iprot.readListEnd();
              }
              struct.setFoodPackageListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PAYMENT_POLICY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentPolicy = iprot.readString();
              struct.setPaymentPolicyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CANCELLATION_POLICY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cancellationPolicy = iprot.readString();
              struct.setCancellationPolicyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // AMENITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list43 = iprot.readListBegin();
                struct.amenities = new java.util.ArrayList<TAmenity>(_list43.size);
                TAmenity _elem44;
                for (int _i45 = 0; _i45 < _list43.size; ++_i45)
                {
                  _elem44 = new TAmenity();
                  _elem44.read(iprot);
                  struct.amenities.add(_elem44);
                }
                iprot.readListEnd();
              }
              struct.setAmenitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list46 = iprot.readListBegin();
                struct.tags = new java.util.ArrayList<TTag>(_list46.size);
                TTag _elem47;
                for (int _i48 = 0; _i48 < _list46.size; ++_i48)
                {
                  _elem47 = new TTag();
                  _elem47.read(iprot);
                  struct.tags.add(_elem47);
                }
                iprot.readListEnd();
              }
              struct.setTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // IS_RENTAL_ONLY_ALLOWED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isRentalOnlyAllowed = iprot.readBool();
              struct.setIsRentalOnlyAllowedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SERVICES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list49 = iprot.readListBegin();
                struct.services = new java.util.ArrayList<TService>(_list49.size);
                TService _elem50;
                for (int _i51 = 0; _i51 < _list49.size; ++_i51)
                {
                  _elem50 = new TService();
                  _elem50.read(iprot);
                  struct.services.add(_elem50);
                }
                iprot.readListEnd();
              }
              struct.setServicesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // RESTRICTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list52 = iprot.readListBegin();
                struct.restrictions = new java.util.ArrayList<TRestriction>(_list52.size);
                TRestriction _elem53;
                for (int _i54 = 0; _i54 < _list52.size; ++_i54)
                {
                  _elem53 = new TRestriction();
                  _elem53.read(iprot);
                  struct.restrictions.add(_elem53);
                }
                iprot.readListEnd();
              }
              struct.setRestrictionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // RENTAL_ONLY_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.rentalOnlyPrice = new TPrice();
              struct.rentalOnlyPrice.read(iprot);
              struct.setRentalOnlyPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // RENTAL_PLUS_FOOD_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.rentalPlusFoodPrice = new TPrice();
              struct.rentalPlusFoodPrice.read(iprot);
              struct.setRentalPlusFoodPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPropertyWithCompleteDetails struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.commonValues != null) {
        oprot.writeFieldBegin(COMMON_VALUES_FIELD_DESC);
        struct.commonValues.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.propertyCode != null) {
        oprot.writeFieldBegin(PROPERTY_CODE_FIELD_DESC);
        oprot.writeString(struct.propertyCode);
        oprot.writeFieldEnd();
      }
      if (struct.locality != null) {
        oprot.writeFieldBegin(LOCALITY_FIELD_DESC);
        oprot.writeString(struct.locality);
        oprot.writeFieldEnd();
      }
      if (struct.city != null) {
        oprot.writeFieldBegin(CITY_FIELD_DESC);
        oprot.writeString(struct.city);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STANDING_CAPACITY_FIELD_DESC);
      oprot.writeI32(struct.standingCapacity);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(THEATRE_SEATING_CAPACITY_FIELD_DESC);
      oprot.writeI32(struct.theatreSeatingCapacity);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CLUSTER_SEATING_CAPACITY_FIELD_DESC);
      oprot.writeI32(struct.clusterSeatingCapacity);
      oprot.writeFieldEnd();
      if (struct.mapPoints != null) {
        oprot.writeFieldBegin(MAP_POINTS_FIELD_DESC);
        struct.mapPoints.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.foodPackageList != null) {
        oprot.writeFieldBegin(FOOD_PACKAGE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.foodPackageList.size()));
          for (TFoodPackage _iter55 : struct.foodPackageList)
          {
            _iter55.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.paymentPolicy != null) {
        oprot.writeFieldBegin(PAYMENT_POLICY_FIELD_DESC);
        oprot.writeString(struct.paymentPolicy);
        oprot.writeFieldEnd();
      }
      if (struct.cancellationPolicy != null) {
        oprot.writeFieldBegin(CANCELLATION_POLICY_FIELD_DESC);
        oprot.writeString(struct.cancellationPolicy);
        oprot.writeFieldEnd();
      }
      if (struct.amenities != null) {
        oprot.writeFieldBegin(AMENITIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.amenities.size()));
          for (TAmenity _iter56 : struct.amenities)
          {
            _iter56.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.tags != null) {
        oprot.writeFieldBegin(TAGS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tags.size()));
          for (TTag _iter57 : struct.tags)
          {
            _iter57.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_RENTAL_ONLY_ALLOWED_FIELD_DESC);
      oprot.writeBool(struct.isRentalOnlyAllowed);
      oprot.writeFieldEnd();
      if (struct.services != null) {
        oprot.writeFieldBegin(SERVICES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.services.size()));
          for (TService _iter58 : struct.services)
          {
            _iter58.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.restrictions != null) {
        oprot.writeFieldBegin(RESTRICTIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.restrictions.size()));
          for (TRestriction _iter59 : struct.restrictions)
          {
            _iter59.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.rentalOnlyPrice != null) {
        oprot.writeFieldBegin(RENTAL_ONLY_PRICE_FIELD_DESC);
        struct.rentalOnlyPrice.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.rentalPlusFoodPrice != null) {
        oprot.writeFieldBegin(RENTAL_PLUS_FOOD_PRICE_FIELD_DESC);
        struct.rentalPlusFoodPrice.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPropertyWithCompleteDetailsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TPropertyWithCompleteDetailsTupleScheme getScheme() {
      return new TPropertyWithCompleteDetailsTupleScheme();
    }
  }

  private static class TPropertyWithCompleteDetailsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TPropertyWithCompleteDetails> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPropertyWithCompleteDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCommonValues()) {
        optionals.set(0);
      }
      if (struct.isSetPropertyCode()) {
        optionals.set(1);
      }
      if (struct.isSetLocality()) {
        optionals.set(2);
      }
      if (struct.isSetCity()) {
        optionals.set(3);
      }
      if (struct.isSetStandingCapacity()) {
        optionals.set(4);
      }
      if (struct.isSetTheatreSeatingCapacity()) {
        optionals.set(5);
      }
      if (struct.isSetClusterSeatingCapacity()) {
        optionals.set(6);
      }
      if (struct.isSetMapPoints()) {
        optionals.set(7);
      }
      if (struct.isSetFoodPackageList()) {
        optionals.set(8);
      }
      if (struct.isSetPaymentPolicy()) {
        optionals.set(9);
      }
      if (struct.isSetCancellationPolicy()) {
        optionals.set(10);
      }
      if (struct.isSetAmenities()) {
        optionals.set(11);
      }
      if (struct.isSetTags()) {
        optionals.set(12);
      }
      if (struct.isSetIsRentalOnlyAllowed()) {
        optionals.set(13);
      }
      if (struct.isSetServices()) {
        optionals.set(14);
      }
      if (struct.isSetRestrictions()) {
        optionals.set(15);
      }
      if (struct.isSetRentalOnlyPrice()) {
        optionals.set(16);
      }
      if (struct.isSetRentalPlusFoodPrice()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetCommonValues()) {
        struct.commonValues.write(oprot);
      }
      if (struct.isSetPropertyCode()) {
        oprot.writeString(struct.propertyCode);
      }
      if (struct.isSetLocality()) {
        oprot.writeString(struct.locality);
      }
      if (struct.isSetCity()) {
        oprot.writeString(struct.city);
      }
      if (struct.isSetStandingCapacity()) {
        oprot.writeI32(struct.standingCapacity);
      }
      if (struct.isSetTheatreSeatingCapacity()) {
        oprot.writeI32(struct.theatreSeatingCapacity);
      }
      if (struct.isSetClusterSeatingCapacity()) {
        oprot.writeI32(struct.clusterSeatingCapacity);
      }
      if (struct.isSetMapPoints()) {
        struct.mapPoints.write(oprot);
      }
      if (struct.isSetFoodPackageList()) {
        {
          oprot.writeI32(struct.foodPackageList.size());
          for (TFoodPackage _iter60 : struct.foodPackageList)
          {
            _iter60.write(oprot);
          }
        }
      }
      if (struct.isSetPaymentPolicy()) {
        oprot.writeString(struct.paymentPolicy);
      }
      if (struct.isSetCancellationPolicy()) {
        oprot.writeString(struct.cancellationPolicy);
      }
      if (struct.isSetAmenities()) {
        {
          oprot.writeI32(struct.amenities.size());
          for (TAmenity _iter61 : struct.amenities)
          {
            _iter61.write(oprot);
          }
        }
      }
      if (struct.isSetTags()) {
        {
          oprot.writeI32(struct.tags.size());
          for (TTag _iter62 : struct.tags)
          {
            _iter62.write(oprot);
          }
        }
      }
      if (struct.isSetIsRentalOnlyAllowed()) {
        oprot.writeBool(struct.isRentalOnlyAllowed);
      }
      if (struct.isSetServices()) {
        {
          oprot.writeI32(struct.services.size());
          for (TService _iter63 : struct.services)
          {
            _iter63.write(oprot);
          }
        }
      }
      if (struct.isSetRestrictions()) {
        {
          oprot.writeI32(struct.restrictions.size());
          for (TRestriction _iter64 : struct.restrictions)
          {
            _iter64.write(oprot);
          }
        }
      }
      if (struct.isSetRentalOnlyPrice()) {
        struct.rentalOnlyPrice.write(oprot);
      }
      if (struct.isSetRentalPlusFoodPrice()) {
        struct.rentalPlusFoodPrice.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPropertyWithCompleteDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.commonValues = new TCommonValues();
        struct.commonValues.read(iprot);
        struct.setCommonValuesIsSet(true);
      }
      if (incoming.get(1)) {
        struct.propertyCode = iprot.readString();
        struct.setPropertyCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.locality = iprot.readString();
        struct.setLocalityIsSet(true);
      }
      if (incoming.get(3)) {
        struct.city = iprot.readString();
        struct.setCityIsSet(true);
      }
      if (incoming.get(4)) {
        struct.standingCapacity = iprot.readI32();
        struct.setStandingCapacityIsSet(true);
      }
      if (incoming.get(5)) {
        struct.theatreSeatingCapacity = iprot.readI32();
        struct.setTheatreSeatingCapacityIsSet(true);
      }
      if (incoming.get(6)) {
        struct.clusterSeatingCapacity = iprot.readI32();
        struct.setClusterSeatingCapacityIsSet(true);
      }
      if (incoming.get(7)) {
        struct.mapPoints = new TMapLocation();
        struct.mapPoints.read(iprot);
        struct.setMapPointsIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list65 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.foodPackageList = new java.util.ArrayList<TFoodPackage>(_list65.size);
          TFoodPackage _elem66;
          for (int _i67 = 0; _i67 < _list65.size; ++_i67)
          {
            _elem66 = new TFoodPackage();
            _elem66.read(iprot);
            struct.foodPackageList.add(_elem66);
          }
        }
        struct.setFoodPackageListIsSet(true);
      }
      if (incoming.get(9)) {
        struct.paymentPolicy = iprot.readString();
        struct.setPaymentPolicyIsSet(true);
      }
      if (incoming.get(10)) {
        struct.cancellationPolicy = iprot.readString();
        struct.setCancellationPolicyIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list68 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.amenities = new java.util.ArrayList<TAmenity>(_list68.size);
          TAmenity _elem69;
          for (int _i70 = 0; _i70 < _list68.size; ++_i70)
          {
            _elem69 = new TAmenity();
            _elem69.read(iprot);
            struct.amenities.add(_elem69);
          }
        }
        struct.setAmenitiesIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list71 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tags = new java.util.ArrayList<TTag>(_list71.size);
          TTag _elem72;
          for (int _i73 = 0; _i73 < _list71.size; ++_i73)
          {
            _elem72 = new TTag();
            _elem72.read(iprot);
            struct.tags.add(_elem72);
          }
        }
        struct.setTagsIsSet(true);
      }
      if (incoming.get(13)) {
        struct.isRentalOnlyAllowed = iprot.readBool();
        struct.setIsRentalOnlyAllowedIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list74 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.services = new java.util.ArrayList<TService>(_list74.size);
          TService _elem75;
          for (int _i76 = 0; _i76 < _list74.size; ++_i76)
          {
            _elem75 = new TService();
            _elem75.read(iprot);
            struct.services.add(_elem75);
          }
        }
        struct.setServicesIsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.restrictions = new java.util.ArrayList<TRestriction>(_list77.size);
          TRestriction _elem78;
          for (int _i79 = 0; _i79 < _list77.size; ++_i79)
          {
            _elem78 = new TRestriction();
            _elem78.read(iprot);
            struct.restrictions.add(_elem78);
          }
        }
        struct.setRestrictionsIsSet(true);
      }
      if (incoming.get(16)) {
        struct.rentalOnlyPrice = new TPrice();
        struct.rentalOnlyPrice.read(iprot);
        struct.setRentalOnlyPriceIsSet(true);
      }
      if (incoming.get(17)) {
        struct.rentalPlusFoodPrice = new TPrice();
        struct.rentalPlusFoodPrice.read(iprot);
        struct.setRentalPlusFoodPriceIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

