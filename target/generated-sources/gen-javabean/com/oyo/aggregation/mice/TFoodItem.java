/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.oyo.aggregation.mice;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-03-20")
public class TFoodItem implements org.apache.thrift.TBase<TFoodItem, TFoodItem._Fields>, java.io.Serializable, Cloneable, Comparable<TFoodItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TFoodItem");

  private static final org.apache.thrift.protocol.TField COMMON_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("commonValues", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField FOOD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("foodType", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TFoodItemStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TFoodItemTupleSchemeFactory();

  private TCommonValues commonValues; // required
  private TFoodCategory type; // required
  private TFoodType foodType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMMON_VALUES((short)1, "commonValues"),
    TYPE((short)2, "type"),
    /**
     * 
     * @see TFoodType
     */
    FOOD_TYPE((short)3, "foodType");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMMON_VALUES
          return COMMON_VALUES;
        case 2: // TYPE
          return TYPE;
        case 3: // FOOD_TYPE
          return FOOD_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMMON_VALUES, new org.apache.thrift.meta_data.FieldMetaData("commonValues", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCommonValues.class)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TFoodCategory.class)));
    tmpMap.put(_Fields.FOOD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("foodType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TFoodType.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TFoodItem.class, metaDataMap);
  }

  public TFoodItem() {
  }

  public TFoodItem(
    TCommonValues commonValues,
    TFoodCategory type,
    TFoodType foodType)
  {
    this();
    this.commonValues = commonValues;
    this.type = type;
    this.foodType = foodType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TFoodItem(TFoodItem other) {
    if (other.isSetCommonValues()) {
      this.commonValues = new TCommonValues(other.commonValues);
    }
    if (other.isSetType()) {
      this.type = new TFoodCategory(other.type);
    }
    if (other.isSetFoodType()) {
      this.foodType = other.foodType;
    }
  }

  public TFoodItem deepCopy() {
    return new TFoodItem(this);
  }

  @Override
  public void clear() {
    this.commonValues = null;
    this.type = null;
    this.foodType = null;
  }

  public TCommonValues getCommonValues() {
    return this.commonValues;
  }

  public void setCommonValues(TCommonValues commonValues) {
    this.commonValues = commonValues;
  }

  public void unsetCommonValues() {
    this.commonValues = null;
  }

  /** Returns true if field commonValues is set (has been assigned a value) and false otherwise */
  public boolean isSetCommonValues() {
    return this.commonValues != null;
  }

  public void setCommonValuesIsSet(boolean value) {
    if (!value) {
      this.commonValues = null;
    }
  }

  public TFoodCategory getType() {
    return this.type;
  }

  public void setType(TFoodCategory type) {
    this.type = type;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  /**
   * 
   * @see TFoodType
   */
  public TFoodType getFoodType() {
    return this.foodType;
  }

  /**
   * 
   * @see TFoodType
   */
  public void setFoodType(TFoodType foodType) {
    this.foodType = foodType;
  }

  public void unsetFoodType() {
    this.foodType = null;
  }

  /** Returns true if field foodType is set (has been assigned a value) and false otherwise */
  public boolean isSetFoodType() {
    return this.foodType != null;
  }

  public void setFoodTypeIsSet(boolean value) {
    if (!value) {
      this.foodType = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case COMMON_VALUES:
      if (value == null) {
        unsetCommonValues();
      } else {
        setCommonValues((TCommonValues)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((TFoodCategory)value);
      }
      break;

    case FOOD_TYPE:
      if (value == null) {
        unsetFoodType();
      } else {
        setFoodType((TFoodType)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case COMMON_VALUES:
      return getCommonValues();

    case TYPE:
      return getType();

    case FOOD_TYPE:
      return getFoodType();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case COMMON_VALUES:
      return isSetCommonValues();
    case TYPE:
      return isSetType();
    case FOOD_TYPE:
      return isSetFoodType();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TFoodItem)
      return this.equals((TFoodItem)that);
    return false;
  }

  public boolean equals(TFoodItem that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_commonValues = true && this.isSetCommonValues();
    boolean that_present_commonValues = true && that.isSetCommonValues();
    if (this_present_commonValues || that_present_commonValues) {
      if (!(this_present_commonValues && that_present_commonValues))
        return false;
      if (!this.commonValues.equals(that.commonValues))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_foodType = true && this.isSetFoodType();
    boolean that_present_foodType = true && that.isSetFoodType();
    if (this_present_foodType || that_present_foodType) {
      if (!(this_present_foodType && that_present_foodType))
        return false;
      if (!this.foodType.equals(that.foodType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCommonValues()) ? 131071 : 524287);
    if (isSetCommonValues())
      hashCode = hashCode * 8191 + commonValues.hashCode();

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.hashCode();

    hashCode = hashCode * 8191 + ((isSetFoodType()) ? 131071 : 524287);
    if (isSetFoodType())
      hashCode = hashCode * 8191 + foodType.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(TFoodItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetCommonValues()).compareTo(other.isSetCommonValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommonValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonValues, other.commonValues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFoodType()).compareTo(other.isSetFoodType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFoodType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foodType, other.foodType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TFoodItem(");
    boolean first = true;

    sb.append("commonValues:");
    if (this.commonValues == null) {
      sb.append("null");
    } else {
      sb.append(this.commonValues);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("foodType:");
    if (this.foodType == null) {
      sb.append("null");
    } else {
      sb.append(this.foodType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (commonValues != null) {
      commonValues.validate();
    }
    if (type != null) {
      type.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TFoodItemStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TFoodItemStandardScheme getScheme() {
      return new TFoodItemStandardScheme();
    }
  }

  private static class TFoodItemStandardScheme extends org.apache.thrift.scheme.StandardScheme<TFoodItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TFoodItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMMON_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.commonValues = new TCommonValues();
              struct.commonValues.read(iprot);
              struct.setCommonValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.type = new TFoodCategory();
              struct.type.read(iprot);
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FOOD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.foodType = com.oyo.aggregation.mice.TFoodType.findByValue(iprot.readI32());
              struct.setFoodTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TFoodItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.commonValues != null) {
        oprot.writeFieldBegin(COMMON_VALUES_FIELD_DESC);
        struct.commonValues.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        struct.type.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.foodType != null) {
        oprot.writeFieldBegin(FOOD_TYPE_FIELD_DESC);
        oprot.writeI32(struct.foodType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TFoodItemTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TFoodItemTupleScheme getScheme() {
      return new TFoodItemTupleScheme();
    }
  }

  private static class TFoodItemTupleScheme extends org.apache.thrift.scheme.TupleScheme<TFoodItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TFoodItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCommonValues()) {
        optionals.set(0);
      }
      if (struct.isSetType()) {
        optionals.set(1);
      }
      if (struct.isSetFoodType()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetCommonValues()) {
        struct.commonValues.write(oprot);
      }
      if (struct.isSetType()) {
        struct.type.write(oprot);
      }
      if (struct.isSetFoodType()) {
        oprot.writeI32(struct.foodType.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TFoodItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.commonValues = new TCommonValues();
        struct.commonValues.read(iprot);
        struct.setCommonValuesIsSet(true);
      }
      if (incoming.get(1)) {
        struct.type = new TFoodCategory();
        struct.type.read(iprot);
        struct.setTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.foodType = com.oyo.aggregation.mice.TFoodType.findByValue(iprot.readI32());
        struct.setFoodTypeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

