/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.oyo.aggregation.mice;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-03-14")
public class TFoodPackage implements org.apache.thrift.TBase<TFoodPackage, TFoodPackage._Fields>, java.io.Serializable, Cloneable, Comparable<TFoodPackage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TFoodPackage");

  private static final org.apache.thrift.protocol.TField CATALOG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("catalogId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FOOD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("foodType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField FOOD_CATEGORY_WITH_QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("foodCategoryWithQuantity", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField PRICE_PER_PLATE_FIELD_DESC = new org.apache.thrift.protocol.TField("pricePerPlate", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TFoodPackageStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TFoodPackageTupleSchemeFactory();

  private java.lang.String catalogId; // required
  private java.lang.String name; // required
  private TFoodType foodType; // required
  private java.util.List<TFoodCategoryWithQuantity> foodCategoryWithQuantity; // required
  private java.util.List<TPricePerPlate> pricePerPlate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CATALOG_ID((short)1, "catalogId"),
    NAME((short)2, "name"),
    /**
     * 
     * @see TFoodType
     */
    FOOD_TYPE((short)3, "foodType"),
    FOOD_CATEGORY_WITH_QUANTITY((short)4, "foodCategoryWithQuantity"),
    PRICE_PER_PLATE((short)5, "pricePerPlate");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CATALOG_ID
          return CATALOG_ID;
        case 2: // NAME
          return NAME;
        case 3: // FOOD_TYPE
          return FOOD_TYPE;
        case 4: // FOOD_CATEGORY_WITH_QUANTITY
          return FOOD_CATEGORY_WITH_QUANTITY;
        case 5: // PRICE_PER_PLATE
          return PRICE_PER_PLATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CATALOG_ID, new org.apache.thrift.meta_data.FieldMetaData("catalogId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FOOD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("foodType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TFoodType.class)));
    tmpMap.put(_Fields.FOOD_CATEGORY_WITH_QUANTITY, new org.apache.thrift.meta_data.FieldMetaData("foodCategoryWithQuantity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TFoodCategoryWithQuantity.class))));
    tmpMap.put(_Fields.PRICE_PER_PLATE, new org.apache.thrift.meta_data.FieldMetaData("pricePerPlate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPricePerPlate.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TFoodPackage.class, metaDataMap);
  }

  public TFoodPackage() {
  }

  public TFoodPackage(
    java.lang.String catalogId,
    java.lang.String name,
    TFoodType foodType,
    java.util.List<TFoodCategoryWithQuantity> foodCategoryWithQuantity,
    java.util.List<TPricePerPlate> pricePerPlate)
  {
    this();
    this.catalogId = catalogId;
    this.name = name;
    this.foodType = foodType;
    this.foodCategoryWithQuantity = foodCategoryWithQuantity;
    this.pricePerPlate = pricePerPlate;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TFoodPackage(TFoodPackage other) {
    if (other.isSetCatalogId()) {
      this.catalogId = other.catalogId;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetFoodType()) {
      this.foodType = other.foodType;
    }
    if (other.isSetFoodCategoryWithQuantity()) {
      java.util.List<TFoodCategoryWithQuantity> __this__foodCategoryWithQuantity = new java.util.ArrayList<TFoodCategoryWithQuantity>(other.foodCategoryWithQuantity.size());
      for (TFoodCategoryWithQuantity other_element : other.foodCategoryWithQuantity) {
        __this__foodCategoryWithQuantity.add(new TFoodCategoryWithQuantity(other_element));
      }
      this.foodCategoryWithQuantity = __this__foodCategoryWithQuantity;
    }
    if (other.isSetPricePerPlate()) {
      java.util.List<TPricePerPlate> __this__pricePerPlate = new java.util.ArrayList<TPricePerPlate>(other.pricePerPlate.size());
      for (TPricePerPlate other_element : other.pricePerPlate) {
        __this__pricePerPlate.add(new TPricePerPlate(other_element));
      }
      this.pricePerPlate = __this__pricePerPlate;
    }
  }

  public TFoodPackage deepCopy() {
    return new TFoodPackage(this);
  }

  @Override
  public void clear() {
    this.catalogId = null;
    this.name = null;
    this.foodType = null;
    this.foodCategoryWithQuantity = null;
    this.pricePerPlate = null;
  }

  public java.lang.String getCatalogId() {
    return this.catalogId;
  }

  public void setCatalogId(java.lang.String catalogId) {
    this.catalogId = catalogId;
  }

  public void unsetCatalogId() {
    this.catalogId = null;
  }

  /** Returns true if field catalogId is set (has been assigned a value) and false otherwise */
  public boolean isSetCatalogId() {
    return this.catalogId != null;
  }

  public void setCatalogIdIsSet(boolean value) {
    if (!value) {
      this.catalogId = null;
    }
  }

  public java.lang.String getName() {
    return this.name;
  }

  public void setName(java.lang.String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * 
   * @see TFoodType
   */
  public TFoodType getFoodType() {
    return this.foodType;
  }

  /**
   * 
   * @see TFoodType
   */
  public void setFoodType(TFoodType foodType) {
    this.foodType = foodType;
  }

  public void unsetFoodType() {
    this.foodType = null;
  }

  /** Returns true if field foodType is set (has been assigned a value) and false otherwise */
  public boolean isSetFoodType() {
    return this.foodType != null;
  }

  public void setFoodTypeIsSet(boolean value) {
    if (!value) {
      this.foodType = null;
    }
  }

  public int getFoodCategoryWithQuantitySize() {
    return (this.foodCategoryWithQuantity == null) ? 0 : this.foodCategoryWithQuantity.size();
  }

  public java.util.Iterator<TFoodCategoryWithQuantity> getFoodCategoryWithQuantityIterator() {
    return (this.foodCategoryWithQuantity == null) ? null : this.foodCategoryWithQuantity.iterator();
  }

  public void addToFoodCategoryWithQuantity(TFoodCategoryWithQuantity elem) {
    if (this.foodCategoryWithQuantity == null) {
      this.foodCategoryWithQuantity = new java.util.ArrayList<TFoodCategoryWithQuantity>();
    }
    this.foodCategoryWithQuantity.add(elem);
  }

  public java.util.List<TFoodCategoryWithQuantity> getFoodCategoryWithQuantity() {
    return this.foodCategoryWithQuantity;
  }

  public void setFoodCategoryWithQuantity(java.util.List<TFoodCategoryWithQuantity> foodCategoryWithQuantity) {
    this.foodCategoryWithQuantity = foodCategoryWithQuantity;
  }

  public void unsetFoodCategoryWithQuantity() {
    this.foodCategoryWithQuantity = null;
  }

  /** Returns true if field foodCategoryWithQuantity is set (has been assigned a value) and false otherwise */
  public boolean isSetFoodCategoryWithQuantity() {
    return this.foodCategoryWithQuantity != null;
  }

  public void setFoodCategoryWithQuantityIsSet(boolean value) {
    if (!value) {
      this.foodCategoryWithQuantity = null;
    }
  }

  public int getPricePerPlateSize() {
    return (this.pricePerPlate == null) ? 0 : this.pricePerPlate.size();
  }

  public java.util.Iterator<TPricePerPlate> getPricePerPlateIterator() {
    return (this.pricePerPlate == null) ? null : this.pricePerPlate.iterator();
  }

  public void addToPricePerPlate(TPricePerPlate elem) {
    if (this.pricePerPlate == null) {
      this.pricePerPlate = new java.util.ArrayList<TPricePerPlate>();
    }
    this.pricePerPlate.add(elem);
  }

  public java.util.List<TPricePerPlate> getPricePerPlate() {
    return this.pricePerPlate;
  }

  public void setPricePerPlate(java.util.List<TPricePerPlate> pricePerPlate) {
    this.pricePerPlate = pricePerPlate;
  }

  public void unsetPricePerPlate() {
    this.pricePerPlate = null;
  }

  /** Returns true if field pricePerPlate is set (has been assigned a value) and false otherwise */
  public boolean isSetPricePerPlate() {
    return this.pricePerPlate != null;
  }

  public void setPricePerPlateIsSet(boolean value) {
    if (!value) {
      this.pricePerPlate = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case CATALOG_ID:
      if (value == null) {
        unsetCatalogId();
      } else {
        setCatalogId((java.lang.String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case FOOD_TYPE:
      if (value == null) {
        unsetFoodType();
      } else {
        setFoodType((TFoodType)value);
      }
      break;

    case FOOD_CATEGORY_WITH_QUANTITY:
      if (value == null) {
        unsetFoodCategoryWithQuantity();
      } else {
        setFoodCategoryWithQuantity((java.util.List<TFoodCategoryWithQuantity>)value);
      }
      break;

    case PRICE_PER_PLATE:
      if (value == null) {
        unsetPricePerPlate();
      } else {
        setPricePerPlate((java.util.List<TPricePerPlate>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CATALOG_ID:
      return getCatalogId();

    case NAME:
      return getName();

    case FOOD_TYPE:
      return getFoodType();

    case FOOD_CATEGORY_WITH_QUANTITY:
      return getFoodCategoryWithQuantity();

    case PRICE_PER_PLATE:
      return getPricePerPlate();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CATALOG_ID:
      return isSetCatalogId();
    case NAME:
      return isSetName();
    case FOOD_TYPE:
      return isSetFoodType();
    case FOOD_CATEGORY_WITH_QUANTITY:
      return isSetFoodCategoryWithQuantity();
    case PRICE_PER_PLATE:
      return isSetPricePerPlate();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TFoodPackage)
      return this.equals((TFoodPackage)that);
    return false;
  }

  public boolean equals(TFoodPackage that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_catalogId = true && this.isSetCatalogId();
    boolean that_present_catalogId = true && that.isSetCatalogId();
    if (this_present_catalogId || that_present_catalogId) {
      if (!(this_present_catalogId && that_present_catalogId))
        return false;
      if (!this.catalogId.equals(that.catalogId))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_foodType = true && this.isSetFoodType();
    boolean that_present_foodType = true && that.isSetFoodType();
    if (this_present_foodType || that_present_foodType) {
      if (!(this_present_foodType && that_present_foodType))
        return false;
      if (!this.foodType.equals(that.foodType))
        return false;
    }

    boolean this_present_foodCategoryWithQuantity = true && this.isSetFoodCategoryWithQuantity();
    boolean that_present_foodCategoryWithQuantity = true && that.isSetFoodCategoryWithQuantity();
    if (this_present_foodCategoryWithQuantity || that_present_foodCategoryWithQuantity) {
      if (!(this_present_foodCategoryWithQuantity && that_present_foodCategoryWithQuantity))
        return false;
      if (!this.foodCategoryWithQuantity.equals(that.foodCategoryWithQuantity))
        return false;
    }

    boolean this_present_pricePerPlate = true && this.isSetPricePerPlate();
    boolean that_present_pricePerPlate = true && that.isSetPricePerPlate();
    if (this_present_pricePerPlate || that_present_pricePerPlate) {
      if (!(this_present_pricePerPlate && that_present_pricePerPlate))
        return false;
      if (!this.pricePerPlate.equals(that.pricePerPlate))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCatalogId()) ? 131071 : 524287);
    if (isSetCatalogId())
      hashCode = hashCode * 8191 + catalogId.hashCode();

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetFoodType()) ? 131071 : 524287);
    if (isSetFoodType())
      hashCode = hashCode * 8191 + foodType.getValue();

    hashCode = hashCode * 8191 + ((isSetFoodCategoryWithQuantity()) ? 131071 : 524287);
    if (isSetFoodCategoryWithQuantity())
      hashCode = hashCode * 8191 + foodCategoryWithQuantity.hashCode();

    hashCode = hashCode * 8191 + ((isSetPricePerPlate()) ? 131071 : 524287);
    if (isSetPricePerPlate())
      hashCode = hashCode * 8191 + pricePerPlate.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TFoodPackage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetCatalogId()).compareTo(other.isSetCatalogId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCatalogId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalogId, other.catalogId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFoodType()).compareTo(other.isSetFoodType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFoodType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foodType, other.foodType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFoodCategoryWithQuantity()).compareTo(other.isSetFoodCategoryWithQuantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFoodCategoryWithQuantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foodCategoryWithQuantity, other.foodCategoryWithQuantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPricePerPlate()).compareTo(other.isSetPricePerPlate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPricePerPlate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pricePerPlate, other.pricePerPlate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TFoodPackage(");
    boolean first = true;

    sb.append("catalogId:");
    if (this.catalogId == null) {
      sb.append("null");
    } else {
      sb.append(this.catalogId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("foodType:");
    if (this.foodType == null) {
      sb.append("null");
    } else {
      sb.append(this.foodType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("foodCategoryWithQuantity:");
    if (this.foodCategoryWithQuantity == null) {
      sb.append("null");
    } else {
      sb.append(this.foodCategoryWithQuantity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pricePerPlate:");
    if (this.pricePerPlate == null) {
      sb.append("null");
    } else {
      sb.append(this.pricePerPlate);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TFoodPackageStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TFoodPackageStandardScheme getScheme() {
      return new TFoodPackageStandardScheme();
    }
  }

  private static class TFoodPackageStandardScheme extends org.apache.thrift.scheme.StandardScheme<TFoodPackage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TFoodPackage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CATALOG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.catalogId = iprot.readString();
              struct.setCatalogIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FOOD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.foodType = com.oyo.aggregation.mice.TFoodType.findByValue(iprot.readI32());
              struct.setFoodTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FOOD_CATEGORY_WITH_QUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.foodCategoryWithQuantity = new java.util.ArrayList<TFoodCategoryWithQuantity>(_list0.size);
                TFoodCategoryWithQuantity _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new TFoodCategoryWithQuantity();
                  _elem1.read(iprot);
                  struct.foodCategoryWithQuantity.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setFoodCategoryWithQuantityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRICE_PER_PLATE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.pricePerPlate = new java.util.ArrayList<TPricePerPlate>(_list3.size);
                TPricePerPlate _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new TPricePerPlate();
                  _elem4.read(iprot);
                  struct.pricePerPlate.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setPricePerPlateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TFoodPackage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.catalogId != null) {
        oprot.writeFieldBegin(CATALOG_ID_FIELD_DESC);
        oprot.writeString(struct.catalogId);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.foodType != null) {
        oprot.writeFieldBegin(FOOD_TYPE_FIELD_DESC);
        oprot.writeI32(struct.foodType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.foodCategoryWithQuantity != null) {
        oprot.writeFieldBegin(FOOD_CATEGORY_WITH_QUANTITY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.foodCategoryWithQuantity.size()));
          for (TFoodCategoryWithQuantity _iter6 : struct.foodCategoryWithQuantity)
          {
            _iter6.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.pricePerPlate != null) {
        oprot.writeFieldBegin(PRICE_PER_PLATE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.pricePerPlate.size()));
          for (TPricePerPlate _iter7 : struct.pricePerPlate)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TFoodPackageTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TFoodPackageTupleScheme getScheme() {
      return new TFoodPackageTupleScheme();
    }
  }

  private static class TFoodPackageTupleScheme extends org.apache.thrift.scheme.TupleScheme<TFoodPackage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TFoodPackage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCatalogId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetFoodType()) {
        optionals.set(2);
      }
      if (struct.isSetFoodCategoryWithQuantity()) {
        optionals.set(3);
      }
      if (struct.isSetPricePerPlate()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetCatalogId()) {
        oprot.writeString(struct.catalogId);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetFoodType()) {
        oprot.writeI32(struct.foodType.getValue());
      }
      if (struct.isSetFoodCategoryWithQuantity()) {
        {
          oprot.writeI32(struct.foodCategoryWithQuantity.size());
          for (TFoodCategoryWithQuantity _iter8 : struct.foodCategoryWithQuantity)
          {
            _iter8.write(oprot);
          }
        }
      }
      if (struct.isSetPricePerPlate()) {
        {
          oprot.writeI32(struct.pricePerPlate.size());
          for (TPricePerPlate _iter9 : struct.pricePerPlate)
          {
            _iter9.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TFoodPackage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.catalogId = iprot.readString();
        struct.setCatalogIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.foodType = com.oyo.aggregation.mice.TFoodType.findByValue(iprot.readI32());
        struct.setFoodTypeIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.foodCategoryWithQuantity = new java.util.ArrayList<TFoodCategoryWithQuantity>(_list10.size);
          TFoodCategoryWithQuantity _elem11;
          for (int _i12 = 0; _i12 < _list10.size; ++_i12)
          {
            _elem11 = new TFoodCategoryWithQuantity();
            _elem11.read(iprot);
            struct.foodCategoryWithQuantity.add(_elem11);
          }
        }
        struct.setFoodCategoryWithQuantityIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.pricePerPlate = new java.util.ArrayList<TPricePerPlate>(_list13.size);
          TPricePerPlate _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new TPricePerPlate();
            _elem14.read(iprot);
            struct.pricePerPlate.add(_elem14);
          }
        }
        struct.setPricePerPlateIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

