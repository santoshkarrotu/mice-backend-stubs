/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.oyo.aggregation.mice;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-03-14")
public class TMiceAggregationService {

  public interface Iface {

    public TPropertyDetailedResponse getPropertyDetails(java.lang.String catalogId, TPropertySearchAndFilterAttributes userSelectedAttributes) throws org.apache.thrift.TException;

    public java.util.List<TPropertySmallResponse> getPropertyListingWithFewDetails(java.util.List<java.lang.String> catalogIds, TPropertySearchAndFilterAttributes userSelectedAttributes) throws org.apache.thrift.TException;

    public java.util.List<TPropertyStandardResponse> getPropertyListingWithStandardDetails(java.util.List<java.lang.String> catalogIds, TPropertySearchAndFilterAttributes userSelectedAttributes) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getPropertyDetails(java.lang.String catalogId, TPropertySearchAndFilterAttributes userSelectedAttributes, org.apache.thrift.async.AsyncMethodCallback<TPropertyDetailedResponse> resultHandler) throws org.apache.thrift.TException;

    public void getPropertyListingWithFewDetails(java.util.List<java.lang.String> catalogIds, TPropertySearchAndFilterAttributes userSelectedAttributes, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPropertySmallResponse>> resultHandler) throws org.apache.thrift.TException;

    public void getPropertyListingWithStandardDetails(java.util.List<java.lang.String> catalogIds, TPropertySearchAndFilterAttributes userSelectedAttributes, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPropertyStandardResponse>> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public TPropertyDetailedResponse getPropertyDetails(java.lang.String catalogId, TPropertySearchAndFilterAttributes userSelectedAttributes) throws org.apache.thrift.TException
    {
      send_getPropertyDetails(catalogId, userSelectedAttributes);
      return recv_getPropertyDetails();
    }

    public void send_getPropertyDetails(java.lang.String catalogId, TPropertySearchAndFilterAttributes userSelectedAttributes) throws org.apache.thrift.TException
    {
      getPropertyDetails_args args = new getPropertyDetails_args();
      args.setCatalogId(catalogId);
      args.setUserSelectedAttributes(userSelectedAttributes);
      sendBase("getPropertyDetails", args);
    }

    public TPropertyDetailedResponse recv_getPropertyDetails() throws org.apache.thrift.TException
    {
      getPropertyDetails_result result = new getPropertyDetails_result();
      receiveBase(result, "getPropertyDetails");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPropertyDetails failed: unknown result");
    }

    public java.util.List<TPropertySmallResponse> getPropertyListingWithFewDetails(java.util.List<java.lang.String> catalogIds, TPropertySearchAndFilterAttributes userSelectedAttributes) throws org.apache.thrift.TException
    {
      send_getPropertyListingWithFewDetails(catalogIds, userSelectedAttributes);
      return recv_getPropertyListingWithFewDetails();
    }

    public void send_getPropertyListingWithFewDetails(java.util.List<java.lang.String> catalogIds, TPropertySearchAndFilterAttributes userSelectedAttributes) throws org.apache.thrift.TException
    {
      getPropertyListingWithFewDetails_args args = new getPropertyListingWithFewDetails_args();
      args.setCatalogIds(catalogIds);
      args.setUserSelectedAttributes(userSelectedAttributes);
      sendBase("getPropertyListingWithFewDetails", args);
    }

    public java.util.List<TPropertySmallResponse> recv_getPropertyListingWithFewDetails() throws org.apache.thrift.TException
    {
      getPropertyListingWithFewDetails_result result = new getPropertyListingWithFewDetails_result();
      receiveBase(result, "getPropertyListingWithFewDetails");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPropertyListingWithFewDetails failed: unknown result");
    }

    public java.util.List<TPropertyStandardResponse> getPropertyListingWithStandardDetails(java.util.List<java.lang.String> catalogIds, TPropertySearchAndFilterAttributes userSelectedAttributes) throws org.apache.thrift.TException
    {
      send_getPropertyListingWithStandardDetails(catalogIds, userSelectedAttributes);
      return recv_getPropertyListingWithStandardDetails();
    }

    public void send_getPropertyListingWithStandardDetails(java.util.List<java.lang.String> catalogIds, TPropertySearchAndFilterAttributes userSelectedAttributes) throws org.apache.thrift.TException
    {
      getPropertyListingWithStandardDetails_args args = new getPropertyListingWithStandardDetails_args();
      args.setCatalogIds(catalogIds);
      args.setUserSelectedAttributes(userSelectedAttributes);
      sendBase("getPropertyListingWithStandardDetails", args);
    }

    public java.util.List<TPropertyStandardResponse> recv_getPropertyListingWithStandardDetails() throws org.apache.thrift.TException
    {
      getPropertyListingWithStandardDetails_result result = new getPropertyListingWithStandardDetails_result();
      receiveBase(result, "getPropertyListingWithStandardDetails");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPropertyListingWithStandardDetails failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getPropertyDetails(java.lang.String catalogId, TPropertySearchAndFilterAttributes userSelectedAttributes, org.apache.thrift.async.AsyncMethodCallback<TPropertyDetailedResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPropertyDetails_call method_call = new getPropertyDetails_call(catalogId, userSelectedAttributes, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPropertyDetails_call extends org.apache.thrift.async.TAsyncMethodCall<TPropertyDetailedResponse> {
      private java.lang.String catalogId;
      private TPropertySearchAndFilterAttributes userSelectedAttributes;
      public getPropertyDetails_call(java.lang.String catalogId, TPropertySearchAndFilterAttributes userSelectedAttributes, org.apache.thrift.async.AsyncMethodCallback<TPropertyDetailedResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.catalogId = catalogId;
        this.userSelectedAttributes = userSelectedAttributes;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPropertyDetails", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPropertyDetails_args args = new getPropertyDetails_args();
        args.setCatalogId(catalogId);
        args.setUserSelectedAttributes(userSelectedAttributes);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TPropertyDetailedResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPropertyDetails();
      }
    }

    public void getPropertyListingWithFewDetails(java.util.List<java.lang.String> catalogIds, TPropertySearchAndFilterAttributes userSelectedAttributes, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPropertySmallResponse>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPropertyListingWithFewDetails_call method_call = new getPropertyListingWithFewDetails_call(catalogIds, userSelectedAttributes, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPropertyListingWithFewDetails_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<TPropertySmallResponse>> {
      private java.util.List<java.lang.String> catalogIds;
      private TPropertySearchAndFilterAttributes userSelectedAttributes;
      public getPropertyListingWithFewDetails_call(java.util.List<java.lang.String> catalogIds, TPropertySearchAndFilterAttributes userSelectedAttributes, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPropertySmallResponse>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.catalogIds = catalogIds;
        this.userSelectedAttributes = userSelectedAttributes;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPropertyListingWithFewDetails", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPropertyListingWithFewDetails_args args = new getPropertyListingWithFewDetails_args();
        args.setCatalogIds(catalogIds);
        args.setUserSelectedAttributes(userSelectedAttributes);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<TPropertySmallResponse> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPropertyListingWithFewDetails();
      }
    }

    public void getPropertyListingWithStandardDetails(java.util.List<java.lang.String> catalogIds, TPropertySearchAndFilterAttributes userSelectedAttributes, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPropertyStandardResponse>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPropertyListingWithStandardDetails_call method_call = new getPropertyListingWithStandardDetails_call(catalogIds, userSelectedAttributes, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPropertyListingWithStandardDetails_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<TPropertyStandardResponse>> {
      private java.util.List<java.lang.String> catalogIds;
      private TPropertySearchAndFilterAttributes userSelectedAttributes;
      public getPropertyListingWithStandardDetails_call(java.util.List<java.lang.String> catalogIds, TPropertySearchAndFilterAttributes userSelectedAttributes, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPropertyStandardResponse>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.catalogIds = catalogIds;
        this.userSelectedAttributes = userSelectedAttributes;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPropertyListingWithStandardDetails", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPropertyListingWithStandardDetails_args args = new getPropertyListingWithStandardDetails_args();
        args.setCatalogIds(catalogIds);
        args.setUserSelectedAttributes(userSelectedAttributes);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<TPropertyStandardResponse> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPropertyListingWithStandardDetails();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getPropertyDetails", new getPropertyDetails());
      processMap.put("getPropertyListingWithFewDetails", new getPropertyListingWithFewDetails());
      processMap.put("getPropertyListingWithStandardDetails", new getPropertyListingWithStandardDetails());
      return processMap;
    }

    public static class getPropertyDetails<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPropertyDetails_args> {
      public getPropertyDetails() {
        super("getPropertyDetails");
      }

      public getPropertyDetails_args getEmptyArgsInstance() {
        return new getPropertyDetails_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPropertyDetails_result getResult(I iface, getPropertyDetails_args args) throws org.apache.thrift.TException {
        getPropertyDetails_result result = new getPropertyDetails_result();
        result.success = iface.getPropertyDetails(args.catalogId, args.userSelectedAttributes);
        return result;
      }
    }

    public static class getPropertyListingWithFewDetails<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPropertyListingWithFewDetails_args> {
      public getPropertyListingWithFewDetails() {
        super("getPropertyListingWithFewDetails");
      }

      public getPropertyListingWithFewDetails_args getEmptyArgsInstance() {
        return new getPropertyListingWithFewDetails_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPropertyListingWithFewDetails_result getResult(I iface, getPropertyListingWithFewDetails_args args) throws org.apache.thrift.TException {
        getPropertyListingWithFewDetails_result result = new getPropertyListingWithFewDetails_result();
        result.success = iface.getPropertyListingWithFewDetails(args.catalogIds, args.userSelectedAttributes);
        return result;
      }
    }

    public static class getPropertyListingWithStandardDetails<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPropertyListingWithStandardDetails_args> {
      public getPropertyListingWithStandardDetails() {
        super("getPropertyListingWithStandardDetails");
      }

      public getPropertyListingWithStandardDetails_args getEmptyArgsInstance() {
        return new getPropertyListingWithStandardDetails_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPropertyListingWithStandardDetails_result getResult(I iface, getPropertyListingWithStandardDetails_args args) throws org.apache.thrift.TException {
        getPropertyListingWithStandardDetails_result result = new getPropertyListingWithStandardDetails_result();
        result.success = iface.getPropertyListingWithStandardDetails(args.catalogIds, args.userSelectedAttributes);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getPropertyDetails", new getPropertyDetails());
      processMap.put("getPropertyListingWithFewDetails", new getPropertyListingWithFewDetails());
      processMap.put("getPropertyListingWithStandardDetails", new getPropertyListingWithStandardDetails());
      return processMap;
    }

    public static class getPropertyDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPropertyDetails_args, TPropertyDetailedResponse> {
      public getPropertyDetails() {
        super("getPropertyDetails");
      }

      public getPropertyDetails_args getEmptyArgsInstance() {
        return new getPropertyDetails_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TPropertyDetailedResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TPropertyDetailedResponse>() { 
          public void onComplete(TPropertyDetailedResponse o) {
            getPropertyDetails_result result = new getPropertyDetails_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getPropertyDetails_result result = new getPropertyDetails_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPropertyDetails_args args, org.apache.thrift.async.AsyncMethodCallback<TPropertyDetailedResponse> resultHandler) throws org.apache.thrift.TException {
        iface.getPropertyDetails(args.catalogId, args.userSelectedAttributes,resultHandler);
      }
    }

    public static class getPropertyListingWithFewDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPropertyListingWithFewDetails_args, java.util.List<TPropertySmallResponse>> {
      public getPropertyListingWithFewDetails() {
        super("getPropertyListingWithFewDetails");
      }

      public getPropertyListingWithFewDetails_args getEmptyArgsInstance() {
        return new getPropertyListingWithFewDetails_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPropertySmallResponse>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPropertySmallResponse>>() { 
          public void onComplete(java.util.List<TPropertySmallResponse> o) {
            getPropertyListingWithFewDetails_result result = new getPropertyListingWithFewDetails_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getPropertyListingWithFewDetails_result result = new getPropertyListingWithFewDetails_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPropertyListingWithFewDetails_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPropertySmallResponse>> resultHandler) throws org.apache.thrift.TException {
        iface.getPropertyListingWithFewDetails(args.catalogIds, args.userSelectedAttributes,resultHandler);
      }
    }

    public static class getPropertyListingWithStandardDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPropertyListingWithStandardDetails_args, java.util.List<TPropertyStandardResponse>> {
      public getPropertyListingWithStandardDetails() {
        super("getPropertyListingWithStandardDetails");
      }

      public getPropertyListingWithStandardDetails_args getEmptyArgsInstance() {
        return new getPropertyListingWithStandardDetails_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPropertyStandardResponse>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPropertyStandardResponse>>() { 
          public void onComplete(java.util.List<TPropertyStandardResponse> o) {
            getPropertyListingWithStandardDetails_result result = new getPropertyListingWithStandardDetails_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getPropertyListingWithStandardDetails_result result = new getPropertyListingWithStandardDetails_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPropertyListingWithStandardDetails_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPropertyStandardResponse>> resultHandler) throws org.apache.thrift.TException {
        iface.getPropertyListingWithStandardDetails(args.catalogIds, args.userSelectedAttributes,resultHandler);
      }
    }

  }

  public static class getPropertyDetails_args implements org.apache.thrift.TBase<getPropertyDetails_args, getPropertyDetails_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPropertyDetails_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPropertyDetails_args");

    private static final org.apache.thrift.protocol.TField CATALOG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("catalogId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_SELECTED_ATTRIBUTES_FIELD_DESC = new org.apache.thrift.protocol.TField("userSelectedAttributes", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPropertyDetails_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPropertyDetails_argsTupleSchemeFactory();

    private java.lang.String catalogId; // required
    private TPropertySearchAndFilterAttributes userSelectedAttributes; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CATALOG_ID((short)1, "catalogId"),
      USER_SELECTED_ATTRIBUTES((short)2, "userSelectedAttributes");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CATALOG_ID
            return CATALOG_ID;
          case 2: // USER_SELECTED_ATTRIBUTES
            return USER_SELECTED_ATTRIBUTES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CATALOG_ID, new org.apache.thrift.meta_data.FieldMetaData("catalogId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_SELECTED_ATTRIBUTES, new org.apache.thrift.meta_data.FieldMetaData("userSelectedAttributes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPropertySearchAndFilterAttributes.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPropertyDetails_args.class, metaDataMap);
    }

    public getPropertyDetails_args() {
    }

    public getPropertyDetails_args(
      java.lang.String catalogId,
      TPropertySearchAndFilterAttributes userSelectedAttributes)
    {
      this();
      this.catalogId = catalogId;
      this.userSelectedAttributes = userSelectedAttributes;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPropertyDetails_args(getPropertyDetails_args other) {
      if (other.isSetCatalogId()) {
        this.catalogId = other.catalogId;
      }
      if (other.isSetUserSelectedAttributes()) {
        this.userSelectedAttributes = new TPropertySearchAndFilterAttributes(other.userSelectedAttributes);
      }
    }

    public getPropertyDetails_args deepCopy() {
      return new getPropertyDetails_args(this);
    }

    @Override
    public void clear() {
      this.catalogId = null;
      this.userSelectedAttributes = null;
    }

    public java.lang.String getCatalogId() {
      return this.catalogId;
    }

    public void setCatalogId(java.lang.String catalogId) {
      this.catalogId = catalogId;
    }

    public void unsetCatalogId() {
      this.catalogId = null;
    }

    /** Returns true if field catalogId is set (has been assigned a value) and false otherwise */
    public boolean isSetCatalogId() {
      return this.catalogId != null;
    }

    public void setCatalogIdIsSet(boolean value) {
      if (!value) {
        this.catalogId = null;
      }
    }

    public TPropertySearchAndFilterAttributes getUserSelectedAttributes() {
      return this.userSelectedAttributes;
    }

    public void setUserSelectedAttributes(TPropertySearchAndFilterAttributes userSelectedAttributes) {
      this.userSelectedAttributes = userSelectedAttributes;
    }

    public void unsetUserSelectedAttributes() {
      this.userSelectedAttributes = null;
    }

    /** Returns true if field userSelectedAttributes is set (has been assigned a value) and false otherwise */
    public boolean isSetUserSelectedAttributes() {
      return this.userSelectedAttributes != null;
    }

    public void setUserSelectedAttributesIsSet(boolean value) {
      if (!value) {
        this.userSelectedAttributes = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CATALOG_ID:
        if (value == null) {
          unsetCatalogId();
        } else {
          setCatalogId((java.lang.String)value);
        }
        break;

      case USER_SELECTED_ATTRIBUTES:
        if (value == null) {
          unsetUserSelectedAttributes();
        } else {
          setUserSelectedAttributes((TPropertySearchAndFilterAttributes)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CATALOG_ID:
        return getCatalogId();

      case USER_SELECTED_ATTRIBUTES:
        return getUserSelectedAttributes();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CATALOG_ID:
        return isSetCatalogId();
      case USER_SELECTED_ATTRIBUTES:
        return isSetUserSelectedAttributes();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getPropertyDetails_args)
        return this.equals((getPropertyDetails_args)that);
      return false;
    }

    public boolean equals(getPropertyDetails_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_catalogId = true && this.isSetCatalogId();
      boolean that_present_catalogId = true && that.isSetCatalogId();
      if (this_present_catalogId || that_present_catalogId) {
        if (!(this_present_catalogId && that_present_catalogId))
          return false;
        if (!this.catalogId.equals(that.catalogId))
          return false;
      }

      boolean this_present_userSelectedAttributes = true && this.isSetUserSelectedAttributes();
      boolean that_present_userSelectedAttributes = true && that.isSetUserSelectedAttributes();
      if (this_present_userSelectedAttributes || that_present_userSelectedAttributes) {
        if (!(this_present_userSelectedAttributes && that_present_userSelectedAttributes))
          return false;
        if (!this.userSelectedAttributes.equals(that.userSelectedAttributes))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCatalogId()) ? 131071 : 524287);
      if (isSetCatalogId())
        hashCode = hashCode * 8191 + catalogId.hashCode();

      hashCode = hashCode * 8191 + ((isSetUserSelectedAttributes()) ? 131071 : 524287);
      if (isSetUserSelectedAttributes())
        hashCode = hashCode * 8191 + userSelectedAttributes.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getPropertyDetails_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCatalogId()).compareTo(other.isSetCatalogId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCatalogId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalogId, other.catalogId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUserSelectedAttributes()).compareTo(other.isSetUserSelectedAttributes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserSelectedAttributes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userSelectedAttributes, other.userSelectedAttributes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getPropertyDetails_args(");
      boolean first = true;

      sb.append("catalogId:");
      if (this.catalogId == null) {
        sb.append("null");
      } else {
        sb.append(this.catalogId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userSelectedAttributes:");
      if (this.userSelectedAttributes == null) {
        sb.append("null");
      } else {
        sb.append(this.userSelectedAttributes);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userSelectedAttributes != null) {
        userSelectedAttributes.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPropertyDetails_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPropertyDetails_argsStandardScheme getScheme() {
        return new getPropertyDetails_argsStandardScheme();
      }
    }

    private static class getPropertyDetails_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPropertyDetails_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPropertyDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CATALOG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.catalogId = iprot.readString();
                struct.setCatalogIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_SELECTED_ATTRIBUTES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userSelectedAttributes = new TPropertySearchAndFilterAttributes();
                struct.userSelectedAttributes.read(iprot);
                struct.setUserSelectedAttributesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPropertyDetails_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.catalogId != null) {
          oprot.writeFieldBegin(CATALOG_ID_FIELD_DESC);
          oprot.writeString(struct.catalogId);
          oprot.writeFieldEnd();
        }
        if (struct.userSelectedAttributes != null) {
          oprot.writeFieldBegin(USER_SELECTED_ATTRIBUTES_FIELD_DESC);
          struct.userSelectedAttributes.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPropertyDetails_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPropertyDetails_argsTupleScheme getScheme() {
        return new getPropertyDetails_argsTupleScheme();
      }
    }

    private static class getPropertyDetails_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPropertyDetails_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPropertyDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCatalogId()) {
          optionals.set(0);
        }
        if (struct.isSetUserSelectedAttributes()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCatalogId()) {
          oprot.writeString(struct.catalogId);
        }
        if (struct.isSetUserSelectedAttributes()) {
          struct.userSelectedAttributes.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPropertyDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.catalogId = iprot.readString();
          struct.setCatalogIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userSelectedAttributes = new TPropertySearchAndFilterAttributes();
          struct.userSelectedAttributes.read(iprot);
          struct.setUserSelectedAttributesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getPropertyDetails_result implements org.apache.thrift.TBase<getPropertyDetails_result, getPropertyDetails_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPropertyDetails_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPropertyDetails_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPropertyDetails_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPropertyDetails_resultTupleSchemeFactory();

    private TPropertyDetailedResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPropertyDetailedResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPropertyDetails_result.class, metaDataMap);
    }

    public getPropertyDetails_result() {
    }

    public getPropertyDetails_result(
      TPropertyDetailedResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPropertyDetails_result(getPropertyDetails_result other) {
      if (other.isSetSuccess()) {
        this.success = new TPropertyDetailedResponse(other.success);
      }
    }

    public getPropertyDetails_result deepCopy() {
      return new getPropertyDetails_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TPropertyDetailedResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TPropertyDetailedResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TPropertyDetailedResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getPropertyDetails_result)
        return this.equals((getPropertyDetails_result)that);
      return false;
    }

    public boolean equals(getPropertyDetails_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getPropertyDetails_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getPropertyDetails_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPropertyDetails_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPropertyDetails_resultStandardScheme getScheme() {
        return new getPropertyDetails_resultStandardScheme();
      }
    }

    private static class getPropertyDetails_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPropertyDetails_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPropertyDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TPropertyDetailedResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPropertyDetails_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPropertyDetails_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPropertyDetails_resultTupleScheme getScheme() {
        return new getPropertyDetails_resultTupleScheme();
      }
    }

    private static class getPropertyDetails_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPropertyDetails_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPropertyDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPropertyDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TPropertyDetailedResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getPropertyListingWithFewDetails_args implements org.apache.thrift.TBase<getPropertyListingWithFewDetails_args, getPropertyListingWithFewDetails_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPropertyListingWithFewDetails_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPropertyListingWithFewDetails_args");

    private static final org.apache.thrift.protocol.TField CATALOG_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("catalogIds", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField USER_SELECTED_ATTRIBUTES_FIELD_DESC = new org.apache.thrift.protocol.TField("userSelectedAttributes", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPropertyListingWithFewDetails_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPropertyListingWithFewDetails_argsTupleSchemeFactory();

    private java.util.List<java.lang.String> catalogIds; // required
    private TPropertySearchAndFilterAttributes userSelectedAttributes; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CATALOG_IDS((short)1, "catalogIds"),
      USER_SELECTED_ATTRIBUTES((short)2, "userSelectedAttributes");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CATALOG_IDS
            return CATALOG_IDS;
          case 2: // USER_SELECTED_ATTRIBUTES
            return USER_SELECTED_ATTRIBUTES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CATALOG_IDS, new org.apache.thrift.meta_data.FieldMetaData("catalogIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.USER_SELECTED_ATTRIBUTES, new org.apache.thrift.meta_data.FieldMetaData("userSelectedAttributes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPropertySearchAndFilterAttributes.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPropertyListingWithFewDetails_args.class, metaDataMap);
    }

    public getPropertyListingWithFewDetails_args() {
    }

    public getPropertyListingWithFewDetails_args(
      java.util.List<java.lang.String> catalogIds,
      TPropertySearchAndFilterAttributes userSelectedAttributes)
    {
      this();
      this.catalogIds = catalogIds;
      this.userSelectedAttributes = userSelectedAttributes;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPropertyListingWithFewDetails_args(getPropertyListingWithFewDetails_args other) {
      if (other.isSetCatalogIds()) {
        java.util.List<java.lang.String> __this__catalogIds = new java.util.ArrayList<java.lang.String>(other.catalogIds);
        this.catalogIds = __this__catalogIds;
      }
      if (other.isSetUserSelectedAttributes()) {
        this.userSelectedAttributes = new TPropertySearchAndFilterAttributes(other.userSelectedAttributes);
      }
    }

    public getPropertyListingWithFewDetails_args deepCopy() {
      return new getPropertyListingWithFewDetails_args(this);
    }

    @Override
    public void clear() {
      this.catalogIds = null;
      this.userSelectedAttributes = null;
    }

    public int getCatalogIdsSize() {
      return (this.catalogIds == null) ? 0 : this.catalogIds.size();
    }

    public java.util.Iterator<java.lang.String> getCatalogIdsIterator() {
      return (this.catalogIds == null) ? null : this.catalogIds.iterator();
    }

    public void addToCatalogIds(java.lang.String elem) {
      if (this.catalogIds == null) {
        this.catalogIds = new java.util.ArrayList<java.lang.String>();
      }
      this.catalogIds.add(elem);
    }

    public java.util.List<java.lang.String> getCatalogIds() {
      return this.catalogIds;
    }

    public void setCatalogIds(java.util.List<java.lang.String> catalogIds) {
      this.catalogIds = catalogIds;
    }

    public void unsetCatalogIds() {
      this.catalogIds = null;
    }

    /** Returns true if field catalogIds is set (has been assigned a value) and false otherwise */
    public boolean isSetCatalogIds() {
      return this.catalogIds != null;
    }

    public void setCatalogIdsIsSet(boolean value) {
      if (!value) {
        this.catalogIds = null;
      }
    }

    public TPropertySearchAndFilterAttributes getUserSelectedAttributes() {
      return this.userSelectedAttributes;
    }

    public void setUserSelectedAttributes(TPropertySearchAndFilterAttributes userSelectedAttributes) {
      this.userSelectedAttributes = userSelectedAttributes;
    }

    public void unsetUserSelectedAttributes() {
      this.userSelectedAttributes = null;
    }

    /** Returns true if field userSelectedAttributes is set (has been assigned a value) and false otherwise */
    public boolean isSetUserSelectedAttributes() {
      return this.userSelectedAttributes != null;
    }

    public void setUserSelectedAttributesIsSet(boolean value) {
      if (!value) {
        this.userSelectedAttributes = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CATALOG_IDS:
        if (value == null) {
          unsetCatalogIds();
        } else {
          setCatalogIds((java.util.List<java.lang.String>)value);
        }
        break;

      case USER_SELECTED_ATTRIBUTES:
        if (value == null) {
          unsetUserSelectedAttributes();
        } else {
          setUserSelectedAttributes((TPropertySearchAndFilterAttributes)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CATALOG_IDS:
        return getCatalogIds();

      case USER_SELECTED_ATTRIBUTES:
        return getUserSelectedAttributes();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CATALOG_IDS:
        return isSetCatalogIds();
      case USER_SELECTED_ATTRIBUTES:
        return isSetUserSelectedAttributes();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getPropertyListingWithFewDetails_args)
        return this.equals((getPropertyListingWithFewDetails_args)that);
      return false;
    }

    public boolean equals(getPropertyListingWithFewDetails_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_catalogIds = true && this.isSetCatalogIds();
      boolean that_present_catalogIds = true && that.isSetCatalogIds();
      if (this_present_catalogIds || that_present_catalogIds) {
        if (!(this_present_catalogIds && that_present_catalogIds))
          return false;
        if (!this.catalogIds.equals(that.catalogIds))
          return false;
      }

      boolean this_present_userSelectedAttributes = true && this.isSetUserSelectedAttributes();
      boolean that_present_userSelectedAttributes = true && that.isSetUserSelectedAttributes();
      if (this_present_userSelectedAttributes || that_present_userSelectedAttributes) {
        if (!(this_present_userSelectedAttributes && that_present_userSelectedAttributes))
          return false;
        if (!this.userSelectedAttributes.equals(that.userSelectedAttributes))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCatalogIds()) ? 131071 : 524287);
      if (isSetCatalogIds())
        hashCode = hashCode * 8191 + catalogIds.hashCode();

      hashCode = hashCode * 8191 + ((isSetUserSelectedAttributes()) ? 131071 : 524287);
      if (isSetUserSelectedAttributes())
        hashCode = hashCode * 8191 + userSelectedAttributes.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getPropertyListingWithFewDetails_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCatalogIds()).compareTo(other.isSetCatalogIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCatalogIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalogIds, other.catalogIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUserSelectedAttributes()).compareTo(other.isSetUserSelectedAttributes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserSelectedAttributes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userSelectedAttributes, other.userSelectedAttributes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getPropertyListingWithFewDetails_args(");
      boolean first = true;

      sb.append("catalogIds:");
      if (this.catalogIds == null) {
        sb.append("null");
      } else {
        sb.append(this.catalogIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userSelectedAttributes:");
      if (this.userSelectedAttributes == null) {
        sb.append("null");
      } else {
        sb.append(this.userSelectedAttributes);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userSelectedAttributes != null) {
        userSelectedAttributes.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPropertyListingWithFewDetails_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPropertyListingWithFewDetails_argsStandardScheme getScheme() {
        return new getPropertyListingWithFewDetails_argsStandardScheme();
      }
    }

    private static class getPropertyListingWithFewDetails_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPropertyListingWithFewDetails_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPropertyListingWithFewDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CATALOG_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list120 = iprot.readListBegin();
                  struct.catalogIds = new java.util.ArrayList<java.lang.String>(_list120.size);
                  java.lang.String _elem121;
                  for (int _i122 = 0; _i122 < _list120.size; ++_i122)
                  {
                    _elem121 = iprot.readString();
                    struct.catalogIds.add(_elem121);
                  }
                  iprot.readListEnd();
                }
                struct.setCatalogIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_SELECTED_ATTRIBUTES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userSelectedAttributes = new TPropertySearchAndFilterAttributes();
                struct.userSelectedAttributes.read(iprot);
                struct.setUserSelectedAttributesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPropertyListingWithFewDetails_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.catalogIds != null) {
          oprot.writeFieldBegin(CATALOG_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.catalogIds.size()));
            for (java.lang.String _iter123 : struct.catalogIds)
            {
              oprot.writeString(_iter123);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.userSelectedAttributes != null) {
          oprot.writeFieldBegin(USER_SELECTED_ATTRIBUTES_FIELD_DESC);
          struct.userSelectedAttributes.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPropertyListingWithFewDetails_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPropertyListingWithFewDetails_argsTupleScheme getScheme() {
        return new getPropertyListingWithFewDetails_argsTupleScheme();
      }
    }

    private static class getPropertyListingWithFewDetails_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPropertyListingWithFewDetails_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPropertyListingWithFewDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCatalogIds()) {
          optionals.set(0);
        }
        if (struct.isSetUserSelectedAttributes()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCatalogIds()) {
          {
            oprot.writeI32(struct.catalogIds.size());
            for (java.lang.String _iter124 : struct.catalogIds)
            {
              oprot.writeString(_iter124);
            }
          }
        }
        if (struct.isSetUserSelectedAttributes()) {
          struct.userSelectedAttributes.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPropertyListingWithFewDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list125 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.catalogIds = new java.util.ArrayList<java.lang.String>(_list125.size);
            java.lang.String _elem126;
            for (int _i127 = 0; _i127 < _list125.size; ++_i127)
            {
              _elem126 = iprot.readString();
              struct.catalogIds.add(_elem126);
            }
          }
          struct.setCatalogIdsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userSelectedAttributes = new TPropertySearchAndFilterAttributes();
          struct.userSelectedAttributes.read(iprot);
          struct.setUserSelectedAttributesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getPropertyListingWithFewDetails_result implements org.apache.thrift.TBase<getPropertyListingWithFewDetails_result, getPropertyListingWithFewDetails_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPropertyListingWithFewDetails_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPropertyListingWithFewDetails_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPropertyListingWithFewDetails_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPropertyListingWithFewDetails_resultTupleSchemeFactory();

    private java.util.List<TPropertySmallResponse> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPropertySmallResponse.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPropertyListingWithFewDetails_result.class, metaDataMap);
    }

    public getPropertyListingWithFewDetails_result() {
    }

    public getPropertyListingWithFewDetails_result(
      java.util.List<TPropertySmallResponse> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPropertyListingWithFewDetails_result(getPropertyListingWithFewDetails_result other) {
      if (other.isSetSuccess()) {
        java.util.List<TPropertySmallResponse> __this__success = new java.util.ArrayList<TPropertySmallResponse>(other.success.size());
        for (TPropertySmallResponse other_element : other.success) {
          __this__success.add(new TPropertySmallResponse(other_element));
        }
        this.success = __this__success;
      }
    }

    public getPropertyListingWithFewDetails_result deepCopy() {
      return new getPropertyListingWithFewDetails_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TPropertySmallResponse> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TPropertySmallResponse elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<TPropertySmallResponse>();
      }
      this.success.add(elem);
    }

    public java.util.List<TPropertySmallResponse> getSuccess() {
      return this.success;
    }

    public void setSuccess(java.util.List<TPropertySmallResponse> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<TPropertySmallResponse>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getPropertyListingWithFewDetails_result)
        return this.equals((getPropertyListingWithFewDetails_result)that);
      return false;
    }

    public boolean equals(getPropertyListingWithFewDetails_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getPropertyListingWithFewDetails_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getPropertyListingWithFewDetails_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPropertyListingWithFewDetails_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPropertyListingWithFewDetails_resultStandardScheme getScheme() {
        return new getPropertyListingWithFewDetails_resultStandardScheme();
      }
    }

    private static class getPropertyListingWithFewDetails_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPropertyListingWithFewDetails_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPropertyListingWithFewDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list128 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<TPropertySmallResponse>(_list128.size);
                  TPropertySmallResponse _elem129;
                  for (int _i130 = 0; _i130 < _list128.size; ++_i130)
                  {
                    _elem129 = new TPropertySmallResponse();
                    _elem129.read(iprot);
                    struct.success.add(_elem129);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPropertyListingWithFewDetails_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TPropertySmallResponse _iter131 : struct.success)
            {
              _iter131.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPropertyListingWithFewDetails_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPropertyListingWithFewDetails_resultTupleScheme getScheme() {
        return new getPropertyListingWithFewDetails_resultTupleScheme();
      }
    }

    private static class getPropertyListingWithFewDetails_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPropertyListingWithFewDetails_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPropertyListingWithFewDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TPropertySmallResponse _iter132 : struct.success)
            {
              _iter132.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPropertyListingWithFewDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list133 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<TPropertySmallResponse>(_list133.size);
            TPropertySmallResponse _elem134;
            for (int _i135 = 0; _i135 < _list133.size; ++_i135)
            {
              _elem134 = new TPropertySmallResponse();
              _elem134.read(iprot);
              struct.success.add(_elem134);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getPropertyListingWithStandardDetails_args implements org.apache.thrift.TBase<getPropertyListingWithStandardDetails_args, getPropertyListingWithStandardDetails_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPropertyListingWithStandardDetails_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPropertyListingWithStandardDetails_args");

    private static final org.apache.thrift.protocol.TField CATALOG_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("catalogIds", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField USER_SELECTED_ATTRIBUTES_FIELD_DESC = new org.apache.thrift.protocol.TField("userSelectedAttributes", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPropertyListingWithStandardDetails_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPropertyListingWithStandardDetails_argsTupleSchemeFactory();

    private java.util.List<java.lang.String> catalogIds; // required
    private TPropertySearchAndFilterAttributes userSelectedAttributes; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CATALOG_IDS((short)1, "catalogIds"),
      USER_SELECTED_ATTRIBUTES((short)2, "userSelectedAttributes");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CATALOG_IDS
            return CATALOG_IDS;
          case 2: // USER_SELECTED_ATTRIBUTES
            return USER_SELECTED_ATTRIBUTES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CATALOG_IDS, new org.apache.thrift.meta_data.FieldMetaData("catalogIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.USER_SELECTED_ATTRIBUTES, new org.apache.thrift.meta_data.FieldMetaData("userSelectedAttributes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPropertySearchAndFilterAttributes.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPropertyListingWithStandardDetails_args.class, metaDataMap);
    }

    public getPropertyListingWithStandardDetails_args() {
    }

    public getPropertyListingWithStandardDetails_args(
      java.util.List<java.lang.String> catalogIds,
      TPropertySearchAndFilterAttributes userSelectedAttributes)
    {
      this();
      this.catalogIds = catalogIds;
      this.userSelectedAttributes = userSelectedAttributes;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPropertyListingWithStandardDetails_args(getPropertyListingWithStandardDetails_args other) {
      if (other.isSetCatalogIds()) {
        java.util.List<java.lang.String> __this__catalogIds = new java.util.ArrayList<java.lang.String>(other.catalogIds);
        this.catalogIds = __this__catalogIds;
      }
      if (other.isSetUserSelectedAttributes()) {
        this.userSelectedAttributes = new TPropertySearchAndFilterAttributes(other.userSelectedAttributes);
      }
    }

    public getPropertyListingWithStandardDetails_args deepCopy() {
      return new getPropertyListingWithStandardDetails_args(this);
    }

    @Override
    public void clear() {
      this.catalogIds = null;
      this.userSelectedAttributes = null;
    }

    public int getCatalogIdsSize() {
      return (this.catalogIds == null) ? 0 : this.catalogIds.size();
    }

    public java.util.Iterator<java.lang.String> getCatalogIdsIterator() {
      return (this.catalogIds == null) ? null : this.catalogIds.iterator();
    }

    public void addToCatalogIds(java.lang.String elem) {
      if (this.catalogIds == null) {
        this.catalogIds = new java.util.ArrayList<java.lang.String>();
      }
      this.catalogIds.add(elem);
    }

    public java.util.List<java.lang.String> getCatalogIds() {
      return this.catalogIds;
    }

    public void setCatalogIds(java.util.List<java.lang.String> catalogIds) {
      this.catalogIds = catalogIds;
    }

    public void unsetCatalogIds() {
      this.catalogIds = null;
    }

    /** Returns true if field catalogIds is set (has been assigned a value) and false otherwise */
    public boolean isSetCatalogIds() {
      return this.catalogIds != null;
    }

    public void setCatalogIdsIsSet(boolean value) {
      if (!value) {
        this.catalogIds = null;
      }
    }

    public TPropertySearchAndFilterAttributes getUserSelectedAttributes() {
      return this.userSelectedAttributes;
    }

    public void setUserSelectedAttributes(TPropertySearchAndFilterAttributes userSelectedAttributes) {
      this.userSelectedAttributes = userSelectedAttributes;
    }

    public void unsetUserSelectedAttributes() {
      this.userSelectedAttributes = null;
    }

    /** Returns true if field userSelectedAttributes is set (has been assigned a value) and false otherwise */
    public boolean isSetUserSelectedAttributes() {
      return this.userSelectedAttributes != null;
    }

    public void setUserSelectedAttributesIsSet(boolean value) {
      if (!value) {
        this.userSelectedAttributes = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CATALOG_IDS:
        if (value == null) {
          unsetCatalogIds();
        } else {
          setCatalogIds((java.util.List<java.lang.String>)value);
        }
        break;

      case USER_SELECTED_ATTRIBUTES:
        if (value == null) {
          unsetUserSelectedAttributes();
        } else {
          setUserSelectedAttributes((TPropertySearchAndFilterAttributes)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CATALOG_IDS:
        return getCatalogIds();

      case USER_SELECTED_ATTRIBUTES:
        return getUserSelectedAttributes();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CATALOG_IDS:
        return isSetCatalogIds();
      case USER_SELECTED_ATTRIBUTES:
        return isSetUserSelectedAttributes();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getPropertyListingWithStandardDetails_args)
        return this.equals((getPropertyListingWithStandardDetails_args)that);
      return false;
    }

    public boolean equals(getPropertyListingWithStandardDetails_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_catalogIds = true && this.isSetCatalogIds();
      boolean that_present_catalogIds = true && that.isSetCatalogIds();
      if (this_present_catalogIds || that_present_catalogIds) {
        if (!(this_present_catalogIds && that_present_catalogIds))
          return false;
        if (!this.catalogIds.equals(that.catalogIds))
          return false;
      }

      boolean this_present_userSelectedAttributes = true && this.isSetUserSelectedAttributes();
      boolean that_present_userSelectedAttributes = true && that.isSetUserSelectedAttributes();
      if (this_present_userSelectedAttributes || that_present_userSelectedAttributes) {
        if (!(this_present_userSelectedAttributes && that_present_userSelectedAttributes))
          return false;
        if (!this.userSelectedAttributes.equals(that.userSelectedAttributes))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCatalogIds()) ? 131071 : 524287);
      if (isSetCatalogIds())
        hashCode = hashCode * 8191 + catalogIds.hashCode();

      hashCode = hashCode * 8191 + ((isSetUserSelectedAttributes()) ? 131071 : 524287);
      if (isSetUserSelectedAttributes())
        hashCode = hashCode * 8191 + userSelectedAttributes.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getPropertyListingWithStandardDetails_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCatalogIds()).compareTo(other.isSetCatalogIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCatalogIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalogIds, other.catalogIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUserSelectedAttributes()).compareTo(other.isSetUserSelectedAttributes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserSelectedAttributes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userSelectedAttributes, other.userSelectedAttributes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getPropertyListingWithStandardDetails_args(");
      boolean first = true;

      sb.append("catalogIds:");
      if (this.catalogIds == null) {
        sb.append("null");
      } else {
        sb.append(this.catalogIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userSelectedAttributes:");
      if (this.userSelectedAttributes == null) {
        sb.append("null");
      } else {
        sb.append(this.userSelectedAttributes);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userSelectedAttributes != null) {
        userSelectedAttributes.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPropertyListingWithStandardDetails_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPropertyListingWithStandardDetails_argsStandardScheme getScheme() {
        return new getPropertyListingWithStandardDetails_argsStandardScheme();
      }
    }

    private static class getPropertyListingWithStandardDetails_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPropertyListingWithStandardDetails_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPropertyListingWithStandardDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CATALOG_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list136 = iprot.readListBegin();
                  struct.catalogIds = new java.util.ArrayList<java.lang.String>(_list136.size);
                  java.lang.String _elem137;
                  for (int _i138 = 0; _i138 < _list136.size; ++_i138)
                  {
                    _elem137 = iprot.readString();
                    struct.catalogIds.add(_elem137);
                  }
                  iprot.readListEnd();
                }
                struct.setCatalogIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_SELECTED_ATTRIBUTES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userSelectedAttributes = new TPropertySearchAndFilterAttributes();
                struct.userSelectedAttributes.read(iprot);
                struct.setUserSelectedAttributesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPropertyListingWithStandardDetails_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.catalogIds != null) {
          oprot.writeFieldBegin(CATALOG_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.catalogIds.size()));
            for (java.lang.String _iter139 : struct.catalogIds)
            {
              oprot.writeString(_iter139);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.userSelectedAttributes != null) {
          oprot.writeFieldBegin(USER_SELECTED_ATTRIBUTES_FIELD_DESC);
          struct.userSelectedAttributes.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPropertyListingWithStandardDetails_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPropertyListingWithStandardDetails_argsTupleScheme getScheme() {
        return new getPropertyListingWithStandardDetails_argsTupleScheme();
      }
    }

    private static class getPropertyListingWithStandardDetails_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPropertyListingWithStandardDetails_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPropertyListingWithStandardDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCatalogIds()) {
          optionals.set(0);
        }
        if (struct.isSetUserSelectedAttributes()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCatalogIds()) {
          {
            oprot.writeI32(struct.catalogIds.size());
            for (java.lang.String _iter140 : struct.catalogIds)
            {
              oprot.writeString(_iter140);
            }
          }
        }
        if (struct.isSetUserSelectedAttributes()) {
          struct.userSelectedAttributes.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPropertyListingWithStandardDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list141 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.catalogIds = new java.util.ArrayList<java.lang.String>(_list141.size);
            java.lang.String _elem142;
            for (int _i143 = 0; _i143 < _list141.size; ++_i143)
            {
              _elem142 = iprot.readString();
              struct.catalogIds.add(_elem142);
            }
          }
          struct.setCatalogIdsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userSelectedAttributes = new TPropertySearchAndFilterAttributes();
          struct.userSelectedAttributes.read(iprot);
          struct.setUserSelectedAttributesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getPropertyListingWithStandardDetails_result implements org.apache.thrift.TBase<getPropertyListingWithStandardDetails_result, getPropertyListingWithStandardDetails_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPropertyListingWithStandardDetails_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPropertyListingWithStandardDetails_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPropertyListingWithStandardDetails_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPropertyListingWithStandardDetails_resultTupleSchemeFactory();

    private java.util.List<TPropertyStandardResponse> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPropertyStandardResponse.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPropertyListingWithStandardDetails_result.class, metaDataMap);
    }

    public getPropertyListingWithStandardDetails_result() {
    }

    public getPropertyListingWithStandardDetails_result(
      java.util.List<TPropertyStandardResponse> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPropertyListingWithStandardDetails_result(getPropertyListingWithStandardDetails_result other) {
      if (other.isSetSuccess()) {
        java.util.List<TPropertyStandardResponse> __this__success = new java.util.ArrayList<TPropertyStandardResponse>(other.success.size());
        for (TPropertyStandardResponse other_element : other.success) {
          __this__success.add(new TPropertyStandardResponse(other_element));
        }
        this.success = __this__success;
      }
    }

    public getPropertyListingWithStandardDetails_result deepCopy() {
      return new getPropertyListingWithStandardDetails_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TPropertyStandardResponse> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TPropertyStandardResponse elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<TPropertyStandardResponse>();
      }
      this.success.add(elem);
    }

    public java.util.List<TPropertyStandardResponse> getSuccess() {
      return this.success;
    }

    public void setSuccess(java.util.List<TPropertyStandardResponse> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<TPropertyStandardResponse>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getPropertyListingWithStandardDetails_result)
        return this.equals((getPropertyListingWithStandardDetails_result)that);
      return false;
    }

    public boolean equals(getPropertyListingWithStandardDetails_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getPropertyListingWithStandardDetails_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getPropertyListingWithStandardDetails_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPropertyListingWithStandardDetails_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPropertyListingWithStandardDetails_resultStandardScheme getScheme() {
        return new getPropertyListingWithStandardDetails_resultStandardScheme();
      }
    }

    private static class getPropertyListingWithStandardDetails_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPropertyListingWithStandardDetails_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPropertyListingWithStandardDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list144 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<TPropertyStandardResponse>(_list144.size);
                  TPropertyStandardResponse _elem145;
                  for (int _i146 = 0; _i146 < _list144.size; ++_i146)
                  {
                    _elem145 = new TPropertyStandardResponse();
                    _elem145.read(iprot);
                    struct.success.add(_elem145);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPropertyListingWithStandardDetails_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TPropertyStandardResponse _iter147 : struct.success)
            {
              _iter147.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPropertyListingWithStandardDetails_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPropertyListingWithStandardDetails_resultTupleScheme getScheme() {
        return new getPropertyListingWithStandardDetails_resultTupleScheme();
      }
    }

    private static class getPropertyListingWithStandardDetails_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPropertyListingWithStandardDetails_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPropertyListingWithStandardDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TPropertyStandardResponse _iter148 : struct.success)
            {
              _iter148.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPropertyListingWithStandardDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list149 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<TPropertyStandardResponse>(_list149.size);
            TPropertyStandardResponse _elem150;
            for (int _i151 = 0; _i151 < _list149.size; ++_i151)
            {
              _elem150 = new TPropertyStandardResponse();
              _elem150.read(iprot);
              struct.success.add(_elem150);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
