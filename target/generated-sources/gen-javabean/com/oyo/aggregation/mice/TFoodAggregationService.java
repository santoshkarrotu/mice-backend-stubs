/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.oyo.aggregation.mice;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-03-20")
public class TFoodAggregationService {

  public interface Iface {

    public TFoodDetailedResponse getFoodDetails(java.lang.String catalogId, TFoodSearchAndFilterAttributes foodAttributes, java.lang.String locale) throws org.apache.thrift.TException;

    public java.util.List<TFoodDetailedResponse> listFoodDetails(java.util.List<java.lang.String> catalogIds, TFoodSearchAndFilterAttributes foodAttributes, java.lang.String locale) throws org.apache.thrift.TException;

    public java.util.List<TFoodPackage> listFoodPackages(java.util.List<java.lang.String> catalogIds, java.lang.String locale) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getFoodDetails(java.lang.String catalogId, TFoodSearchAndFilterAttributes foodAttributes, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TFoodDetailedResponse> resultHandler) throws org.apache.thrift.TException;

    public void listFoodDetails(java.util.List<java.lang.String> catalogIds, TFoodSearchAndFilterAttributes foodAttributes, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TFoodDetailedResponse>> resultHandler) throws org.apache.thrift.TException;

    public void listFoodPackages(java.util.List<java.lang.String> catalogIds, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TFoodPackage>> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public TFoodDetailedResponse getFoodDetails(java.lang.String catalogId, TFoodSearchAndFilterAttributes foodAttributes, java.lang.String locale) throws org.apache.thrift.TException
    {
      send_getFoodDetails(catalogId, foodAttributes, locale);
      return recv_getFoodDetails();
    }

    public void send_getFoodDetails(java.lang.String catalogId, TFoodSearchAndFilterAttributes foodAttributes, java.lang.String locale) throws org.apache.thrift.TException
    {
      getFoodDetails_args args = new getFoodDetails_args();
      args.setCatalogId(catalogId);
      args.setFoodAttributes(foodAttributes);
      args.setLocale(locale);
      sendBase("getFoodDetails", args);
    }

    public TFoodDetailedResponse recv_getFoodDetails() throws org.apache.thrift.TException
    {
      getFoodDetails_result result = new getFoodDetails_result();
      receiveBase(result, "getFoodDetails");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFoodDetails failed: unknown result");
    }

    public java.util.List<TFoodDetailedResponse> listFoodDetails(java.util.List<java.lang.String> catalogIds, TFoodSearchAndFilterAttributes foodAttributes, java.lang.String locale) throws org.apache.thrift.TException
    {
      send_listFoodDetails(catalogIds, foodAttributes, locale);
      return recv_listFoodDetails();
    }

    public void send_listFoodDetails(java.util.List<java.lang.String> catalogIds, TFoodSearchAndFilterAttributes foodAttributes, java.lang.String locale) throws org.apache.thrift.TException
    {
      listFoodDetails_args args = new listFoodDetails_args();
      args.setCatalogIds(catalogIds);
      args.setFoodAttributes(foodAttributes);
      args.setLocale(locale);
      sendBase("listFoodDetails", args);
    }

    public java.util.List<TFoodDetailedResponse> recv_listFoodDetails() throws org.apache.thrift.TException
    {
      listFoodDetails_result result = new listFoodDetails_result();
      receiveBase(result, "listFoodDetails");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listFoodDetails failed: unknown result");
    }

    public java.util.List<TFoodPackage> listFoodPackages(java.util.List<java.lang.String> catalogIds, java.lang.String locale) throws org.apache.thrift.TException
    {
      send_listFoodPackages(catalogIds, locale);
      return recv_listFoodPackages();
    }

    public void send_listFoodPackages(java.util.List<java.lang.String> catalogIds, java.lang.String locale) throws org.apache.thrift.TException
    {
      listFoodPackages_args args = new listFoodPackages_args();
      args.setCatalogIds(catalogIds);
      args.setLocale(locale);
      sendBase("listFoodPackages", args);
    }

    public java.util.List<TFoodPackage> recv_listFoodPackages() throws org.apache.thrift.TException
    {
      listFoodPackages_result result = new listFoodPackages_result();
      receiveBase(result, "listFoodPackages");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listFoodPackages failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getFoodDetails(java.lang.String catalogId, TFoodSearchAndFilterAttributes foodAttributes, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TFoodDetailedResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFoodDetails_call method_call = new getFoodDetails_call(catalogId, foodAttributes, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFoodDetails_call extends org.apache.thrift.async.TAsyncMethodCall<TFoodDetailedResponse> {
      private java.lang.String catalogId;
      private TFoodSearchAndFilterAttributes foodAttributes;
      private java.lang.String locale;
      public getFoodDetails_call(java.lang.String catalogId, TFoodSearchAndFilterAttributes foodAttributes, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TFoodDetailedResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.catalogId = catalogId;
        this.foodAttributes = foodAttributes;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFoodDetails", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFoodDetails_args args = new getFoodDetails_args();
        args.setCatalogId(catalogId);
        args.setFoodAttributes(foodAttributes);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TFoodDetailedResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFoodDetails();
      }
    }

    public void listFoodDetails(java.util.List<java.lang.String> catalogIds, TFoodSearchAndFilterAttributes foodAttributes, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TFoodDetailedResponse>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listFoodDetails_call method_call = new listFoodDetails_call(catalogIds, foodAttributes, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listFoodDetails_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<TFoodDetailedResponse>> {
      private java.util.List<java.lang.String> catalogIds;
      private TFoodSearchAndFilterAttributes foodAttributes;
      private java.lang.String locale;
      public listFoodDetails_call(java.util.List<java.lang.String> catalogIds, TFoodSearchAndFilterAttributes foodAttributes, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TFoodDetailedResponse>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.catalogIds = catalogIds;
        this.foodAttributes = foodAttributes;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listFoodDetails", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listFoodDetails_args args = new listFoodDetails_args();
        args.setCatalogIds(catalogIds);
        args.setFoodAttributes(foodAttributes);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<TFoodDetailedResponse> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listFoodDetails();
      }
    }

    public void listFoodPackages(java.util.List<java.lang.String> catalogIds, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TFoodPackage>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listFoodPackages_call method_call = new listFoodPackages_call(catalogIds, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listFoodPackages_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<TFoodPackage>> {
      private java.util.List<java.lang.String> catalogIds;
      private java.lang.String locale;
      public listFoodPackages_call(java.util.List<java.lang.String> catalogIds, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TFoodPackage>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.catalogIds = catalogIds;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listFoodPackages", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listFoodPackages_args args = new listFoodPackages_args();
        args.setCatalogIds(catalogIds);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<TFoodPackage> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listFoodPackages();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getFoodDetails", new getFoodDetails());
      processMap.put("listFoodDetails", new listFoodDetails());
      processMap.put("listFoodPackages", new listFoodPackages());
      return processMap;
    }

    public static class getFoodDetails<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFoodDetails_args> {
      public getFoodDetails() {
        super("getFoodDetails");
      }

      public getFoodDetails_args getEmptyArgsInstance() {
        return new getFoodDetails_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFoodDetails_result getResult(I iface, getFoodDetails_args args) throws org.apache.thrift.TException {
        getFoodDetails_result result = new getFoodDetails_result();
        result.success = iface.getFoodDetails(args.catalogId, args.foodAttributes, args.locale);
        return result;
      }
    }

    public static class listFoodDetails<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listFoodDetails_args> {
      public listFoodDetails() {
        super("listFoodDetails");
      }

      public listFoodDetails_args getEmptyArgsInstance() {
        return new listFoodDetails_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listFoodDetails_result getResult(I iface, listFoodDetails_args args) throws org.apache.thrift.TException {
        listFoodDetails_result result = new listFoodDetails_result();
        result.success = iface.listFoodDetails(args.catalogIds, args.foodAttributes, args.locale);
        return result;
      }
    }

    public static class listFoodPackages<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listFoodPackages_args> {
      public listFoodPackages() {
        super("listFoodPackages");
      }

      public listFoodPackages_args getEmptyArgsInstance() {
        return new listFoodPackages_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listFoodPackages_result getResult(I iface, listFoodPackages_args args) throws org.apache.thrift.TException {
        listFoodPackages_result result = new listFoodPackages_result();
        result.success = iface.listFoodPackages(args.catalogIds, args.locale);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getFoodDetails", new getFoodDetails());
      processMap.put("listFoodDetails", new listFoodDetails());
      processMap.put("listFoodPackages", new listFoodPackages());
      return processMap;
    }

    public static class getFoodDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFoodDetails_args, TFoodDetailedResponse> {
      public getFoodDetails() {
        super("getFoodDetails");
      }

      public getFoodDetails_args getEmptyArgsInstance() {
        return new getFoodDetails_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TFoodDetailedResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TFoodDetailedResponse>() { 
          public void onComplete(TFoodDetailedResponse o) {
            getFoodDetails_result result = new getFoodDetails_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getFoodDetails_result result = new getFoodDetails_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFoodDetails_args args, org.apache.thrift.async.AsyncMethodCallback<TFoodDetailedResponse> resultHandler) throws org.apache.thrift.TException {
        iface.getFoodDetails(args.catalogId, args.foodAttributes, args.locale,resultHandler);
      }
    }

    public static class listFoodDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listFoodDetails_args, java.util.List<TFoodDetailedResponse>> {
      public listFoodDetails() {
        super("listFoodDetails");
      }

      public listFoodDetails_args getEmptyArgsInstance() {
        return new listFoodDetails_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<TFoodDetailedResponse>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<TFoodDetailedResponse>>() { 
          public void onComplete(java.util.List<TFoodDetailedResponse> o) {
            listFoodDetails_result result = new listFoodDetails_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listFoodDetails_result result = new listFoodDetails_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listFoodDetails_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TFoodDetailedResponse>> resultHandler) throws org.apache.thrift.TException {
        iface.listFoodDetails(args.catalogIds, args.foodAttributes, args.locale,resultHandler);
      }
    }

    public static class listFoodPackages<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listFoodPackages_args, java.util.List<TFoodPackage>> {
      public listFoodPackages() {
        super("listFoodPackages");
      }

      public listFoodPackages_args getEmptyArgsInstance() {
        return new listFoodPackages_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<TFoodPackage>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<TFoodPackage>>() { 
          public void onComplete(java.util.List<TFoodPackage> o) {
            listFoodPackages_result result = new listFoodPackages_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listFoodPackages_result result = new listFoodPackages_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listFoodPackages_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TFoodPackage>> resultHandler) throws org.apache.thrift.TException {
        iface.listFoodPackages(args.catalogIds, args.locale,resultHandler);
      }
    }

  }

  public static class getFoodDetails_args implements org.apache.thrift.TBase<getFoodDetails_args, getFoodDetails_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFoodDetails_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFoodDetails_args");

    private static final org.apache.thrift.protocol.TField CATALOG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("catalogId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FOOD_ATTRIBUTES_FIELD_DESC = new org.apache.thrift.protocol.TField("foodAttributes", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getFoodDetails_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getFoodDetails_argsTupleSchemeFactory();

    private java.lang.String catalogId; // required
    private TFoodSearchAndFilterAttributes foodAttributes; // required
    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CATALOG_ID((short)1, "catalogId"),
      FOOD_ATTRIBUTES((short)2, "foodAttributes"),
      LOCALE((short)3, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CATALOG_ID
            return CATALOG_ID;
          case 2: // FOOD_ATTRIBUTES
            return FOOD_ATTRIBUTES;
          case 3: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CATALOG_ID, new org.apache.thrift.meta_data.FieldMetaData("catalogId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FOOD_ATTRIBUTES, new org.apache.thrift.meta_data.FieldMetaData("foodAttributes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TFoodSearchAndFilterAttributes.class)));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFoodDetails_args.class, metaDataMap);
    }

    public getFoodDetails_args() {
    }

    public getFoodDetails_args(
      java.lang.String catalogId,
      TFoodSearchAndFilterAttributes foodAttributes,
      java.lang.String locale)
    {
      this();
      this.catalogId = catalogId;
      this.foodAttributes = foodAttributes;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFoodDetails_args(getFoodDetails_args other) {
      if (other.isSetCatalogId()) {
        this.catalogId = other.catalogId;
      }
      if (other.isSetFoodAttributes()) {
        this.foodAttributes = new TFoodSearchAndFilterAttributes(other.foodAttributes);
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public getFoodDetails_args deepCopy() {
      return new getFoodDetails_args(this);
    }

    @Override
    public void clear() {
      this.catalogId = null;
      this.foodAttributes = null;
      this.locale = null;
    }

    public java.lang.String getCatalogId() {
      return this.catalogId;
    }

    public void setCatalogId(java.lang.String catalogId) {
      this.catalogId = catalogId;
    }

    public void unsetCatalogId() {
      this.catalogId = null;
    }

    /** Returns true if field catalogId is set (has been assigned a value) and false otherwise */
    public boolean isSetCatalogId() {
      return this.catalogId != null;
    }

    public void setCatalogIdIsSet(boolean value) {
      if (!value) {
        this.catalogId = null;
      }
    }

    public TFoodSearchAndFilterAttributes getFoodAttributes() {
      return this.foodAttributes;
    }

    public void setFoodAttributes(TFoodSearchAndFilterAttributes foodAttributes) {
      this.foodAttributes = foodAttributes;
    }

    public void unsetFoodAttributes() {
      this.foodAttributes = null;
    }

    /** Returns true if field foodAttributes is set (has been assigned a value) and false otherwise */
    public boolean isSetFoodAttributes() {
      return this.foodAttributes != null;
    }

    public void setFoodAttributesIsSet(boolean value) {
      if (!value) {
        this.foodAttributes = null;
      }
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CATALOG_ID:
        if (value == null) {
          unsetCatalogId();
        } else {
          setCatalogId((java.lang.String)value);
        }
        break;

      case FOOD_ATTRIBUTES:
        if (value == null) {
          unsetFoodAttributes();
        } else {
          setFoodAttributes((TFoodSearchAndFilterAttributes)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CATALOG_ID:
        return getCatalogId();

      case FOOD_ATTRIBUTES:
        return getFoodAttributes();

      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CATALOG_ID:
        return isSetCatalogId();
      case FOOD_ATTRIBUTES:
        return isSetFoodAttributes();
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getFoodDetails_args)
        return this.equals((getFoodDetails_args)that);
      return false;
    }

    public boolean equals(getFoodDetails_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_catalogId = true && this.isSetCatalogId();
      boolean that_present_catalogId = true && that.isSetCatalogId();
      if (this_present_catalogId || that_present_catalogId) {
        if (!(this_present_catalogId && that_present_catalogId))
          return false;
        if (!this.catalogId.equals(that.catalogId))
          return false;
      }

      boolean this_present_foodAttributes = true && this.isSetFoodAttributes();
      boolean that_present_foodAttributes = true && that.isSetFoodAttributes();
      if (this_present_foodAttributes || that_present_foodAttributes) {
        if (!(this_present_foodAttributes && that_present_foodAttributes))
          return false;
        if (!this.foodAttributes.equals(that.foodAttributes))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCatalogId()) ? 131071 : 524287);
      if (isSetCatalogId())
        hashCode = hashCode * 8191 + catalogId.hashCode();

      hashCode = hashCode * 8191 + ((isSetFoodAttributes()) ? 131071 : 524287);
      if (isSetFoodAttributes())
        hashCode = hashCode * 8191 + foodAttributes.hashCode();

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getFoodDetails_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCatalogId()).compareTo(other.isSetCatalogId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCatalogId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalogId, other.catalogId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFoodAttributes()).compareTo(other.isSetFoodAttributes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFoodAttributes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foodAttributes, other.foodAttributes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getFoodDetails_args(");
      boolean first = true;

      sb.append("catalogId:");
      if (this.catalogId == null) {
        sb.append("null");
      } else {
        sb.append(this.catalogId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("foodAttributes:");
      if (this.foodAttributes == null) {
        sb.append("null");
      } else {
        sb.append(this.foodAttributes);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (foodAttributes != null) {
        foodAttributes.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFoodDetails_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getFoodDetails_argsStandardScheme getScheme() {
        return new getFoodDetails_argsStandardScheme();
      }
    }

    private static class getFoodDetails_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getFoodDetails_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFoodDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CATALOG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.catalogId = iprot.readString();
                struct.setCatalogIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FOOD_ATTRIBUTES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.foodAttributes = new TFoodSearchAndFilterAttributes();
                struct.foodAttributes.read(iprot);
                struct.setFoodAttributesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFoodDetails_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.catalogId != null) {
          oprot.writeFieldBegin(CATALOG_ID_FIELD_DESC);
          oprot.writeString(struct.catalogId);
          oprot.writeFieldEnd();
        }
        if (struct.foodAttributes != null) {
          oprot.writeFieldBegin(FOOD_ATTRIBUTES_FIELD_DESC);
          struct.foodAttributes.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFoodDetails_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getFoodDetails_argsTupleScheme getScheme() {
        return new getFoodDetails_argsTupleScheme();
      }
    }

    private static class getFoodDetails_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getFoodDetails_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFoodDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCatalogId()) {
          optionals.set(0);
        }
        if (struct.isSetFoodAttributes()) {
          optionals.set(1);
        }
        if (struct.isSetLocale()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCatalogId()) {
          oprot.writeString(struct.catalogId);
        }
        if (struct.isSetFoodAttributes()) {
          struct.foodAttributes.write(oprot);
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFoodDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.catalogId = iprot.readString();
          struct.setCatalogIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.foodAttributes = new TFoodSearchAndFilterAttributes();
          struct.foodAttributes.read(iprot);
          struct.setFoodAttributesIsSet(true);
        }
        if (incoming.get(2)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getFoodDetails_result implements org.apache.thrift.TBase<getFoodDetails_result, getFoodDetails_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFoodDetails_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFoodDetails_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getFoodDetails_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getFoodDetails_resultTupleSchemeFactory();

    private TFoodDetailedResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TFoodDetailedResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFoodDetails_result.class, metaDataMap);
    }

    public getFoodDetails_result() {
    }

    public getFoodDetails_result(
      TFoodDetailedResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFoodDetails_result(getFoodDetails_result other) {
      if (other.isSetSuccess()) {
        this.success = new TFoodDetailedResponse(other.success);
      }
    }

    public getFoodDetails_result deepCopy() {
      return new getFoodDetails_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TFoodDetailedResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TFoodDetailedResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TFoodDetailedResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getFoodDetails_result)
        return this.equals((getFoodDetails_result)that);
      return false;
    }

    public boolean equals(getFoodDetails_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getFoodDetails_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getFoodDetails_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFoodDetails_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getFoodDetails_resultStandardScheme getScheme() {
        return new getFoodDetails_resultStandardScheme();
      }
    }

    private static class getFoodDetails_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getFoodDetails_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFoodDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TFoodDetailedResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFoodDetails_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFoodDetails_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getFoodDetails_resultTupleScheme getScheme() {
        return new getFoodDetails_resultTupleScheme();
      }
    }

    private static class getFoodDetails_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getFoodDetails_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFoodDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFoodDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TFoodDetailedResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listFoodDetails_args implements org.apache.thrift.TBase<listFoodDetails_args, listFoodDetails_args._Fields>, java.io.Serializable, Cloneable, Comparable<listFoodDetails_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listFoodDetails_args");

    private static final org.apache.thrift.protocol.TField CATALOG_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("catalogIds", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField FOOD_ATTRIBUTES_FIELD_DESC = new org.apache.thrift.protocol.TField("foodAttributes", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listFoodDetails_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listFoodDetails_argsTupleSchemeFactory();

    private java.util.List<java.lang.String> catalogIds; // required
    private TFoodSearchAndFilterAttributes foodAttributes; // required
    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CATALOG_IDS((short)1, "catalogIds"),
      FOOD_ATTRIBUTES((short)2, "foodAttributes"),
      LOCALE((short)3, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CATALOG_IDS
            return CATALOG_IDS;
          case 2: // FOOD_ATTRIBUTES
            return FOOD_ATTRIBUTES;
          case 3: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CATALOG_IDS, new org.apache.thrift.meta_data.FieldMetaData("catalogIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.FOOD_ATTRIBUTES, new org.apache.thrift.meta_data.FieldMetaData("foodAttributes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TFoodSearchAndFilterAttributes.class)));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listFoodDetails_args.class, metaDataMap);
    }

    public listFoodDetails_args() {
    }

    public listFoodDetails_args(
      java.util.List<java.lang.String> catalogIds,
      TFoodSearchAndFilterAttributes foodAttributes,
      java.lang.String locale)
    {
      this();
      this.catalogIds = catalogIds;
      this.foodAttributes = foodAttributes;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listFoodDetails_args(listFoodDetails_args other) {
      if (other.isSetCatalogIds()) {
        java.util.List<java.lang.String> __this__catalogIds = new java.util.ArrayList<java.lang.String>(other.catalogIds);
        this.catalogIds = __this__catalogIds;
      }
      if (other.isSetFoodAttributes()) {
        this.foodAttributes = new TFoodSearchAndFilterAttributes(other.foodAttributes);
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public listFoodDetails_args deepCopy() {
      return new listFoodDetails_args(this);
    }

    @Override
    public void clear() {
      this.catalogIds = null;
      this.foodAttributes = null;
      this.locale = null;
    }

    public int getCatalogIdsSize() {
      return (this.catalogIds == null) ? 0 : this.catalogIds.size();
    }

    public java.util.Iterator<java.lang.String> getCatalogIdsIterator() {
      return (this.catalogIds == null) ? null : this.catalogIds.iterator();
    }

    public void addToCatalogIds(java.lang.String elem) {
      if (this.catalogIds == null) {
        this.catalogIds = new java.util.ArrayList<java.lang.String>();
      }
      this.catalogIds.add(elem);
    }

    public java.util.List<java.lang.String> getCatalogIds() {
      return this.catalogIds;
    }

    public void setCatalogIds(java.util.List<java.lang.String> catalogIds) {
      this.catalogIds = catalogIds;
    }

    public void unsetCatalogIds() {
      this.catalogIds = null;
    }

    /** Returns true if field catalogIds is set (has been assigned a value) and false otherwise */
    public boolean isSetCatalogIds() {
      return this.catalogIds != null;
    }

    public void setCatalogIdsIsSet(boolean value) {
      if (!value) {
        this.catalogIds = null;
      }
    }

    public TFoodSearchAndFilterAttributes getFoodAttributes() {
      return this.foodAttributes;
    }

    public void setFoodAttributes(TFoodSearchAndFilterAttributes foodAttributes) {
      this.foodAttributes = foodAttributes;
    }

    public void unsetFoodAttributes() {
      this.foodAttributes = null;
    }

    /** Returns true if field foodAttributes is set (has been assigned a value) and false otherwise */
    public boolean isSetFoodAttributes() {
      return this.foodAttributes != null;
    }

    public void setFoodAttributesIsSet(boolean value) {
      if (!value) {
        this.foodAttributes = null;
      }
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CATALOG_IDS:
        if (value == null) {
          unsetCatalogIds();
        } else {
          setCatalogIds((java.util.List<java.lang.String>)value);
        }
        break;

      case FOOD_ATTRIBUTES:
        if (value == null) {
          unsetFoodAttributes();
        } else {
          setFoodAttributes((TFoodSearchAndFilterAttributes)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CATALOG_IDS:
        return getCatalogIds();

      case FOOD_ATTRIBUTES:
        return getFoodAttributes();

      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CATALOG_IDS:
        return isSetCatalogIds();
      case FOOD_ATTRIBUTES:
        return isSetFoodAttributes();
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listFoodDetails_args)
        return this.equals((listFoodDetails_args)that);
      return false;
    }

    public boolean equals(listFoodDetails_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_catalogIds = true && this.isSetCatalogIds();
      boolean that_present_catalogIds = true && that.isSetCatalogIds();
      if (this_present_catalogIds || that_present_catalogIds) {
        if (!(this_present_catalogIds && that_present_catalogIds))
          return false;
        if (!this.catalogIds.equals(that.catalogIds))
          return false;
      }

      boolean this_present_foodAttributes = true && this.isSetFoodAttributes();
      boolean that_present_foodAttributes = true && that.isSetFoodAttributes();
      if (this_present_foodAttributes || that_present_foodAttributes) {
        if (!(this_present_foodAttributes && that_present_foodAttributes))
          return false;
        if (!this.foodAttributes.equals(that.foodAttributes))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCatalogIds()) ? 131071 : 524287);
      if (isSetCatalogIds())
        hashCode = hashCode * 8191 + catalogIds.hashCode();

      hashCode = hashCode * 8191 + ((isSetFoodAttributes()) ? 131071 : 524287);
      if (isSetFoodAttributes())
        hashCode = hashCode * 8191 + foodAttributes.hashCode();

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listFoodDetails_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCatalogIds()).compareTo(other.isSetCatalogIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCatalogIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalogIds, other.catalogIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFoodAttributes()).compareTo(other.isSetFoodAttributes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFoodAttributes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foodAttributes, other.foodAttributes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listFoodDetails_args(");
      boolean first = true;

      sb.append("catalogIds:");
      if (this.catalogIds == null) {
        sb.append("null");
      } else {
        sb.append(this.catalogIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("foodAttributes:");
      if (this.foodAttributes == null) {
        sb.append("null");
      } else {
        sb.append(this.foodAttributes);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (foodAttributes != null) {
        foodAttributes.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listFoodDetails_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listFoodDetails_argsStandardScheme getScheme() {
        return new listFoodDetails_argsStandardScheme();
      }
    }

    private static class listFoodDetails_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listFoodDetails_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listFoodDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CATALOG_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list180 = iprot.readListBegin();
                  struct.catalogIds = new java.util.ArrayList<java.lang.String>(_list180.size);
                  java.lang.String _elem181;
                  for (int _i182 = 0; _i182 < _list180.size; ++_i182)
                  {
                    _elem181 = iprot.readString();
                    struct.catalogIds.add(_elem181);
                  }
                  iprot.readListEnd();
                }
                struct.setCatalogIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FOOD_ATTRIBUTES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.foodAttributes = new TFoodSearchAndFilterAttributes();
                struct.foodAttributes.read(iprot);
                struct.setFoodAttributesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listFoodDetails_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.catalogIds != null) {
          oprot.writeFieldBegin(CATALOG_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.catalogIds.size()));
            for (java.lang.String _iter183 : struct.catalogIds)
            {
              oprot.writeString(_iter183);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.foodAttributes != null) {
          oprot.writeFieldBegin(FOOD_ATTRIBUTES_FIELD_DESC);
          struct.foodAttributes.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listFoodDetails_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listFoodDetails_argsTupleScheme getScheme() {
        return new listFoodDetails_argsTupleScheme();
      }
    }

    private static class listFoodDetails_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listFoodDetails_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listFoodDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCatalogIds()) {
          optionals.set(0);
        }
        if (struct.isSetFoodAttributes()) {
          optionals.set(1);
        }
        if (struct.isSetLocale()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCatalogIds()) {
          {
            oprot.writeI32(struct.catalogIds.size());
            for (java.lang.String _iter184 : struct.catalogIds)
            {
              oprot.writeString(_iter184);
            }
          }
        }
        if (struct.isSetFoodAttributes()) {
          struct.foodAttributes.write(oprot);
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listFoodDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list185 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.catalogIds = new java.util.ArrayList<java.lang.String>(_list185.size);
            java.lang.String _elem186;
            for (int _i187 = 0; _i187 < _list185.size; ++_i187)
            {
              _elem186 = iprot.readString();
              struct.catalogIds.add(_elem186);
            }
          }
          struct.setCatalogIdsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.foodAttributes = new TFoodSearchAndFilterAttributes();
          struct.foodAttributes.read(iprot);
          struct.setFoodAttributesIsSet(true);
        }
        if (incoming.get(2)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listFoodDetails_result implements org.apache.thrift.TBase<listFoodDetails_result, listFoodDetails_result._Fields>, java.io.Serializable, Cloneable, Comparable<listFoodDetails_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listFoodDetails_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listFoodDetails_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listFoodDetails_resultTupleSchemeFactory();

    private java.util.List<TFoodDetailedResponse> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TFoodDetailedResponse.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listFoodDetails_result.class, metaDataMap);
    }

    public listFoodDetails_result() {
    }

    public listFoodDetails_result(
      java.util.List<TFoodDetailedResponse> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listFoodDetails_result(listFoodDetails_result other) {
      if (other.isSetSuccess()) {
        java.util.List<TFoodDetailedResponse> __this__success = new java.util.ArrayList<TFoodDetailedResponse>(other.success.size());
        for (TFoodDetailedResponse other_element : other.success) {
          __this__success.add(new TFoodDetailedResponse(other_element));
        }
        this.success = __this__success;
      }
    }

    public listFoodDetails_result deepCopy() {
      return new listFoodDetails_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TFoodDetailedResponse> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TFoodDetailedResponse elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<TFoodDetailedResponse>();
      }
      this.success.add(elem);
    }

    public java.util.List<TFoodDetailedResponse> getSuccess() {
      return this.success;
    }

    public void setSuccess(java.util.List<TFoodDetailedResponse> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<TFoodDetailedResponse>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listFoodDetails_result)
        return this.equals((listFoodDetails_result)that);
      return false;
    }

    public boolean equals(listFoodDetails_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listFoodDetails_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listFoodDetails_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listFoodDetails_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listFoodDetails_resultStandardScheme getScheme() {
        return new listFoodDetails_resultStandardScheme();
      }
    }

    private static class listFoodDetails_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listFoodDetails_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listFoodDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list188 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<TFoodDetailedResponse>(_list188.size);
                  TFoodDetailedResponse _elem189;
                  for (int _i190 = 0; _i190 < _list188.size; ++_i190)
                  {
                    _elem189 = new TFoodDetailedResponse();
                    _elem189.read(iprot);
                    struct.success.add(_elem189);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listFoodDetails_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TFoodDetailedResponse _iter191 : struct.success)
            {
              _iter191.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listFoodDetails_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listFoodDetails_resultTupleScheme getScheme() {
        return new listFoodDetails_resultTupleScheme();
      }
    }

    private static class listFoodDetails_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listFoodDetails_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listFoodDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TFoodDetailedResponse _iter192 : struct.success)
            {
              _iter192.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listFoodDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list193 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<TFoodDetailedResponse>(_list193.size);
            TFoodDetailedResponse _elem194;
            for (int _i195 = 0; _i195 < _list193.size; ++_i195)
            {
              _elem194 = new TFoodDetailedResponse();
              _elem194.read(iprot);
              struct.success.add(_elem194);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listFoodPackages_args implements org.apache.thrift.TBase<listFoodPackages_args, listFoodPackages_args._Fields>, java.io.Serializable, Cloneable, Comparable<listFoodPackages_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listFoodPackages_args");

    private static final org.apache.thrift.protocol.TField CATALOG_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("catalogIds", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listFoodPackages_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listFoodPackages_argsTupleSchemeFactory();

    private java.util.List<java.lang.String> catalogIds; // required
    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CATALOG_IDS((short)1, "catalogIds"),
      LOCALE((short)2, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CATALOG_IDS
            return CATALOG_IDS;
          case 2: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CATALOG_IDS, new org.apache.thrift.meta_data.FieldMetaData("catalogIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listFoodPackages_args.class, metaDataMap);
    }

    public listFoodPackages_args() {
    }

    public listFoodPackages_args(
      java.util.List<java.lang.String> catalogIds,
      java.lang.String locale)
    {
      this();
      this.catalogIds = catalogIds;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listFoodPackages_args(listFoodPackages_args other) {
      if (other.isSetCatalogIds()) {
        java.util.List<java.lang.String> __this__catalogIds = new java.util.ArrayList<java.lang.String>(other.catalogIds);
        this.catalogIds = __this__catalogIds;
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public listFoodPackages_args deepCopy() {
      return new listFoodPackages_args(this);
    }

    @Override
    public void clear() {
      this.catalogIds = null;
      this.locale = null;
    }

    public int getCatalogIdsSize() {
      return (this.catalogIds == null) ? 0 : this.catalogIds.size();
    }

    public java.util.Iterator<java.lang.String> getCatalogIdsIterator() {
      return (this.catalogIds == null) ? null : this.catalogIds.iterator();
    }

    public void addToCatalogIds(java.lang.String elem) {
      if (this.catalogIds == null) {
        this.catalogIds = new java.util.ArrayList<java.lang.String>();
      }
      this.catalogIds.add(elem);
    }

    public java.util.List<java.lang.String> getCatalogIds() {
      return this.catalogIds;
    }

    public void setCatalogIds(java.util.List<java.lang.String> catalogIds) {
      this.catalogIds = catalogIds;
    }

    public void unsetCatalogIds() {
      this.catalogIds = null;
    }

    /** Returns true if field catalogIds is set (has been assigned a value) and false otherwise */
    public boolean isSetCatalogIds() {
      return this.catalogIds != null;
    }

    public void setCatalogIdsIsSet(boolean value) {
      if (!value) {
        this.catalogIds = null;
      }
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CATALOG_IDS:
        if (value == null) {
          unsetCatalogIds();
        } else {
          setCatalogIds((java.util.List<java.lang.String>)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CATALOG_IDS:
        return getCatalogIds();

      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CATALOG_IDS:
        return isSetCatalogIds();
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listFoodPackages_args)
        return this.equals((listFoodPackages_args)that);
      return false;
    }

    public boolean equals(listFoodPackages_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_catalogIds = true && this.isSetCatalogIds();
      boolean that_present_catalogIds = true && that.isSetCatalogIds();
      if (this_present_catalogIds || that_present_catalogIds) {
        if (!(this_present_catalogIds && that_present_catalogIds))
          return false;
        if (!this.catalogIds.equals(that.catalogIds))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCatalogIds()) ? 131071 : 524287);
      if (isSetCatalogIds())
        hashCode = hashCode * 8191 + catalogIds.hashCode();

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listFoodPackages_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCatalogIds()).compareTo(other.isSetCatalogIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCatalogIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalogIds, other.catalogIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listFoodPackages_args(");
      boolean first = true;

      sb.append("catalogIds:");
      if (this.catalogIds == null) {
        sb.append("null");
      } else {
        sb.append(this.catalogIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listFoodPackages_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listFoodPackages_argsStandardScheme getScheme() {
        return new listFoodPackages_argsStandardScheme();
      }
    }

    private static class listFoodPackages_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listFoodPackages_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listFoodPackages_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CATALOG_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list196 = iprot.readListBegin();
                  struct.catalogIds = new java.util.ArrayList<java.lang.String>(_list196.size);
                  java.lang.String _elem197;
                  for (int _i198 = 0; _i198 < _list196.size; ++_i198)
                  {
                    _elem197 = iprot.readString();
                    struct.catalogIds.add(_elem197);
                  }
                  iprot.readListEnd();
                }
                struct.setCatalogIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listFoodPackages_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.catalogIds != null) {
          oprot.writeFieldBegin(CATALOG_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.catalogIds.size()));
            for (java.lang.String _iter199 : struct.catalogIds)
            {
              oprot.writeString(_iter199);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listFoodPackages_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listFoodPackages_argsTupleScheme getScheme() {
        return new listFoodPackages_argsTupleScheme();
      }
    }

    private static class listFoodPackages_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listFoodPackages_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listFoodPackages_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCatalogIds()) {
          optionals.set(0);
        }
        if (struct.isSetLocale()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCatalogIds()) {
          {
            oprot.writeI32(struct.catalogIds.size());
            for (java.lang.String _iter200 : struct.catalogIds)
            {
              oprot.writeString(_iter200);
            }
          }
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listFoodPackages_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list201 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.catalogIds = new java.util.ArrayList<java.lang.String>(_list201.size);
            java.lang.String _elem202;
            for (int _i203 = 0; _i203 < _list201.size; ++_i203)
            {
              _elem202 = iprot.readString();
              struct.catalogIds.add(_elem202);
            }
          }
          struct.setCatalogIdsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listFoodPackages_result implements org.apache.thrift.TBase<listFoodPackages_result, listFoodPackages_result._Fields>, java.io.Serializable, Cloneable, Comparable<listFoodPackages_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listFoodPackages_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listFoodPackages_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listFoodPackages_resultTupleSchemeFactory();

    private java.util.List<TFoodPackage> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TFoodPackage.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listFoodPackages_result.class, metaDataMap);
    }

    public listFoodPackages_result() {
    }

    public listFoodPackages_result(
      java.util.List<TFoodPackage> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listFoodPackages_result(listFoodPackages_result other) {
      if (other.isSetSuccess()) {
        java.util.List<TFoodPackage> __this__success = new java.util.ArrayList<TFoodPackage>(other.success.size());
        for (TFoodPackage other_element : other.success) {
          __this__success.add(new TFoodPackage(other_element));
        }
        this.success = __this__success;
      }
    }

    public listFoodPackages_result deepCopy() {
      return new listFoodPackages_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TFoodPackage> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TFoodPackage elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<TFoodPackage>();
      }
      this.success.add(elem);
    }

    public java.util.List<TFoodPackage> getSuccess() {
      return this.success;
    }

    public void setSuccess(java.util.List<TFoodPackage> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<TFoodPackage>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listFoodPackages_result)
        return this.equals((listFoodPackages_result)that);
      return false;
    }

    public boolean equals(listFoodPackages_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listFoodPackages_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listFoodPackages_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listFoodPackages_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listFoodPackages_resultStandardScheme getScheme() {
        return new listFoodPackages_resultStandardScheme();
      }
    }

    private static class listFoodPackages_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listFoodPackages_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listFoodPackages_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list204 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<TFoodPackage>(_list204.size);
                  TFoodPackage _elem205;
                  for (int _i206 = 0; _i206 < _list204.size; ++_i206)
                  {
                    _elem205 = new TFoodPackage();
                    _elem205.read(iprot);
                    struct.success.add(_elem205);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listFoodPackages_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TFoodPackage _iter207 : struct.success)
            {
              _iter207.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listFoodPackages_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listFoodPackages_resultTupleScheme getScheme() {
        return new listFoodPackages_resultTupleScheme();
      }
    }

    private static class listFoodPackages_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listFoodPackages_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listFoodPackages_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TFoodPackage _iter208 : struct.success)
            {
              _iter208.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listFoodPackages_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list209 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<TFoodPackage>(_list209.size);
            TFoodPackage _elem210;
            for (int _i211 = 0; _i211 < _list209.size; ++_i211)
            {
              _elem210 = new TFoodPackage();
              _elem210.read(iprot);
              struct.success.add(_elem210);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
