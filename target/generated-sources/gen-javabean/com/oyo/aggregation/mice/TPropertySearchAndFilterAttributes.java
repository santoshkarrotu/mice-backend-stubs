/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.oyo.aggregation.mice;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-03-14")
public class TPropertySearchAndFilterAttributes implements org.apache.thrift.TBase<TPropertySearchAndFilterAttributes, TPropertySearchAndFilterAttributes._Fields>, java.io.Serializable, Cloneable, Comparable<TPropertySearchAndFilterAttributes> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPropertySearchAndFilterAttributes");

  private static final org.apache.thrift.protocol.TField CITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cityId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PRICE_RANGES_FIELD_DESC = new org.apache.thrift.protocol.TField("priceRanges", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField NUMBER_OF_PAX_FIELD_DESC = new org.apache.thrift.protocol.TField("numberOfPax", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DATE_OF_EVENT_FIELD_DESC = new org.apache.thrift.protocol.TField("dateOfEvent", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField RENTAL_ONLY_FIELD_DESC = new org.apache.thrift.protocol.TField("rentalOnly", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField FOOD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("foodType", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField FOOD_PACKAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("foodPackageId", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TPropertySearchAndFilterAttributesStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TPropertySearchAndFilterAttributesTupleSchemeFactory();

  private java.lang.String cityId; // required
  private java.util.List<java.lang.String> priceRanges; // required
  private int numberOfPax; // required
  private TDate dateOfEvent; // required
  private boolean rentalOnly; // required
  private TFoodType foodType; // required
  private java.lang.String foodPackageId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CITY_ID((short)1, "cityId"),
    PRICE_RANGES((short)2, "priceRanges"),
    NUMBER_OF_PAX((short)3, "numberOfPax"),
    DATE_OF_EVENT((short)4, "dateOfEvent"),
    RENTAL_ONLY((short)5, "rentalOnly"),
    /**
     * 
     * @see TFoodType
     */
    FOOD_TYPE((short)6, "foodType"),
    FOOD_PACKAGE_ID((short)7, "foodPackageId");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CITY_ID
          return CITY_ID;
        case 2: // PRICE_RANGES
          return PRICE_RANGES;
        case 3: // NUMBER_OF_PAX
          return NUMBER_OF_PAX;
        case 4: // DATE_OF_EVENT
          return DATE_OF_EVENT;
        case 5: // RENTAL_ONLY
          return RENTAL_ONLY;
        case 6: // FOOD_TYPE
          return FOOD_TYPE;
        case 7: // FOOD_PACKAGE_ID
          return FOOD_PACKAGE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUMBEROFPAX_ISSET_ID = 0;
  private static final int __RENTALONLY_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CITY_ID, new org.apache.thrift.meta_data.FieldMetaData("cityId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRICE_RANGES, new org.apache.thrift.meta_data.FieldMetaData("priceRanges", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.NUMBER_OF_PAX, new org.apache.thrift.meta_data.FieldMetaData("numberOfPax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATE_OF_EVENT, new org.apache.thrift.meta_data.FieldMetaData("dateOfEvent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDate.class)));
    tmpMap.put(_Fields.RENTAL_ONLY, new org.apache.thrift.meta_data.FieldMetaData("rentalOnly", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FOOD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("foodType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TFoodType.class)));
    tmpMap.put(_Fields.FOOD_PACKAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("foodPackageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPropertySearchAndFilterAttributes.class, metaDataMap);
  }

  public TPropertySearchAndFilterAttributes() {
  }

  public TPropertySearchAndFilterAttributes(
    java.lang.String cityId,
    java.util.List<java.lang.String> priceRanges,
    int numberOfPax,
    TDate dateOfEvent,
    boolean rentalOnly,
    TFoodType foodType,
    java.lang.String foodPackageId)
  {
    this();
    this.cityId = cityId;
    this.priceRanges = priceRanges;
    this.numberOfPax = numberOfPax;
    setNumberOfPaxIsSet(true);
    this.dateOfEvent = dateOfEvent;
    this.rentalOnly = rentalOnly;
    setRentalOnlyIsSet(true);
    this.foodType = foodType;
    this.foodPackageId = foodPackageId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPropertySearchAndFilterAttributes(TPropertySearchAndFilterAttributes other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCityId()) {
      this.cityId = other.cityId;
    }
    if (other.isSetPriceRanges()) {
      java.util.List<java.lang.String> __this__priceRanges = new java.util.ArrayList<java.lang.String>(other.priceRanges);
      this.priceRanges = __this__priceRanges;
    }
    this.numberOfPax = other.numberOfPax;
    if (other.isSetDateOfEvent()) {
      this.dateOfEvent = new TDate(other.dateOfEvent);
    }
    this.rentalOnly = other.rentalOnly;
    if (other.isSetFoodType()) {
      this.foodType = other.foodType;
    }
    if (other.isSetFoodPackageId()) {
      this.foodPackageId = other.foodPackageId;
    }
  }

  public TPropertySearchAndFilterAttributes deepCopy() {
    return new TPropertySearchAndFilterAttributes(this);
  }

  @Override
  public void clear() {
    this.cityId = null;
    this.priceRanges = null;
    setNumberOfPaxIsSet(false);
    this.numberOfPax = 0;
    this.dateOfEvent = null;
    setRentalOnlyIsSet(false);
    this.rentalOnly = false;
    this.foodType = null;
    this.foodPackageId = null;
  }

  public java.lang.String getCityId() {
    return this.cityId;
  }

  public void setCityId(java.lang.String cityId) {
    this.cityId = cityId;
  }

  public void unsetCityId() {
    this.cityId = null;
  }

  /** Returns true if field cityId is set (has been assigned a value) and false otherwise */
  public boolean isSetCityId() {
    return this.cityId != null;
  }

  public void setCityIdIsSet(boolean value) {
    if (!value) {
      this.cityId = null;
    }
  }

  public int getPriceRangesSize() {
    return (this.priceRanges == null) ? 0 : this.priceRanges.size();
  }

  public java.util.Iterator<java.lang.String> getPriceRangesIterator() {
    return (this.priceRanges == null) ? null : this.priceRanges.iterator();
  }

  public void addToPriceRanges(java.lang.String elem) {
    if (this.priceRanges == null) {
      this.priceRanges = new java.util.ArrayList<java.lang.String>();
    }
    this.priceRanges.add(elem);
  }

  public java.util.List<java.lang.String> getPriceRanges() {
    return this.priceRanges;
  }

  public void setPriceRanges(java.util.List<java.lang.String> priceRanges) {
    this.priceRanges = priceRanges;
  }

  public void unsetPriceRanges() {
    this.priceRanges = null;
  }

  /** Returns true if field priceRanges is set (has been assigned a value) and false otherwise */
  public boolean isSetPriceRanges() {
    return this.priceRanges != null;
  }

  public void setPriceRangesIsSet(boolean value) {
    if (!value) {
      this.priceRanges = null;
    }
  }

  public int getNumberOfPax() {
    return this.numberOfPax;
  }

  public void setNumberOfPax(int numberOfPax) {
    this.numberOfPax = numberOfPax;
    setNumberOfPaxIsSet(true);
  }

  public void unsetNumberOfPax() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBEROFPAX_ISSET_ID);
  }

  /** Returns true if field numberOfPax is set (has been assigned a value) and false otherwise */
  public boolean isSetNumberOfPax() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBEROFPAX_ISSET_ID);
  }

  public void setNumberOfPaxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBEROFPAX_ISSET_ID, value);
  }

  public TDate getDateOfEvent() {
    return this.dateOfEvent;
  }

  public void setDateOfEvent(TDate dateOfEvent) {
    this.dateOfEvent = dateOfEvent;
  }

  public void unsetDateOfEvent() {
    this.dateOfEvent = null;
  }

  /** Returns true if field dateOfEvent is set (has been assigned a value) and false otherwise */
  public boolean isSetDateOfEvent() {
    return this.dateOfEvent != null;
  }

  public void setDateOfEventIsSet(boolean value) {
    if (!value) {
      this.dateOfEvent = null;
    }
  }

  public boolean isRentalOnly() {
    return this.rentalOnly;
  }

  public void setRentalOnly(boolean rentalOnly) {
    this.rentalOnly = rentalOnly;
    setRentalOnlyIsSet(true);
  }

  public void unsetRentalOnly() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RENTALONLY_ISSET_ID);
  }

  /** Returns true if field rentalOnly is set (has been assigned a value) and false otherwise */
  public boolean isSetRentalOnly() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RENTALONLY_ISSET_ID);
  }

  public void setRentalOnlyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RENTALONLY_ISSET_ID, value);
  }

  /**
   * 
   * @see TFoodType
   */
  public TFoodType getFoodType() {
    return this.foodType;
  }

  /**
   * 
   * @see TFoodType
   */
  public void setFoodType(TFoodType foodType) {
    this.foodType = foodType;
  }

  public void unsetFoodType() {
    this.foodType = null;
  }

  /** Returns true if field foodType is set (has been assigned a value) and false otherwise */
  public boolean isSetFoodType() {
    return this.foodType != null;
  }

  public void setFoodTypeIsSet(boolean value) {
    if (!value) {
      this.foodType = null;
    }
  }

  public java.lang.String getFoodPackageId() {
    return this.foodPackageId;
  }

  public void setFoodPackageId(java.lang.String foodPackageId) {
    this.foodPackageId = foodPackageId;
  }

  public void unsetFoodPackageId() {
    this.foodPackageId = null;
  }

  /** Returns true if field foodPackageId is set (has been assigned a value) and false otherwise */
  public boolean isSetFoodPackageId() {
    return this.foodPackageId != null;
  }

  public void setFoodPackageIdIsSet(boolean value) {
    if (!value) {
      this.foodPackageId = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case CITY_ID:
      if (value == null) {
        unsetCityId();
      } else {
        setCityId((java.lang.String)value);
      }
      break;

    case PRICE_RANGES:
      if (value == null) {
        unsetPriceRanges();
      } else {
        setPriceRanges((java.util.List<java.lang.String>)value);
      }
      break;

    case NUMBER_OF_PAX:
      if (value == null) {
        unsetNumberOfPax();
      } else {
        setNumberOfPax((java.lang.Integer)value);
      }
      break;

    case DATE_OF_EVENT:
      if (value == null) {
        unsetDateOfEvent();
      } else {
        setDateOfEvent((TDate)value);
      }
      break;

    case RENTAL_ONLY:
      if (value == null) {
        unsetRentalOnly();
      } else {
        setRentalOnly((java.lang.Boolean)value);
      }
      break;

    case FOOD_TYPE:
      if (value == null) {
        unsetFoodType();
      } else {
        setFoodType((TFoodType)value);
      }
      break;

    case FOOD_PACKAGE_ID:
      if (value == null) {
        unsetFoodPackageId();
      } else {
        setFoodPackageId((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CITY_ID:
      return getCityId();

    case PRICE_RANGES:
      return getPriceRanges();

    case NUMBER_OF_PAX:
      return getNumberOfPax();

    case DATE_OF_EVENT:
      return getDateOfEvent();

    case RENTAL_ONLY:
      return isRentalOnly();

    case FOOD_TYPE:
      return getFoodType();

    case FOOD_PACKAGE_ID:
      return getFoodPackageId();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CITY_ID:
      return isSetCityId();
    case PRICE_RANGES:
      return isSetPriceRanges();
    case NUMBER_OF_PAX:
      return isSetNumberOfPax();
    case DATE_OF_EVENT:
      return isSetDateOfEvent();
    case RENTAL_ONLY:
      return isSetRentalOnly();
    case FOOD_TYPE:
      return isSetFoodType();
    case FOOD_PACKAGE_ID:
      return isSetFoodPackageId();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TPropertySearchAndFilterAttributes)
      return this.equals((TPropertySearchAndFilterAttributes)that);
    return false;
  }

  public boolean equals(TPropertySearchAndFilterAttributes that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_cityId = true && this.isSetCityId();
    boolean that_present_cityId = true && that.isSetCityId();
    if (this_present_cityId || that_present_cityId) {
      if (!(this_present_cityId && that_present_cityId))
        return false;
      if (!this.cityId.equals(that.cityId))
        return false;
    }

    boolean this_present_priceRanges = true && this.isSetPriceRanges();
    boolean that_present_priceRanges = true && that.isSetPriceRanges();
    if (this_present_priceRanges || that_present_priceRanges) {
      if (!(this_present_priceRanges && that_present_priceRanges))
        return false;
      if (!this.priceRanges.equals(that.priceRanges))
        return false;
    }

    boolean this_present_numberOfPax = true;
    boolean that_present_numberOfPax = true;
    if (this_present_numberOfPax || that_present_numberOfPax) {
      if (!(this_present_numberOfPax && that_present_numberOfPax))
        return false;
      if (this.numberOfPax != that.numberOfPax)
        return false;
    }

    boolean this_present_dateOfEvent = true && this.isSetDateOfEvent();
    boolean that_present_dateOfEvent = true && that.isSetDateOfEvent();
    if (this_present_dateOfEvent || that_present_dateOfEvent) {
      if (!(this_present_dateOfEvent && that_present_dateOfEvent))
        return false;
      if (!this.dateOfEvent.equals(that.dateOfEvent))
        return false;
    }

    boolean this_present_rentalOnly = true;
    boolean that_present_rentalOnly = true;
    if (this_present_rentalOnly || that_present_rentalOnly) {
      if (!(this_present_rentalOnly && that_present_rentalOnly))
        return false;
      if (this.rentalOnly != that.rentalOnly)
        return false;
    }

    boolean this_present_foodType = true && this.isSetFoodType();
    boolean that_present_foodType = true && that.isSetFoodType();
    if (this_present_foodType || that_present_foodType) {
      if (!(this_present_foodType && that_present_foodType))
        return false;
      if (!this.foodType.equals(that.foodType))
        return false;
    }

    boolean this_present_foodPackageId = true && this.isSetFoodPackageId();
    boolean that_present_foodPackageId = true && that.isSetFoodPackageId();
    if (this_present_foodPackageId || that_present_foodPackageId) {
      if (!(this_present_foodPackageId && that_present_foodPackageId))
        return false;
      if (!this.foodPackageId.equals(that.foodPackageId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCityId()) ? 131071 : 524287);
    if (isSetCityId())
      hashCode = hashCode * 8191 + cityId.hashCode();

    hashCode = hashCode * 8191 + ((isSetPriceRanges()) ? 131071 : 524287);
    if (isSetPriceRanges())
      hashCode = hashCode * 8191 + priceRanges.hashCode();

    hashCode = hashCode * 8191 + numberOfPax;

    hashCode = hashCode * 8191 + ((isSetDateOfEvent()) ? 131071 : 524287);
    if (isSetDateOfEvent())
      hashCode = hashCode * 8191 + dateOfEvent.hashCode();

    hashCode = hashCode * 8191 + ((rentalOnly) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetFoodType()) ? 131071 : 524287);
    if (isSetFoodType())
      hashCode = hashCode * 8191 + foodType.getValue();

    hashCode = hashCode * 8191 + ((isSetFoodPackageId()) ? 131071 : 524287);
    if (isSetFoodPackageId())
      hashCode = hashCode * 8191 + foodPackageId.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TPropertySearchAndFilterAttributes other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetCityId()).compareTo(other.isSetCityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityId, other.cityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPriceRanges()).compareTo(other.isSetPriceRanges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriceRanges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceRanges, other.priceRanges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNumberOfPax()).compareTo(other.isSetNumberOfPax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumberOfPax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numberOfPax, other.numberOfPax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDateOfEvent()).compareTo(other.isSetDateOfEvent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateOfEvent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateOfEvent, other.dateOfEvent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRentalOnly()).compareTo(other.isSetRentalOnly());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRentalOnly()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rentalOnly, other.rentalOnly);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFoodType()).compareTo(other.isSetFoodType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFoodType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foodType, other.foodType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFoodPackageId()).compareTo(other.isSetFoodPackageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFoodPackageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foodPackageId, other.foodPackageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TPropertySearchAndFilterAttributes(");
    boolean first = true;

    sb.append("cityId:");
    if (this.cityId == null) {
      sb.append("null");
    } else {
      sb.append(this.cityId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("priceRanges:");
    if (this.priceRanges == null) {
      sb.append("null");
    } else {
      sb.append(this.priceRanges);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("numberOfPax:");
    sb.append(this.numberOfPax);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dateOfEvent:");
    if (this.dateOfEvent == null) {
      sb.append("null");
    } else {
      sb.append(this.dateOfEvent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rentalOnly:");
    sb.append(this.rentalOnly);
    first = false;
    if (!first) sb.append(", ");
    sb.append("foodType:");
    if (this.foodType == null) {
      sb.append("null");
    } else {
      sb.append(this.foodType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("foodPackageId:");
    if (this.foodPackageId == null) {
      sb.append("null");
    } else {
      sb.append(this.foodPackageId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (dateOfEvent != null) {
      dateOfEvent.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPropertySearchAndFilterAttributesStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TPropertySearchAndFilterAttributesStandardScheme getScheme() {
      return new TPropertySearchAndFilterAttributesStandardScheme();
    }
  }

  private static class TPropertySearchAndFilterAttributesStandardScheme extends org.apache.thrift.scheme.StandardScheme<TPropertySearchAndFilterAttributes> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPropertySearchAndFilterAttributes struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cityId = iprot.readString();
              struct.setCityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRICE_RANGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list102 = iprot.readListBegin();
                struct.priceRanges = new java.util.ArrayList<java.lang.String>(_list102.size);
                java.lang.String _elem103;
                for (int _i104 = 0; _i104 < _list102.size; ++_i104)
                {
                  _elem103 = iprot.readString();
                  struct.priceRanges.add(_elem103);
                }
                iprot.readListEnd();
              }
              struct.setPriceRangesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NUMBER_OF_PAX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numberOfPax = iprot.readI32();
              struct.setNumberOfPaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DATE_OF_EVENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dateOfEvent = new TDate();
              struct.dateOfEvent.read(iprot);
              struct.setDateOfEventIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RENTAL_ONLY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.rentalOnly = iprot.readBool();
              struct.setRentalOnlyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FOOD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.foodType = com.oyo.aggregation.mice.TFoodType.findByValue(iprot.readI32());
              struct.setFoodTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FOOD_PACKAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.foodPackageId = iprot.readString();
              struct.setFoodPackageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPropertySearchAndFilterAttributes struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.cityId != null) {
        oprot.writeFieldBegin(CITY_ID_FIELD_DESC);
        oprot.writeString(struct.cityId);
        oprot.writeFieldEnd();
      }
      if (struct.priceRanges != null) {
        oprot.writeFieldBegin(PRICE_RANGES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.priceRanges.size()));
          for (java.lang.String _iter105 : struct.priceRanges)
          {
            oprot.writeString(_iter105);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NUMBER_OF_PAX_FIELD_DESC);
      oprot.writeI32(struct.numberOfPax);
      oprot.writeFieldEnd();
      if (struct.dateOfEvent != null) {
        oprot.writeFieldBegin(DATE_OF_EVENT_FIELD_DESC);
        struct.dateOfEvent.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RENTAL_ONLY_FIELD_DESC);
      oprot.writeBool(struct.rentalOnly);
      oprot.writeFieldEnd();
      if (struct.foodType != null) {
        oprot.writeFieldBegin(FOOD_TYPE_FIELD_DESC);
        oprot.writeI32(struct.foodType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.foodPackageId != null) {
        oprot.writeFieldBegin(FOOD_PACKAGE_ID_FIELD_DESC);
        oprot.writeString(struct.foodPackageId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPropertySearchAndFilterAttributesTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TPropertySearchAndFilterAttributesTupleScheme getScheme() {
      return new TPropertySearchAndFilterAttributesTupleScheme();
    }
  }

  private static class TPropertySearchAndFilterAttributesTupleScheme extends org.apache.thrift.scheme.TupleScheme<TPropertySearchAndFilterAttributes> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPropertySearchAndFilterAttributes struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCityId()) {
        optionals.set(0);
      }
      if (struct.isSetPriceRanges()) {
        optionals.set(1);
      }
      if (struct.isSetNumberOfPax()) {
        optionals.set(2);
      }
      if (struct.isSetDateOfEvent()) {
        optionals.set(3);
      }
      if (struct.isSetRentalOnly()) {
        optionals.set(4);
      }
      if (struct.isSetFoodType()) {
        optionals.set(5);
      }
      if (struct.isSetFoodPackageId()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetCityId()) {
        oprot.writeString(struct.cityId);
      }
      if (struct.isSetPriceRanges()) {
        {
          oprot.writeI32(struct.priceRanges.size());
          for (java.lang.String _iter106 : struct.priceRanges)
          {
            oprot.writeString(_iter106);
          }
        }
      }
      if (struct.isSetNumberOfPax()) {
        oprot.writeI32(struct.numberOfPax);
      }
      if (struct.isSetDateOfEvent()) {
        struct.dateOfEvent.write(oprot);
      }
      if (struct.isSetRentalOnly()) {
        oprot.writeBool(struct.rentalOnly);
      }
      if (struct.isSetFoodType()) {
        oprot.writeI32(struct.foodType.getValue());
      }
      if (struct.isSetFoodPackageId()) {
        oprot.writeString(struct.foodPackageId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPropertySearchAndFilterAttributes struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.cityId = iprot.readString();
        struct.setCityIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list107 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.priceRanges = new java.util.ArrayList<java.lang.String>(_list107.size);
          java.lang.String _elem108;
          for (int _i109 = 0; _i109 < _list107.size; ++_i109)
          {
            _elem108 = iprot.readString();
            struct.priceRanges.add(_elem108);
          }
        }
        struct.setPriceRangesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.numberOfPax = iprot.readI32();
        struct.setNumberOfPaxIsSet(true);
      }
      if (incoming.get(3)) {
        struct.dateOfEvent = new TDate();
        struct.dateOfEvent.read(iprot);
        struct.setDateOfEventIsSet(true);
      }
      if (incoming.get(4)) {
        struct.rentalOnly = iprot.readBool();
        struct.setRentalOnlyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.foodType = com.oyo.aggregation.mice.TFoodType.findByValue(iprot.readI32());
        struct.setFoodTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.foodPackageId = iprot.readString();
        struct.setFoodPackageIdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

