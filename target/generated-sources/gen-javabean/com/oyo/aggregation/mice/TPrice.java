/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.oyo.aggregation.mice;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-03-20")
public class TPrice implements org.apache.thrift.TBase<TPrice, TPrice._Fields>, java.io.Serializable, Cloneable, Comparable<TPrice> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPrice");

  private static final org.apache.thrift.protocol.TField ORIGINAL_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("originalPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField VALUE_DEAL_FIELD_DESC = new org.apache.thrift.protocol.TField("valueDeal", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField DISCOUNT_PERCENTAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("discountPercentage", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField AFTER_DISCOUNT_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("afterDiscountPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TPriceStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TPriceTupleSchemeFactory();

  private double originalPrice; // required
  private boolean valueDeal; // required
  private double discountPercentage; // required
  private double afterDiscountPrice; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ORIGINAL_PRICE((short)1, "originalPrice"),
    VALUE_DEAL((short)2, "valueDeal"),
    DISCOUNT_PERCENTAGE((short)3, "discountPercentage"),
    AFTER_DISCOUNT_PRICE((short)4, "afterDiscountPrice");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORIGINAL_PRICE
          return ORIGINAL_PRICE;
        case 2: // VALUE_DEAL
          return VALUE_DEAL;
        case 3: // DISCOUNT_PERCENTAGE
          return DISCOUNT_PERCENTAGE;
        case 4: // AFTER_DISCOUNT_PRICE
          return AFTER_DISCOUNT_PRICE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ORIGINALPRICE_ISSET_ID = 0;
  private static final int __VALUEDEAL_ISSET_ID = 1;
  private static final int __DISCOUNTPERCENTAGE_ISSET_ID = 2;
  private static final int __AFTERDISCOUNTPRICE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORIGINAL_PRICE, new org.apache.thrift.meta_data.FieldMetaData("originalPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VALUE_DEAL, new org.apache.thrift.meta_data.FieldMetaData("valueDeal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DISCOUNT_PERCENTAGE, new org.apache.thrift.meta_data.FieldMetaData("discountPercentage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AFTER_DISCOUNT_PRICE, new org.apache.thrift.meta_data.FieldMetaData("afterDiscountPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPrice.class, metaDataMap);
  }

  public TPrice() {
  }

  public TPrice(
    double originalPrice,
    boolean valueDeal,
    double discountPercentage,
    double afterDiscountPrice)
  {
    this();
    this.originalPrice = originalPrice;
    setOriginalPriceIsSet(true);
    this.valueDeal = valueDeal;
    setValueDealIsSet(true);
    this.discountPercentage = discountPercentage;
    setDiscountPercentageIsSet(true);
    this.afterDiscountPrice = afterDiscountPrice;
    setAfterDiscountPriceIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPrice(TPrice other) {
    __isset_bitfield = other.__isset_bitfield;
    this.originalPrice = other.originalPrice;
    this.valueDeal = other.valueDeal;
    this.discountPercentage = other.discountPercentage;
    this.afterDiscountPrice = other.afterDiscountPrice;
  }

  public TPrice deepCopy() {
    return new TPrice(this);
  }

  @Override
  public void clear() {
    setOriginalPriceIsSet(false);
    this.originalPrice = 0.0;
    setValueDealIsSet(false);
    this.valueDeal = false;
    setDiscountPercentageIsSet(false);
    this.discountPercentage = 0.0;
    setAfterDiscountPriceIsSet(false);
    this.afterDiscountPrice = 0.0;
  }

  public double getOriginalPrice() {
    return this.originalPrice;
  }

  public void setOriginalPrice(double originalPrice) {
    this.originalPrice = originalPrice;
    setOriginalPriceIsSet(true);
  }

  public void unsetOriginalPrice() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ORIGINALPRICE_ISSET_ID);
  }

  /** Returns true if field originalPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginalPrice() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ORIGINALPRICE_ISSET_ID);
  }

  public void setOriginalPriceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ORIGINALPRICE_ISSET_ID, value);
  }

  public boolean isValueDeal() {
    return this.valueDeal;
  }

  public void setValueDeal(boolean valueDeal) {
    this.valueDeal = valueDeal;
    setValueDealIsSet(true);
  }

  public void unsetValueDeal() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VALUEDEAL_ISSET_ID);
  }

  /** Returns true if field valueDeal is set (has been assigned a value) and false otherwise */
  public boolean isSetValueDeal() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VALUEDEAL_ISSET_ID);
  }

  public void setValueDealIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VALUEDEAL_ISSET_ID, value);
  }

  public double getDiscountPercentage() {
    return this.discountPercentage;
  }

  public void setDiscountPercentage(double discountPercentage) {
    this.discountPercentage = discountPercentage;
    setDiscountPercentageIsSet(true);
  }

  public void unsetDiscountPercentage() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISCOUNTPERCENTAGE_ISSET_ID);
  }

  /** Returns true if field discountPercentage is set (has been assigned a value) and false otherwise */
  public boolean isSetDiscountPercentage() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISCOUNTPERCENTAGE_ISSET_ID);
  }

  public void setDiscountPercentageIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISCOUNTPERCENTAGE_ISSET_ID, value);
  }

  public double getAfterDiscountPrice() {
    return this.afterDiscountPrice;
  }

  public void setAfterDiscountPrice(double afterDiscountPrice) {
    this.afterDiscountPrice = afterDiscountPrice;
    setAfterDiscountPriceIsSet(true);
  }

  public void unsetAfterDiscountPrice() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AFTERDISCOUNTPRICE_ISSET_ID);
  }

  /** Returns true if field afterDiscountPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetAfterDiscountPrice() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AFTERDISCOUNTPRICE_ISSET_ID);
  }

  public void setAfterDiscountPriceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AFTERDISCOUNTPRICE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ORIGINAL_PRICE:
      if (value == null) {
        unsetOriginalPrice();
      } else {
        setOriginalPrice((java.lang.Double)value);
      }
      break;

    case VALUE_DEAL:
      if (value == null) {
        unsetValueDeal();
      } else {
        setValueDeal((java.lang.Boolean)value);
      }
      break;

    case DISCOUNT_PERCENTAGE:
      if (value == null) {
        unsetDiscountPercentage();
      } else {
        setDiscountPercentage((java.lang.Double)value);
      }
      break;

    case AFTER_DISCOUNT_PRICE:
      if (value == null) {
        unsetAfterDiscountPrice();
      } else {
        setAfterDiscountPrice((java.lang.Double)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ORIGINAL_PRICE:
      return getOriginalPrice();

    case VALUE_DEAL:
      return isValueDeal();

    case DISCOUNT_PERCENTAGE:
      return getDiscountPercentage();

    case AFTER_DISCOUNT_PRICE:
      return getAfterDiscountPrice();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ORIGINAL_PRICE:
      return isSetOriginalPrice();
    case VALUE_DEAL:
      return isSetValueDeal();
    case DISCOUNT_PERCENTAGE:
      return isSetDiscountPercentage();
    case AFTER_DISCOUNT_PRICE:
      return isSetAfterDiscountPrice();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TPrice)
      return this.equals((TPrice)that);
    return false;
  }

  public boolean equals(TPrice that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_originalPrice = true;
    boolean that_present_originalPrice = true;
    if (this_present_originalPrice || that_present_originalPrice) {
      if (!(this_present_originalPrice && that_present_originalPrice))
        return false;
      if (this.originalPrice != that.originalPrice)
        return false;
    }

    boolean this_present_valueDeal = true;
    boolean that_present_valueDeal = true;
    if (this_present_valueDeal || that_present_valueDeal) {
      if (!(this_present_valueDeal && that_present_valueDeal))
        return false;
      if (this.valueDeal != that.valueDeal)
        return false;
    }

    boolean this_present_discountPercentage = true;
    boolean that_present_discountPercentage = true;
    if (this_present_discountPercentage || that_present_discountPercentage) {
      if (!(this_present_discountPercentage && that_present_discountPercentage))
        return false;
      if (this.discountPercentage != that.discountPercentage)
        return false;
    }

    boolean this_present_afterDiscountPrice = true;
    boolean that_present_afterDiscountPrice = true;
    if (this_present_afterDiscountPrice || that_present_afterDiscountPrice) {
      if (!(this_present_afterDiscountPrice && that_present_afterDiscountPrice))
        return false;
      if (this.afterDiscountPrice != that.afterDiscountPrice)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(originalPrice);

    hashCode = hashCode * 8191 + ((valueDeal) ? 131071 : 524287);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(discountPercentage);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(afterDiscountPrice);

    return hashCode;
  }

  @Override
  public int compareTo(TPrice other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetOriginalPrice()).compareTo(other.isSetOriginalPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginalPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originalPrice, other.originalPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetValueDeal()).compareTo(other.isSetValueDeal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValueDeal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valueDeal, other.valueDeal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDiscountPercentage()).compareTo(other.isSetDiscountPercentage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiscountPercentage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.discountPercentage, other.discountPercentage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAfterDiscountPrice()).compareTo(other.isSetAfterDiscountPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAfterDiscountPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.afterDiscountPrice, other.afterDiscountPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TPrice(");
    boolean first = true;

    sb.append("originalPrice:");
    sb.append(this.originalPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("valueDeal:");
    sb.append(this.valueDeal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("discountPercentage:");
    sb.append(this.discountPercentage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("afterDiscountPrice:");
    sb.append(this.afterDiscountPrice);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPriceStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TPriceStandardScheme getScheme() {
      return new TPriceStandardScheme();
    }
  }

  private static class TPriceStandardScheme extends org.apache.thrift.scheme.StandardScheme<TPrice> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPrice struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORIGINAL_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.originalPrice = iprot.readDouble();
              struct.setOriginalPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VALUE_DEAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.valueDeal = iprot.readBool();
              struct.setValueDealIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DISCOUNT_PERCENTAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.discountPercentage = iprot.readDouble();
              struct.setDiscountPercentageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AFTER_DISCOUNT_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.afterDiscountPrice = iprot.readDouble();
              struct.setAfterDiscountPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPrice struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ORIGINAL_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.originalPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VALUE_DEAL_FIELD_DESC);
      oprot.writeBool(struct.valueDeal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DISCOUNT_PERCENTAGE_FIELD_DESC);
      oprot.writeDouble(struct.discountPercentage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AFTER_DISCOUNT_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.afterDiscountPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPriceTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TPriceTupleScheme getScheme() {
      return new TPriceTupleScheme();
    }
  }

  private static class TPriceTupleScheme extends org.apache.thrift.scheme.TupleScheme<TPrice> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPrice struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetOriginalPrice()) {
        optionals.set(0);
      }
      if (struct.isSetValueDeal()) {
        optionals.set(1);
      }
      if (struct.isSetDiscountPercentage()) {
        optionals.set(2);
      }
      if (struct.isSetAfterDiscountPrice()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetOriginalPrice()) {
        oprot.writeDouble(struct.originalPrice);
      }
      if (struct.isSetValueDeal()) {
        oprot.writeBool(struct.valueDeal);
      }
      if (struct.isSetDiscountPercentage()) {
        oprot.writeDouble(struct.discountPercentage);
      }
      if (struct.isSetAfterDiscountPrice()) {
        oprot.writeDouble(struct.afterDiscountPrice);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPrice struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.originalPrice = iprot.readDouble();
        struct.setOriginalPriceIsSet(true);
      }
      if (incoming.get(1)) {
        struct.valueDeal = iprot.readBool();
        struct.setValueDealIsSet(true);
      }
      if (incoming.get(2)) {
        struct.discountPercentage = iprot.readDouble();
        struct.setDiscountPercentageIsSet(true);
      }
      if (incoming.get(3)) {
        struct.afterDiscountPrice = iprot.readDouble();
        struct.setAfterDiscountPriceIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

