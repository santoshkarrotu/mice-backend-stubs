/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.oyo.aggregation.mice;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-03-14")
public class TFoodCategoryWithQuantity implements org.apache.thrift.TBase<TFoodCategoryWithQuantity, TFoodCategoryWithQuantity._Fields>, java.io.Serializable, Cloneable, Comparable<TFoodCategoryWithQuantity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TFoodCategoryWithQuantity");

  private static final org.apache.thrift.protocol.TField FOOD_CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("foodCategory", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField QUANTITY_ALLOWED_FIELD_DESC = new org.apache.thrift.protocol.TField("quantityAllowed", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TFoodCategoryWithQuantityStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TFoodCategoryWithQuantityTupleSchemeFactory();

  private TFoodCategory foodCategory; // required
  private int quantityAllowed; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FOOD_CATEGORY((short)1, "foodCategory"),
    QUANTITY_ALLOWED((short)2, "quantityAllowed");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FOOD_CATEGORY
          return FOOD_CATEGORY;
        case 2: // QUANTITY_ALLOWED
          return QUANTITY_ALLOWED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __QUANTITYALLOWED_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FOOD_CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("foodCategory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TFoodCategory.class)));
    tmpMap.put(_Fields.QUANTITY_ALLOWED, new org.apache.thrift.meta_data.FieldMetaData("quantityAllowed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TFoodCategoryWithQuantity.class, metaDataMap);
  }

  public TFoodCategoryWithQuantity() {
  }

  public TFoodCategoryWithQuantity(
    TFoodCategory foodCategory,
    int quantityAllowed)
  {
    this();
    this.foodCategory = foodCategory;
    this.quantityAllowed = quantityAllowed;
    setQuantityAllowedIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TFoodCategoryWithQuantity(TFoodCategoryWithQuantity other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFoodCategory()) {
      this.foodCategory = new TFoodCategory(other.foodCategory);
    }
    this.quantityAllowed = other.quantityAllowed;
  }

  public TFoodCategoryWithQuantity deepCopy() {
    return new TFoodCategoryWithQuantity(this);
  }

  @Override
  public void clear() {
    this.foodCategory = null;
    setQuantityAllowedIsSet(false);
    this.quantityAllowed = 0;
  }

  public TFoodCategory getFoodCategory() {
    return this.foodCategory;
  }

  public void setFoodCategory(TFoodCategory foodCategory) {
    this.foodCategory = foodCategory;
  }

  public void unsetFoodCategory() {
    this.foodCategory = null;
  }

  /** Returns true if field foodCategory is set (has been assigned a value) and false otherwise */
  public boolean isSetFoodCategory() {
    return this.foodCategory != null;
  }

  public void setFoodCategoryIsSet(boolean value) {
    if (!value) {
      this.foodCategory = null;
    }
  }

  public int getQuantityAllowed() {
    return this.quantityAllowed;
  }

  public void setQuantityAllowed(int quantityAllowed) {
    this.quantityAllowed = quantityAllowed;
    setQuantityAllowedIsSet(true);
  }

  public void unsetQuantityAllowed() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __QUANTITYALLOWED_ISSET_ID);
  }

  /** Returns true if field quantityAllowed is set (has been assigned a value) and false otherwise */
  public boolean isSetQuantityAllowed() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __QUANTITYALLOWED_ISSET_ID);
  }

  public void setQuantityAllowedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __QUANTITYALLOWED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case FOOD_CATEGORY:
      if (value == null) {
        unsetFoodCategory();
      } else {
        setFoodCategory((TFoodCategory)value);
      }
      break;

    case QUANTITY_ALLOWED:
      if (value == null) {
        unsetQuantityAllowed();
      } else {
        setQuantityAllowed((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FOOD_CATEGORY:
      return getFoodCategory();

    case QUANTITY_ALLOWED:
      return getQuantityAllowed();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FOOD_CATEGORY:
      return isSetFoodCategory();
    case QUANTITY_ALLOWED:
      return isSetQuantityAllowed();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TFoodCategoryWithQuantity)
      return this.equals((TFoodCategoryWithQuantity)that);
    return false;
  }

  public boolean equals(TFoodCategoryWithQuantity that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_foodCategory = true && this.isSetFoodCategory();
    boolean that_present_foodCategory = true && that.isSetFoodCategory();
    if (this_present_foodCategory || that_present_foodCategory) {
      if (!(this_present_foodCategory && that_present_foodCategory))
        return false;
      if (!this.foodCategory.equals(that.foodCategory))
        return false;
    }

    boolean this_present_quantityAllowed = true;
    boolean that_present_quantityAllowed = true;
    if (this_present_quantityAllowed || that_present_quantityAllowed) {
      if (!(this_present_quantityAllowed && that_present_quantityAllowed))
        return false;
      if (this.quantityAllowed != that.quantityAllowed)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFoodCategory()) ? 131071 : 524287);
    if (isSetFoodCategory())
      hashCode = hashCode * 8191 + foodCategory.hashCode();

    hashCode = hashCode * 8191 + quantityAllowed;

    return hashCode;
  }

  @Override
  public int compareTo(TFoodCategoryWithQuantity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetFoodCategory()).compareTo(other.isSetFoodCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFoodCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foodCategory, other.foodCategory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetQuantityAllowed()).compareTo(other.isSetQuantityAllowed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuantityAllowed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quantityAllowed, other.quantityAllowed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TFoodCategoryWithQuantity(");
    boolean first = true;

    sb.append("foodCategory:");
    if (this.foodCategory == null) {
      sb.append("null");
    } else {
      sb.append(this.foodCategory);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("quantityAllowed:");
    sb.append(this.quantityAllowed);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (foodCategory != null) {
      foodCategory.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TFoodCategoryWithQuantityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TFoodCategoryWithQuantityStandardScheme getScheme() {
      return new TFoodCategoryWithQuantityStandardScheme();
    }
  }

  private static class TFoodCategoryWithQuantityStandardScheme extends org.apache.thrift.scheme.StandardScheme<TFoodCategoryWithQuantity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TFoodCategoryWithQuantity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FOOD_CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.foodCategory = new TFoodCategory();
              struct.foodCategory.read(iprot);
              struct.setFoodCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // QUANTITY_ALLOWED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.quantityAllowed = iprot.readI32();
              struct.setQuantityAllowedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TFoodCategoryWithQuantity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.foodCategory != null) {
        oprot.writeFieldBegin(FOOD_CATEGORY_FIELD_DESC);
        struct.foodCategory.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(QUANTITY_ALLOWED_FIELD_DESC);
      oprot.writeI32(struct.quantityAllowed);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TFoodCategoryWithQuantityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TFoodCategoryWithQuantityTupleScheme getScheme() {
      return new TFoodCategoryWithQuantityTupleScheme();
    }
  }

  private static class TFoodCategoryWithQuantityTupleScheme extends org.apache.thrift.scheme.TupleScheme<TFoodCategoryWithQuantity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TFoodCategoryWithQuantity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFoodCategory()) {
        optionals.set(0);
      }
      if (struct.isSetQuantityAllowed()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetFoodCategory()) {
        struct.foodCategory.write(oprot);
      }
      if (struct.isSetQuantityAllowed()) {
        oprot.writeI32(struct.quantityAllowed);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TFoodCategoryWithQuantity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.foodCategory = new TFoodCategory();
        struct.foodCategory.read(iprot);
        struct.setFoodCategoryIsSet(true);
      }
      if (incoming.get(1)) {
        struct.quantityAllowed = iprot.readI32();
        struct.setQuantityAllowedIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

