/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.oyo.aggregation.mice;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-03-14")
public class TCommonValues implements org.apache.thrift.TBase<TCommonValues, TCommonValues._Fields>, java.io.Serializable, Cloneable, Comparable<TCommonValues> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCommonValues");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ACTIVATION_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("activationDate", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField EXPIRY_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("expiryDate", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField INVENTORY_FIELD_DESC = new org.apache.thrift.protocol.TField("inventory", org.apache.thrift.protocol.TType.STRUCT, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TCommonValuesStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TCommonValuesTupleSchemeFactory();

  private java.lang.String id; // required
  private java.lang.String name; // required
  private java.lang.String type; // required
  private java.lang.String activationDate; // required
  private java.lang.String expiryDate; // required
  private TPrice price; // required
  private TInventory inventory; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    TYPE((short)3, "type"),
    ACTIVATION_DATE((short)4, "activationDate"),
    EXPIRY_DATE((short)5, "expiryDate"),
    PRICE((short)6, "price"),
    INVENTORY((short)7, "inventory");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // TYPE
          return TYPE;
        case 4: // ACTIVATION_DATE
          return ACTIVATION_DATE;
        case 5: // EXPIRY_DATE
          return EXPIRY_DATE;
        case 6: // PRICE
          return PRICE;
        case 7: // INVENTORY
          return INVENTORY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTIVATION_DATE, new org.apache.thrift.meta_data.FieldMetaData("activationDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPIRY_DATE, new org.apache.thrift.meta_data.FieldMetaData("expiryDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPrice.class)));
    tmpMap.put(_Fields.INVENTORY, new org.apache.thrift.meta_data.FieldMetaData("inventory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInventory.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCommonValues.class, metaDataMap);
  }

  public TCommonValues() {
  }

  public TCommonValues(
    java.lang.String id,
    java.lang.String name,
    java.lang.String type,
    java.lang.String activationDate,
    java.lang.String expiryDate,
    TPrice price,
    TInventory inventory)
  {
    this();
    this.id = id;
    this.name = name;
    this.type = type;
    this.activationDate = activationDate;
    this.expiryDate = expiryDate;
    this.price = price;
    this.inventory = inventory;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCommonValues(TCommonValues other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetActivationDate()) {
      this.activationDate = other.activationDate;
    }
    if (other.isSetExpiryDate()) {
      this.expiryDate = other.expiryDate;
    }
    if (other.isSetPrice()) {
      this.price = new TPrice(other.price);
    }
    if (other.isSetInventory()) {
      this.inventory = new TInventory(other.inventory);
    }
  }

  public TCommonValues deepCopy() {
    return new TCommonValues(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.name = null;
    this.type = null;
    this.activationDate = null;
    this.expiryDate = null;
    this.price = null;
    this.inventory = null;
  }

  public java.lang.String getId() {
    return this.id;
  }

  public void setId(java.lang.String id) {
    this.id = id;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public java.lang.String getName() {
    return this.name;
  }

  public void setName(java.lang.String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public java.lang.String getType() {
    return this.type;
  }

  public void setType(java.lang.String type) {
    this.type = type;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public java.lang.String getActivationDate() {
    return this.activationDate;
  }

  public void setActivationDate(java.lang.String activationDate) {
    this.activationDate = activationDate;
  }

  public void unsetActivationDate() {
    this.activationDate = null;
  }

  /** Returns true if field activationDate is set (has been assigned a value) and false otherwise */
  public boolean isSetActivationDate() {
    return this.activationDate != null;
  }

  public void setActivationDateIsSet(boolean value) {
    if (!value) {
      this.activationDate = null;
    }
  }

  public java.lang.String getExpiryDate() {
    return this.expiryDate;
  }

  public void setExpiryDate(java.lang.String expiryDate) {
    this.expiryDate = expiryDate;
  }

  public void unsetExpiryDate() {
    this.expiryDate = null;
  }

  /** Returns true if field expiryDate is set (has been assigned a value) and false otherwise */
  public boolean isSetExpiryDate() {
    return this.expiryDate != null;
  }

  public void setExpiryDateIsSet(boolean value) {
    if (!value) {
      this.expiryDate = null;
    }
  }

  public TPrice getPrice() {
    return this.price;
  }

  public void setPrice(TPrice price) {
    this.price = price;
  }

  public void unsetPrice() {
    this.price = null;
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return this.price != null;
  }

  public void setPriceIsSet(boolean value) {
    if (!value) {
      this.price = null;
    }
  }

  public TInventory getInventory() {
    return this.inventory;
  }

  public void setInventory(TInventory inventory) {
    this.inventory = inventory;
  }

  public void unsetInventory() {
    this.inventory = null;
  }

  /** Returns true if field inventory is set (has been assigned a value) and false otherwise */
  public boolean isSetInventory() {
    return this.inventory != null;
  }

  public void setInventoryIsSet(boolean value) {
    if (!value) {
      this.inventory = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((java.lang.String)value);
      }
      break;

    case ACTIVATION_DATE:
      if (value == null) {
        unsetActivationDate();
      } else {
        setActivationDate((java.lang.String)value);
      }
      break;

    case EXPIRY_DATE:
      if (value == null) {
        unsetExpiryDate();
      } else {
        setExpiryDate((java.lang.String)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((TPrice)value);
      }
      break;

    case INVENTORY:
      if (value == null) {
        unsetInventory();
      } else {
        setInventory((TInventory)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case TYPE:
      return getType();

    case ACTIVATION_DATE:
      return getActivationDate();

    case EXPIRY_DATE:
      return getExpiryDate();

    case PRICE:
      return getPrice();

    case INVENTORY:
      return getInventory();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case TYPE:
      return isSetType();
    case ACTIVATION_DATE:
      return isSetActivationDate();
    case EXPIRY_DATE:
      return isSetExpiryDate();
    case PRICE:
      return isSetPrice();
    case INVENTORY:
      return isSetInventory();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TCommonValues)
      return this.equals((TCommonValues)that);
    return false;
  }

  public boolean equals(TCommonValues that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_activationDate = true && this.isSetActivationDate();
    boolean that_present_activationDate = true && that.isSetActivationDate();
    if (this_present_activationDate || that_present_activationDate) {
      if (!(this_present_activationDate && that_present_activationDate))
        return false;
      if (!this.activationDate.equals(that.activationDate))
        return false;
    }

    boolean this_present_expiryDate = true && this.isSetExpiryDate();
    boolean that_present_expiryDate = true && that.isSetExpiryDate();
    if (this_present_expiryDate || that_present_expiryDate) {
      if (!(this_present_expiryDate && that_present_expiryDate))
        return false;
      if (!this.expiryDate.equals(that.expiryDate))
        return false;
    }

    boolean this_present_price = true && this.isSetPrice();
    boolean that_present_price = true && that.isSetPrice();
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (!this.price.equals(that.price))
        return false;
    }

    boolean this_present_inventory = true && this.isSetInventory();
    boolean that_present_inventory = true && that.isSetInventory();
    if (this_present_inventory || that_present_inventory) {
      if (!(this_present_inventory && that_present_inventory))
        return false;
      if (!this.inventory.equals(that.inventory))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.hashCode();

    hashCode = hashCode * 8191 + ((isSetActivationDate()) ? 131071 : 524287);
    if (isSetActivationDate())
      hashCode = hashCode * 8191 + activationDate.hashCode();

    hashCode = hashCode * 8191 + ((isSetExpiryDate()) ? 131071 : 524287);
    if (isSetExpiryDate())
      hashCode = hashCode * 8191 + expiryDate.hashCode();

    hashCode = hashCode * 8191 + ((isSetPrice()) ? 131071 : 524287);
    if (isSetPrice())
      hashCode = hashCode * 8191 + price.hashCode();

    hashCode = hashCode * 8191 + ((isSetInventory()) ? 131071 : 524287);
    if (isSetInventory())
      hashCode = hashCode * 8191 + inventory.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TCommonValues other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetActivationDate()).compareTo(other.isSetActivationDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivationDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activationDate, other.activationDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExpiryDate()).compareTo(other.isSetExpiryDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpiryDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expiryDate, other.expiryDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPrice()).compareTo(other.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, other.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInventory()).compareTo(other.isSetInventory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInventory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inventory, other.inventory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TCommonValues(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("activationDate:");
    if (this.activationDate == null) {
      sb.append("null");
    } else {
      sb.append(this.activationDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("expiryDate:");
    if (this.expiryDate == null) {
      sb.append("null");
    } else {
      sb.append(this.expiryDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("price:");
    if (this.price == null) {
      sb.append("null");
    } else {
      sb.append(this.price);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("inventory:");
    if (this.inventory == null) {
      sb.append("null");
    } else {
      sb.append(this.inventory);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (price != null) {
      price.validate();
    }
    if (inventory != null) {
      inventory.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCommonValuesStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TCommonValuesStandardScheme getScheme() {
      return new TCommonValuesStandardScheme();
    }
  }

  private static class TCommonValuesStandardScheme extends org.apache.thrift.scheme.StandardScheme<TCommonValues> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCommonValues struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACTIVATION_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activationDate = iprot.readString();
              struct.setActivationDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXPIRY_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.expiryDate = iprot.readString();
              struct.setExpiryDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.price = new TPrice();
              struct.price.read(iprot);
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // INVENTORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.inventory = new TInventory();
              struct.inventory.read(iprot);
              struct.setInventoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCommonValues struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.activationDate != null) {
        oprot.writeFieldBegin(ACTIVATION_DATE_FIELD_DESC);
        oprot.writeString(struct.activationDate);
        oprot.writeFieldEnd();
      }
      if (struct.expiryDate != null) {
        oprot.writeFieldBegin(EXPIRY_DATE_FIELD_DESC);
        oprot.writeString(struct.expiryDate);
        oprot.writeFieldEnd();
      }
      if (struct.price != null) {
        oprot.writeFieldBegin(PRICE_FIELD_DESC);
        struct.price.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.inventory != null) {
        oprot.writeFieldBegin(INVENTORY_FIELD_DESC);
        struct.inventory.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCommonValuesTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TCommonValuesTupleScheme getScheme() {
      return new TCommonValuesTupleScheme();
    }
  }

  private static class TCommonValuesTupleScheme extends org.apache.thrift.scheme.TupleScheme<TCommonValues> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCommonValues struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetType()) {
        optionals.set(2);
      }
      if (struct.isSetActivationDate()) {
        optionals.set(3);
      }
      if (struct.isSetExpiryDate()) {
        optionals.set(4);
      }
      if (struct.isSetPrice()) {
        optionals.set(5);
      }
      if (struct.isSetInventory()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetActivationDate()) {
        oprot.writeString(struct.activationDate);
      }
      if (struct.isSetExpiryDate()) {
        oprot.writeString(struct.expiryDate);
      }
      if (struct.isSetPrice()) {
        struct.price.write(oprot);
      }
      if (struct.isSetInventory()) {
        struct.inventory.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCommonValues struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.activationDate = iprot.readString();
        struct.setActivationDateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.expiryDate = iprot.readString();
        struct.setExpiryDateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.price = new TPrice();
        struct.price.read(iprot);
        struct.setPriceIsSet(true);
      }
      if (incoming.get(6)) {
        struct.inventory = new TInventory();
        struct.inventory.read(iprot);
        struct.setInventoryIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

