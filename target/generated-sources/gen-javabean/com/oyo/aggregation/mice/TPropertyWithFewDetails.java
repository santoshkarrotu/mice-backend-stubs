/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.oyo.aggregation.mice;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * Home page cards
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-03-20")
public class TPropertyWithFewDetails implements org.apache.thrift.TBase<TPropertyWithFewDetails, TPropertyWithFewDetails._Fields>, java.io.Serializable, Cloneable, Comparable<TPropertyWithFewDetails> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPropertyWithFewDetails");

  private static final org.apache.thrift.protocol.TField COMMON_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("commonValues", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField RENTAL_ONLY_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("rentalOnlyPrice", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField RENTAL_PLUS_FOOD_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("rentalPlusFoodPrice", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TPropertyWithFewDetailsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TPropertyWithFewDetailsTupleSchemeFactory();

  private TCommonValues commonValues; // required
  private TPrice rentalOnlyPrice; // required
  private TPrice rentalPlusFoodPrice; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMMON_VALUES((short)1, "commonValues"),
    RENTAL_ONLY_PRICE((short)2, "rentalOnlyPrice"),
    RENTAL_PLUS_FOOD_PRICE((short)3, "rentalPlusFoodPrice");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMMON_VALUES
          return COMMON_VALUES;
        case 2: // RENTAL_ONLY_PRICE
          return RENTAL_ONLY_PRICE;
        case 3: // RENTAL_PLUS_FOOD_PRICE
          return RENTAL_PLUS_FOOD_PRICE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMMON_VALUES, new org.apache.thrift.meta_data.FieldMetaData("commonValues", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCommonValues.class)));
    tmpMap.put(_Fields.RENTAL_ONLY_PRICE, new org.apache.thrift.meta_data.FieldMetaData("rentalOnlyPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPrice.class)));
    tmpMap.put(_Fields.RENTAL_PLUS_FOOD_PRICE, new org.apache.thrift.meta_data.FieldMetaData("rentalPlusFoodPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPrice.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPropertyWithFewDetails.class, metaDataMap);
  }

  public TPropertyWithFewDetails() {
  }

  public TPropertyWithFewDetails(
    TCommonValues commonValues,
    TPrice rentalOnlyPrice,
    TPrice rentalPlusFoodPrice)
  {
    this();
    this.commonValues = commonValues;
    this.rentalOnlyPrice = rentalOnlyPrice;
    this.rentalPlusFoodPrice = rentalPlusFoodPrice;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPropertyWithFewDetails(TPropertyWithFewDetails other) {
    if (other.isSetCommonValues()) {
      this.commonValues = new TCommonValues(other.commonValues);
    }
    if (other.isSetRentalOnlyPrice()) {
      this.rentalOnlyPrice = new TPrice(other.rentalOnlyPrice);
    }
    if (other.isSetRentalPlusFoodPrice()) {
      this.rentalPlusFoodPrice = new TPrice(other.rentalPlusFoodPrice);
    }
  }

  public TPropertyWithFewDetails deepCopy() {
    return new TPropertyWithFewDetails(this);
  }

  @Override
  public void clear() {
    this.commonValues = null;
    this.rentalOnlyPrice = null;
    this.rentalPlusFoodPrice = null;
  }

  public TCommonValues getCommonValues() {
    return this.commonValues;
  }

  public void setCommonValues(TCommonValues commonValues) {
    this.commonValues = commonValues;
  }

  public void unsetCommonValues() {
    this.commonValues = null;
  }

  /** Returns true if field commonValues is set (has been assigned a value) and false otherwise */
  public boolean isSetCommonValues() {
    return this.commonValues != null;
  }

  public void setCommonValuesIsSet(boolean value) {
    if (!value) {
      this.commonValues = null;
    }
  }

  public TPrice getRentalOnlyPrice() {
    return this.rentalOnlyPrice;
  }

  public void setRentalOnlyPrice(TPrice rentalOnlyPrice) {
    this.rentalOnlyPrice = rentalOnlyPrice;
  }

  public void unsetRentalOnlyPrice() {
    this.rentalOnlyPrice = null;
  }

  /** Returns true if field rentalOnlyPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetRentalOnlyPrice() {
    return this.rentalOnlyPrice != null;
  }

  public void setRentalOnlyPriceIsSet(boolean value) {
    if (!value) {
      this.rentalOnlyPrice = null;
    }
  }

  public TPrice getRentalPlusFoodPrice() {
    return this.rentalPlusFoodPrice;
  }

  public void setRentalPlusFoodPrice(TPrice rentalPlusFoodPrice) {
    this.rentalPlusFoodPrice = rentalPlusFoodPrice;
  }

  public void unsetRentalPlusFoodPrice() {
    this.rentalPlusFoodPrice = null;
  }

  /** Returns true if field rentalPlusFoodPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetRentalPlusFoodPrice() {
    return this.rentalPlusFoodPrice != null;
  }

  public void setRentalPlusFoodPriceIsSet(boolean value) {
    if (!value) {
      this.rentalPlusFoodPrice = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case COMMON_VALUES:
      if (value == null) {
        unsetCommonValues();
      } else {
        setCommonValues((TCommonValues)value);
      }
      break;

    case RENTAL_ONLY_PRICE:
      if (value == null) {
        unsetRentalOnlyPrice();
      } else {
        setRentalOnlyPrice((TPrice)value);
      }
      break;

    case RENTAL_PLUS_FOOD_PRICE:
      if (value == null) {
        unsetRentalPlusFoodPrice();
      } else {
        setRentalPlusFoodPrice((TPrice)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case COMMON_VALUES:
      return getCommonValues();

    case RENTAL_ONLY_PRICE:
      return getRentalOnlyPrice();

    case RENTAL_PLUS_FOOD_PRICE:
      return getRentalPlusFoodPrice();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case COMMON_VALUES:
      return isSetCommonValues();
    case RENTAL_ONLY_PRICE:
      return isSetRentalOnlyPrice();
    case RENTAL_PLUS_FOOD_PRICE:
      return isSetRentalPlusFoodPrice();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TPropertyWithFewDetails)
      return this.equals((TPropertyWithFewDetails)that);
    return false;
  }

  public boolean equals(TPropertyWithFewDetails that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_commonValues = true && this.isSetCommonValues();
    boolean that_present_commonValues = true && that.isSetCommonValues();
    if (this_present_commonValues || that_present_commonValues) {
      if (!(this_present_commonValues && that_present_commonValues))
        return false;
      if (!this.commonValues.equals(that.commonValues))
        return false;
    }

    boolean this_present_rentalOnlyPrice = true && this.isSetRentalOnlyPrice();
    boolean that_present_rentalOnlyPrice = true && that.isSetRentalOnlyPrice();
    if (this_present_rentalOnlyPrice || that_present_rentalOnlyPrice) {
      if (!(this_present_rentalOnlyPrice && that_present_rentalOnlyPrice))
        return false;
      if (!this.rentalOnlyPrice.equals(that.rentalOnlyPrice))
        return false;
    }

    boolean this_present_rentalPlusFoodPrice = true && this.isSetRentalPlusFoodPrice();
    boolean that_present_rentalPlusFoodPrice = true && that.isSetRentalPlusFoodPrice();
    if (this_present_rentalPlusFoodPrice || that_present_rentalPlusFoodPrice) {
      if (!(this_present_rentalPlusFoodPrice && that_present_rentalPlusFoodPrice))
        return false;
      if (!this.rentalPlusFoodPrice.equals(that.rentalPlusFoodPrice))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCommonValues()) ? 131071 : 524287);
    if (isSetCommonValues())
      hashCode = hashCode * 8191 + commonValues.hashCode();

    hashCode = hashCode * 8191 + ((isSetRentalOnlyPrice()) ? 131071 : 524287);
    if (isSetRentalOnlyPrice())
      hashCode = hashCode * 8191 + rentalOnlyPrice.hashCode();

    hashCode = hashCode * 8191 + ((isSetRentalPlusFoodPrice()) ? 131071 : 524287);
    if (isSetRentalPlusFoodPrice())
      hashCode = hashCode * 8191 + rentalPlusFoodPrice.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TPropertyWithFewDetails other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetCommonValues()).compareTo(other.isSetCommonValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommonValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonValues, other.commonValues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRentalOnlyPrice()).compareTo(other.isSetRentalOnlyPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRentalOnlyPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rentalOnlyPrice, other.rentalOnlyPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRentalPlusFoodPrice()).compareTo(other.isSetRentalPlusFoodPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRentalPlusFoodPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rentalPlusFoodPrice, other.rentalPlusFoodPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TPropertyWithFewDetails(");
    boolean first = true;

    sb.append("commonValues:");
    if (this.commonValues == null) {
      sb.append("null");
    } else {
      sb.append(this.commonValues);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rentalOnlyPrice:");
    if (this.rentalOnlyPrice == null) {
      sb.append("null");
    } else {
      sb.append(this.rentalOnlyPrice);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rentalPlusFoodPrice:");
    if (this.rentalPlusFoodPrice == null) {
      sb.append("null");
    } else {
      sb.append(this.rentalPlusFoodPrice);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (commonValues != null) {
      commonValues.validate();
    }
    if (rentalOnlyPrice != null) {
      rentalOnlyPrice.validate();
    }
    if (rentalPlusFoodPrice != null) {
      rentalPlusFoodPrice.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPropertyWithFewDetailsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TPropertyWithFewDetailsStandardScheme getScheme() {
      return new TPropertyWithFewDetailsStandardScheme();
    }
  }

  private static class TPropertyWithFewDetailsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TPropertyWithFewDetails> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPropertyWithFewDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMMON_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.commonValues = new TCommonValues();
              struct.commonValues.read(iprot);
              struct.setCommonValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RENTAL_ONLY_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.rentalOnlyPrice = new TPrice();
              struct.rentalOnlyPrice.read(iprot);
              struct.setRentalOnlyPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RENTAL_PLUS_FOOD_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.rentalPlusFoodPrice = new TPrice();
              struct.rentalPlusFoodPrice.read(iprot);
              struct.setRentalPlusFoodPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPropertyWithFewDetails struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.commonValues != null) {
        oprot.writeFieldBegin(COMMON_VALUES_FIELD_DESC);
        struct.commonValues.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.rentalOnlyPrice != null) {
        oprot.writeFieldBegin(RENTAL_ONLY_PRICE_FIELD_DESC);
        struct.rentalOnlyPrice.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.rentalPlusFoodPrice != null) {
        oprot.writeFieldBegin(RENTAL_PLUS_FOOD_PRICE_FIELD_DESC);
        struct.rentalPlusFoodPrice.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPropertyWithFewDetailsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TPropertyWithFewDetailsTupleScheme getScheme() {
      return new TPropertyWithFewDetailsTupleScheme();
    }
  }

  private static class TPropertyWithFewDetailsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TPropertyWithFewDetails> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPropertyWithFewDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCommonValues()) {
        optionals.set(0);
      }
      if (struct.isSetRentalOnlyPrice()) {
        optionals.set(1);
      }
      if (struct.isSetRentalPlusFoodPrice()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetCommonValues()) {
        struct.commonValues.write(oprot);
      }
      if (struct.isSetRentalOnlyPrice()) {
        struct.rentalOnlyPrice.write(oprot);
      }
      if (struct.isSetRentalPlusFoodPrice()) {
        struct.rentalPlusFoodPrice.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPropertyWithFewDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.commonValues = new TCommonValues();
        struct.commonValues.read(iprot);
        struct.setCommonValuesIsSet(true);
      }
      if (incoming.get(1)) {
        struct.rentalOnlyPrice = new TPrice();
        struct.rentalOnlyPrice.read(iprot);
        struct.setRentalOnlyPriceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.rentalPlusFoodPrice = new TPrice();
        struct.rentalPlusFoodPrice.read(iprot);
        struct.setRentalPlusFoodPriceIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

