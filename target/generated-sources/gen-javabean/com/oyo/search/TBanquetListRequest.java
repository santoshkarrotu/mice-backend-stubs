/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.oyo.search;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-03-20")
public class TBanquetListRequest implements org.apache.thrift.TBase<TBanquetListRequest, TBanquetListRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TBanquetListRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TBanquetListRequest");

  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_OF_EVENT_FIELD_DESC = new org.apache.thrift.protocol.TField("typeOfEvent", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NO_OF_GUESTS_FIELD_DESC = new org.apache.thrift.protocol.TField("noOfGuests", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("dateTime", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField RENTAL_ONLY_FIELD_DESC = new org.apache.thrift.protocol.TField("rentalOnly", org.apache.thrift.protocol.TType.BOOL, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TBanquetListRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TBanquetListRequestTupleSchemeFactory();

  private java.lang.String location; // required
  private java.lang.String typeOfEvent; // required
  private int noOfGuests; // optional
  private java.lang.String dateTime; // required
  private boolean rentalOnly; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOCATION((short)1, "location"),
    TYPE_OF_EVENT((short)2, "typeOfEvent"),
    NO_OF_GUESTS((short)3, "noOfGuests"),
    DATE_TIME((short)4, "dateTime"),
    RENTAL_ONLY((short)5, "rentalOnly");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOCATION
          return LOCATION;
        case 2: // TYPE_OF_EVENT
          return TYPE_OF_EVENT;
        case 3: // NO_OF_GUESTS
          return NO_OF_GUESTS;
        case 4: // DATE_TIME
          return DATE_TIME;
        case 5: // RENTAL_ONLY
          return RENTAL_ONLY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NOOFGUESTS_ISSET_ID = 0;
  private static final int __RENTALONLY_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NO_OF_GUESTS,_Fields.RENTAL_ONLY};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE_OF_EVENT, new org.apache.thrift.meta_data.FieldMetaData("typeOfEvent", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NO_OF_GUESTS, new org.apache.thrift.meta_data.FieldMetaData("noOfGuests", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("dateTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "dateTime")));
    tmpMap.put(_Fields.RENTAL_ONLY, new org.apache.thrift.meta_data.FieldMetaData("rentalOnly", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TBanquetListRequest.class, metaDataMap);
  }

  public TBanquetListRequest() {
  }

  public TBanquetListRequest(
    java.lang.String location,
    java.lang.String typeOfEvent,
    java.lang.String dateTime)
  {
    this();
    this.location = location;
    this.typeOfEvent = typeOfEvent;
    this.dateTime = dateTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TBanquetListRequest(TBanquetListRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetLocation()) {
      this.location = other.location;
    }
    if (other.isSetTypeOfEvent()) {
      this.typeOfEvent = other.typeOfEvent;
    }
    this.noOfGuests = other.noOfGuests;
    if (other.isSetDateTime()) {
      this.dateTime = other.dateTime;
    }
    this.rentalOnly = other.rentalOnly;
  }

  public TBanquetListRequest deepCopy() {
    return new TBanquetListRequest(this);
  }

  @Override
  public void clear() {
    this.location = null;
    this.typeOfEvent = null;
    setNoOfGuestsIsSet(false);
    this.noOfGuests = 0;
    this.dateTime = null;
    setRentalOnlyIsSet(false);
    this.rentalOnly = false;
  }

  public java.lang.String getLocation() {
    return this.location;
  }

  public void setLocation(java.lang.String location) {
    this.location = location;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  public java.lang.String getTypeOfEvent() {
    return this.typeOfEvent;
  }

  public void setTypeOfEvent(java.lang.String typeOfEvent) {
    this.typeOfEvent = typeOfEvent;
  }

  public void unsetTypeOfEvent() {
    this.typeOfEvent = null;
  }

  /** Returns true if field typeOfEvent is set (has been assigned a value) and false otherwise */
  public boolean isSetTypeOfEvent() {
    return this.typeOfEvent != null;
  }

  public void setTypeOfEventIsSet(boolean value) {
    if (!value) {
      this.typeOfEvent = null;
    }
  }

  public int getNoOfGuests() {
    return this.noOfGuests;
  }

  public void setNoOfGuests(int noOfGuests) {
    this.noOfGuests = noOfGuests;
    setNoOfGuestsIsSet(true);
  }

  public void unsetNoOfGuests() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NOOFGUESTS_ISSET_ID);
  }

  /** Returns true if field noOfGuests is set (has been assigned a value) and false otherwise */
  public boolean isSetNoOfGuests() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NOOFGUESTS_ISSET_ID);
  }

  public void setNoOfGuestsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NOOFGUESTS_ISSET_ID, value);
  }

  public java.lang.String getDateTime() {
    return this.dateTime;
  }

  public void setDateTime(java.lang.String dateTime) {
    this.dateTime = dateTime;
  }

  public void unsetDateTime() {
    this.dateTime = null;
  }

  /** Returns true if field dateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetDateTime() {
    return this.dateTime != null;
  }

  public void setDateTimeIsSet(boolean value) {
    if (!value) {
      this.dateTime = null;
    }
  }

  public boolean isRentalOnly() {
    return this.rentalOnly;
  }

  public void setRentalOnly(boolean rentalOnly) {
    this.rentalOnly = rentalOnly;
    setRentalOnlyIsSet(true);
  }

  public void unsetRentalOnly() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RENTALONLY_ISSET_ID);
  }

  /** Returns true if field rentalOnly is set (has been assigned a value) and false otherwise */
  public boolean isSetRentalOnly() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RENTALONLY_ISSET_ID);
  }

  public void setRentalOnlyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RENTALONLY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((java.lang.String)value);
      }
      break;

    case TYPE_OF_EVENT:
      if (value == null) {
        unsetTypeOfEvent();
      } else {
        setTypeOfEvent((java.lang.String)value);
      }
      break;

    case NO_OF_GUESTS:
      if (value == null) {
        unsetNoOfGuests();
      } else {
        setNoOfGuests((java.lang.Integer)value);
      }
      break;

    case DATE_TIME:
      if (value == null) {
        unsetDateTime();
      } else {
        setDateTime((java.lang.String)value);
      }
      break;

    case RENTAL_ONLY:
      if (value == null) {
        unsetRentalOnly();
      } else {
        setRentalOnly((java.lang.Boolean)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case LOCATION:
      return getLocation();

    case TYPE_OF_EVENT:
      return getTypeOfEvent();

    case NO_OF_GUESTS:
      return getNoOfGuests();

    case DATE_TIME:
      return getDateTime();

    case RENTAL_ONLY:
      return isRentalOnly();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case LOCATION:
      return isSetLocation();
    case TYPE_OF_EVENT:
      return isSetTypeOfEvent();
    case NO_OF_GUESTS:
      return isSetNoOfGuests();
    case DATE_TIME:
      return isSetDateTime();
    case RENTAL_ONLY:
      return isSetRentalOnly();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TBanquetListRequest)
      return this.equals((TBanquetListRequest)that);
    return false;
  }

  public boolean equals(TBanquetListRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    boolean this_present_typeOfEvent = true && this.isSetTypeOfEvent();
    boolean that_present_typeOfEvent = true && that.isSetTypeOfEvent();
    if (this_present_typeOfEvent || that_present_typeOfEvent) {
      if (!(this_present_typeOfEvent && that_present_typeOfEvent))
        return false;
      if (!this.typeOfEvent.equals(that.typeOfEvent))
        return false;
    }

    boolean this_present_noOfGuests = true && this.isSetNoOfGuests();
    boolean that_present_noOfGuests = true && that.isSetNoOfGuests();
    if (this_present_noOfGuests || that_present_noOfGuests) {
      if (!(this_present_noOfGuests && that_present_noOfGuests))
        return false;
      if (this.noOfGuests != that.noOfGuests)
        return false;
    }

    boolean this_present_dateTime = true && this.isSetDateTime();
    boolean that_present_dateTime = true && that.isSetDateTime();
    if (this_present_dateTime || that_present_dateTime) {
      if (!(this_present_dateTime && that_present_dateTime))
        return false;
      if (!this.dateTime.equals(that.dateTime))
        return false;
    }

    boolean this_present_rentalOnly = true && this.isSetRentalOnly();
    boolean that_present_rentalOnly = true && that.isSetRentalOnly();
    if (this_present_rentalOnly || that_present_rentalOnly) {
      if (!(this_present_rentalOnly && that_present_rentalOnly))
        return false;
      if (this.rentalOnly != that.rentalOnly)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetLocation()) ? 131071 : 524287);
    if (isSetLocation())
      hashCode = hashCode * 8191 + location.hashCode();

    hashCode = hashCode * 8191 + ((isSetTypeOfEvent()) ? 131071 : 524287);
    if (isSetTypeOfEvent())
      hashCode = hashCode * 8191 + typeOfEvent.hashCode();

    hashCode = hashCode * 8191 + ((isSetNoOfGuests()) ? 131071 : 524287);
    if (isSetNoOfGuests())
      hashCode = hashCode * 8191 + noOfGuests;

    hashCode = hashCode * 8191 + ((isSetDateTime()) ? 131071 : 524287);
    if (isSetDateTime())
      hashCode = hashCode * 8191 + dateTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetRentalOnly()) ? 131071 : 524287);
    if (isSetRentalOnly())
      hashCode = hashCode * 8191 + ((rentalOnly) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TBanquetListRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetLocation()).compareTo(other.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, other.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTypeOfEvent()).compareTo(other.isSetTypeOfEvent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTypeOfEvent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeOfEvent, other.typeOfEvent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNoOfGuests()).compareTo(other.isSetNoOfGuests());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoOfGuests()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noOfGuests, other.noOfGuests);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDateTime()).compareTo(other.isSetDateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateTime, other.dateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRentalOnly()).compareTo(other.isSetRentalOnly());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRentalOnly()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rentalOnly, other.rentalOnly);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TBanquetListRequest(");
    boolean first = true;

    sb.append("location:");
    if (this.location == null) {
      sb.append("null");
    } else {
      sb.append(this.location);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("typeOfEvent:");
    if (this.typeOfEvent == null) {
      sb.append("null");
    } else {
      sb.append(this.typeOfEvent);
    }
    first = false;
    if (isSetNoOfGuests()) {
      if (!first) sb.append(", ");
      sb.append("noOfGuests:");
      sb.append(this.noOfGuests);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("dateTime:");
    if (this.dateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.dateTime);
    }
    first = false;
    if (isSetRentalOnly()) {
      if (!first) sb.append(", ");
      sb.append("rentalOnly:");
      sb.append(this.rentalOnly);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetLocation()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'location' is unset! Struct:" + toString());
    }

    if (!isSetTypeOfEvent()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'typeOfEvent' is unset! Struct:" + toString());
    }

    if (!isSetDateTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'dateTime' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TBanquetListRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TBanquetListRequestStandardScheme getScheme() {
      return new TBanquetListRequestStandardScheme();
    }
  }

  private static class TBanquetListRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<TBanquetListRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TBanquetListRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.location = iprot.readString();
              struct.setLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE_OF_EVENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.typeOfEvent = iprot.readString();
              struct.setTypeOfEventIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NO_OF_GUESTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.noOfGuests = iprot.readI32();
              struct.setNoOfGuestsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dateTime = iprot.readString();
              struct.setDateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RENTAL_ONLY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.rentalOnly = iprot.readBool();
              struct.setRentalOnlyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TBanquetListRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.location != null) {
        oprot.writeFieldBegin(LOCATION_FIELD_DESC);
        oprot.writeString(struct.location);
        oprot.writeFieldEnd();
      }
      if (struct.typeOfEvent != null) {
        oprot.writeFieldBegin(TYPE_OF_EVENT_FIELD_DESC);
        oprot.writeString(struct.typeOfEvent);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNoOfGuests()) {
        oprot.writeFieldBegin(NO_OF_GUESTS_FIELD_DESC);
        oprot.writeI32(struct.noOfGuests);
        oprot.writeFieldEnd();
      }
      if (struct.dateTime != null) {
        oprot.writeFieldBegin(DATE_TIME_FIELD_DESC);
        oprot.writeString(struct.dateTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRentalOnly()) {
        oprot.writeFieldBegin(RENTAL_ONLY_FIELD_DESC);
        oprot.writeBool(struct.rentalOnly);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TBanquetListRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TBanquetListRequestTupleScheme getScheme() {
      return new TBanquetListRequestTupleScheme();
    }
  }

  private static class TBanquetListRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<TBanquetListRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TBanquetListRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.location);
      oprot.writeString(struct.typeOfEvent);
      oprot.writeString(struct.dateTime);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetNoOfGuests()) {
        optionals.set(0);
      }
      if (struct.isSetRentalOnly()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetNoOfGuests()) {
        oprot.writeI32(struct.noOfGuests);
      }
      if (struct.isSetRentalOnly()) {
        oprot.writeBool(struct.rentalOnly);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TBanquetListRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.location = iprot.readString();
      struct.setLocationIsSet(true);
      struct.typeOfEvent = iprot.readString();
      struct.setTypeOfEventIsSet(true);
      struct.dateTime = iprot.readString();
      struct.setDateTimeIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.noOfGuests = iprot.readI32();
        struct.setNoOfGuestsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.rentalOnly = iprot.readBool();
        struct.setRentalOnlyIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

