/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.oyo.metadata;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-03-14")
public class TMetaDataService {

  public interface Iface {

    public TPackageDestinationResponse getPackageDestination(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException;

    public java.util.List<TPackageDestinationResponse> listPackageDestinations(java.lang.String locale) throws org.apache.thrift.TException;

    public TPackageDestinationCUDResponse createPackageDestination(java.lang.String packageDestinationName, java.lang.String locale) throws org.apache.thrift.TException;

    public TPackageDurationResponse getPackageDuration(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException;

    public java.util.List<TPackageDurationResponse> listPackageDurations(java.lang.String locale) throws org.apache.thrift.TException;

    public TPackageDurationCUDResponse createPackageDuration(java.lang.String packageDuration, java.lang.String locale) throws org.apache.thrift.TException;

    public TMonthResponse getMonth(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException;

    public java.util.List<TMonthResponse> listMonths(java.lang.String locale) throws org.apache.thrift.TException;

    public java.util.List<TBlogResponse> listBlogs(java.lang.String locale) throws org.apache.thrift.TException;

    public java.util.List<TUserStoryResponse> listUserStories(java.lang.String locale) throws org.apache.thrift.TException;

    public TPackageInclusionResponse getPackageInclusion(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException;

    public java.util.List<TPackageInclusionResponse> listPackageInclusions(java.lang.String locale) throws org.apache.thrift.TException;

    public TPackageInclusionCUDResponse createPackageInclusion(java.lang.String inclusion, java.lang.String locale) throws org.apache.thrift.TException;

    public TPackageExclusionResponse getPackageExclusion(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException;

    public java.util.List<TPackageExclusionResponse> listPackageExclusions(java.lang.String locale) throws org.apache.thrift.TException;

    public TPackageExclusionCUDResponse createPackageExclusion(java.lang.String exclusion, java.lang.String locale) throws org.apache.thrift.TException;

    public TRestrictionResponse getRestriction(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException;

    public java.util.List<TRestrictionResponse> listRestrictions(java.lang.String locale) throws org.apache.thrift.TException;

    public TRestrictionCUDResponse createRestriction(java.lang.String restriction, java.lang.String locale) throws org.apache.thrift.TException;

    public TAmenityResponse getAmenity(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException;

    public java.util.List<TAmenityResponse> listAmenity(java.lang.String locale) throws org.apache.thrift.TException;

    public TAmenityCUDResponse createAmenity(java.lang.String amenity, java.lang.String locale) throws org.apache.thrift.TException;

    public TPackageTagResponse getPackageTag(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException;

    public java.util.List<TPackageTagResponse> listPackageTags(java.lang.String locale) throws org.apache.thrift.TException;

    public TPackageTagCUDResponse createPackageTag(java.lang.String packageTag, java.lang.String locale) throws org.apache.thrift.TException;

    public THotelCategoryResponse getHotelCategory(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException;

    public java.util.List<THotelCategoryResponse> listHotelCategories(java.lang.String locale) throws org.apache.thrift.TException;

    public THotelCategoryCUDResponse createHotelCategory(java.lang.String hotelCategory, java.lang.String locale) throws org.apache.thrift.TException;

    public TRoomCategoryResponse getRoomCategory(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException;

    public java.util.List<TRoomCategoryResponse> listRoomCategories(java.lang.String locale) throws org.apache.thrift.TException;

    public TRoomCategoryCUDResponse createRoomCategory(java.lang.String roomCategory, java.lang.String locale) throws org.apache.thrift.TException;

    public TMiceTagResponse getMiceTag(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException;

    public java.util.List<TMiceTagResponse> listMiceTags(java.lang.String locale) throws org.apache.thrift.TException;

    public TMiceTagCUDResponse createMiceTag(java.lang.String miceTag, java.lang.String locale) throws org.apache.thrift.TException;

    public TMiceEventResponse getMiceEvent(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException;

    public java.util.List<TMiceEventResponse> listMiceEvents(java.lang.String locale) throws org.apache.thrift.TException;

    public TMiceEventCUDResponse createMiceEvent(java.lang.String miceEventName, java.lang.String locale) throws org.apache.thrift.TException;

    public TMiceCityResponse getMiceCity(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException;

    public java.util.List<TMiceCityResponse> listMiceCities(java.lang.String locale) throws org.apache.thrift.TException;

    public TMiceCityCUDResponse createMiceCity(java.lang.String miceCityName, java.lang.String locale) throws org.apache.thrift.TException;

    public TPropertyLevelResponse getPropertyLevel(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException;

    public java.util.List<TPropertyLevelResponse> listPropertyLevel(java.lang.String locale) throws org.apache.thrift.TException;

    public TPropertyLevelResponse createPropertyLevel(TPropertyLevel propertyLevelData, java.lang.String locale) throws org.apache.thrift.TException;

    public TToiletConfigurationResponse getToiletConfiguration(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException;

    public java.util.List<TToiletConfigurationResponse> listToiletConfiguration(java.lang.String locale) throws org.apache.thrift.TException;

    public TToiletConfigurationResponse createToilet(TToiletConfigurationResponse toiletData, java.lang.String locale) throws org.apache.thrift.TException;

    public TPaymentPolicyResponse getPaymentPolicy(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException;

    public java.util.List<TPaymentPolicyResponse> listPaymentPolicies(java.lang.String locale) throws org.apache.thrift.TException;

    public TPaymentPolicyCUDResponse createPaymentPolicy(java.lang.String description, java.util.Map<java.lang.String,java.lang.String> rule, java.lang.String locale) throws org.apache.thrift.TException;

    public TCancellationPolicyResponse getCancellationPolicy(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException;

    public java.util.List<TCancellationPolicyResponse> listCancellationPolicies(java.lang.String locale) throws org.apache.thrift.TException;

    public TCancellationPolicyCUDResponse createCancellationPolicy(java.lang.String description, java.util.Map<java.lang.String,java.lang.String> rule, java.lang.String locale) throws org.apache.thrift.TException;

    public java.util.List<THotSellingPackageResponse> listHotSellingPackage(java.lang.String locale) throws org.apache.thrift.TException;

    public THotSellingPackageResponse createHotSellingPackage(java.lang.String catalogId, java.lang.String locale) throws org.apache.thrift.TException;

    public java.util.List<TPopularPackageResponse> listPopularPackages(java.lang.String locale) throws org.apache.thrift.TException;

    public TPopularPackageResponse createPopularPackage(java.lang.String catalogId, java.lang.String locale) throws org.apache.thrift.TException;

    public java.util.List<TOtherRecommendedPackageResponse> listOtherRecommendedPackages(java.lang.String locale) throws org.apache.thrift.TException;

    public TOtherRecommendedPackageResponse createOtherRecommendedPackage(java.lang.String catalogId, java.lang.String locale) throws org.apache.thrift.TException;

    public java.util.List<TOtherDestinationToExploreResponse> listOtherDestinationsToExplore(java.lang.String locale) throws org.apache.thrift.TException;

    public TOtherDestinationToExploreResponse createOtherDestinationToExplore(java.lang.String catalogId, java.lang.String locale) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getPackageDestination(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPackageDestinationResponse> resultHandler) throws org.apache.thrift.TException;

    public void listPackageDestinations(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPackageDestinationResponse>> resultHandler) throws org.apache.thrift.TException;

    public void createPackageDestination(java.lang.String packageDestinationName, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPackageDestinationCUDResponse> resultHandler) throws org.apache.thrift.TException;

    public void getPackageDuration(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPackageDurationResponse> resultHandler) throws org.apache.thrift.TException;

    public void listPackageDurations(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPackageDurationResponse>> resultHandler) throws org.apache.thrift.TException;

    public void createPackageDuration(java.lang.String packageDuration, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPackageDurationCUDResponse> resultHandler) throws org.apache.thrift.TException;

    public void getMonth(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TMonthResponse> resultHandler) throws org.apache.thrift.TException;

    public void listMonths(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TMonthResponse>> resultHandler) throws org.apache.thrift.TException;

    public void listBlogs(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TBlogResponse>> resultHandler) throws org.apache.thrift.TException;

    public void listUserStories(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TUserStoryResponse>> resultHandler) throws org.apache.thrift.TException;

    public void getPackageInclusion(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPackageInclusionResponse> resultHandler) throws org.apache.thrift.TException;

    public void listPackageInclusions(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPackageInclusionResponse>> resultHandler) throws org.apache.thrift.TException;

    public void createPackageInclusion(java.lang.String inclusion, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPackageInclusionCUDResponse> resultHandler) throws org.apache.thrift.TException;

    public void getPackageExclusion(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPackageExclusionResponse> resultHandler) throws org.apache.thrift.TException;

    public void listPackageExclusions(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPackageExclusionResponse>> resultHandler) throws org.apache.thrift.TException;

    public void createPackageExclusion(java.lang.String exclusion, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPackageExclusionCUDResponse> resultHandler) throws org.apache.thrift.TException;

    public void getRestriction(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TRestrictionResponse> resultHandler) throws org.apache.thrift.TException;

    public void listRestrictions(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TRestrictionResponse>> resultHandler) throws org.apache.thrift.TException;

    public void createRestriction(java.lang.String restriction, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TRestrictionCUDResponse> resultHandler) throws org.apache.thrift.TException;

    public void getAmenity(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TAmenityResponse> resultHandler) throws org.apache.thrift.TException;

    public void listAmenity(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TAmenityResponse>> resultHandler) throws org.apache.thrift.TException;

    public void createAmenity(java.lang.String amenity, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TAmenityCUDResponse> resultHandler) throws org.apache.thrift.TException;

    public void getPackageTag(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPackageTagResponse> resultHandler) throws org.apache.thrift.TException;

    public void listPackageTags(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPackageTagResponse>> resultHandler) throws org.apache.thrift.TException;

    public void createPackageTag(java.lang.String packageTag, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPackageTagCUDResponse> resultHandler) throws org.apache.thrift.TException;

    public void getHotelCategory(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<THotelCategoryResponse> resultHandler) throws org.apache.thrift.TException;

    public void listHotelCategories(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<THotelCategoryResponse>> resultHandler) throws org.apache.thrift.TException;

    public void createHotelCategory(java.lang.String hotelCategory, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<THotelCategoryCUDResponse> resultHandler) throws org.apache.thrift.TException;

    public void getRoomCategory(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TRoomCategoryResponse> resultHandler) throws org.apache.thrift.TException;

    public void listRoomCategories(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TRoomCategoryResponse>> resultHandler) throws org.apache.thrift.TException;

    public void createRoomCategory(java.lang.String roomCategory, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TRoomCategoryCUDResponse> resultHandler) throws org.apache.thrift.TException;

    public void getMiceTag(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TMiceTagResponse> resultHandler) throws org.apache.thrift.TException;

    public void listMiceTags(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TMiceTagResponse>> resultHandler) throws org.apache.thrift.TException;

    public void createMiceTag(java.lang.String miceTag, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TMiceTagCUDResponse> resultHandler) throws org.apache.thrift.TException;

    public void getMiceEvent(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TMiceEventResponse> resultHandler) throws org.apache.thrift.TException;

    public void listMiceEvents(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TMiceEventResponse>> resultHandler) throws org.apache.thrift.TException;

    public void createMiceEvent(java.lang.String miceEventName, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TMiceEventCUDResponse> resultHandler) throws org.apache.thrift.TException;

    public void getMiceCity(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TMiceCityResponse> resultHandler) throws org.apache.thrift.TException;

    public void listMiceCities(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TMiceCityResponse>> resultHandler) throws org.apache.thrift.TException;

    public void createMiceCity(java.lang.String miceCityName, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TMiceCityCUDResponse> resultHandler) throws org.apache.thrift.TException;

    public void getPropertyLevel(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPropertyLevelResponse> resultHandler) throws org.apache.thrift.TException;

    public void listPropertyLevel(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPropertyLevelResponse>> resultHandler) throws org.apache.thrift.TException;

    public void createPropertyLevel(TPropertyLevel propertyLevelData, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPropertyLevelResponse> resultHandler) throws org.apache.thrift.TException;

    public void getToiletConfiguration(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TToiletConfigurationResponse> resultHandler) throws org.apache.thrift.TException;

    public void listToiletConfiguration(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TToiletConfigurationResponse>> resultHandler) throws org.apache.thrift.TException;

    public void createToilet(TToiletConfigurationResponse toiletData, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TToiletConfigurationResponse> resultHandler) throws org.apache.thrift.TException;

    public void getPaymentPolicy(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPaymentPolicyResponse> resultHandler) throws org.apache.thrift.TException;

    public void listPaymentPolicies(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPaymentPolicyResponse>> resultHandler) throws org.apache.thrift.TException;

    public void createPaymentPolicy(java.lang.String description, java.util.Map<java.lang.String,java.lang.String> rule, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPaymentPolicyCUDResponse> resultHandler) throws org.apache.thrift.TException;

    public void getCancellationPolicy(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TCancellationPolicyResponse> resultHandler) throws org.apache.thrift.TException;

    public void listCancellationPolicies(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TCancellationPolicyResponse>> resultHandler) throws org.apache.thrift.TException;

    public void createCancellationPolicy(java.lang.String description, java.util.Map<java.lang.String,java.lang.String> rule, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TCancellationPolicyCUDResponse> resultHandler) throws org.apache.thrift.TException;

    public void listHotSellingPackage(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<THotSellingPackageResponse>> resultHandler) throws org.apache.thrift.TException;

    public void createHotSellingPackage(java.lang.String catalogId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<THotSellingPackageResponse> resultHandler) throws org.apache.thrift.TException;

    public void listPopularPackages(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPopularPackageResponse>> resultHandler) throws org.apache.thrift.TException;

    public void createPopularPackage(java.lang.String catalogId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPopularPackageResponse> resultHandler) throws org.apache.thrift.TException;

    public void listOtherRecommendedPackages(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TOtherRecommendedPackageResponse>> resultHandler) throws org.apache.thrift.TException;

    public void createOtherRecommendedPackage(java.lang.String catalogId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TOtherRecommendedPackageResponse> resultHandler) throws org.apache.thrift.TException;

    public void listOtherDestinationsToExplore(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TOtherDestinationToExploreResponse>> resultHandler) throws org.apache.thrift.TException;

    public void createOtherDestinationToExplore(java.lang.String catalogId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TOtherDestinationToExploreResponse> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public TPackageDestinationResponse getPackageDestination(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException
    {
      send_getPackageDestination(metadataId, locale);
      return recv_getPackageDestination();
    }

    public void send_getPackageDestination(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException
    {
      getPackageDestination_args args = new getPackageDestination_args();
      args.setMetadataId(metadataId);
      args.setLocale(locale);
      sendBase("getPackageDestination", args);
    }

    public TPackageDestinationResponse recv_getPackageDestination() throws org.apache.thrift.TException
    {
      getPackageDestination_result result = new getPackageDestination_result();
      receiveBase(result, "getPackageDestination");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPackageDestination failed: unknown result");
    }

    public java.util.List<TPackageDestinationResponse> listPackageDestinations(java.lang.String locale) throws org.apache.thrift.TException
    {
      send_listPackageDestinations(locale);
      return recv_listPackageDestinations();
    }

    public void send_listPackageDestinations(java.lang.String locale) throws org.apache.thrift.TException
    {
      listPackageDestinations_args args = new listPackageDestinations_args();
      args.setLocale(locale);
      sendBase("listPackageDestinations", args);
    }

    public java.util.List<TPackageDestinationResponse> recv_listPackageDestinations() throws org.apache.thrift.TException
    {
      listPackageDestinations_result result = new listPackageDestinations_result();
      receiveBase(result, "listPackageDestinations");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listPackageDestinations failed: unknown result");
    }

    public TPackageDestinationCUDResponse createPackageDestination(java.lang.String packageDestinationName, java.lang.String locale) throws org.apache.thrift.TException
    {
      send_createPackageDestination(packageDestinationName, locale);
      return recv_createPackageDestination();
    }

    public void send_createPackageDestination(java.lang.String packageDestinationName, java.lang.String locale) throws org.apache.thrift.TException
    {
      createPackageDestination_args args = new createPackageDestination_args();
      args.setPackageDestinationName(packageDestinationName);
      args.setLocale(locale);
      sendBase("createPackageDestination", args);
    }

    public TPackageDestinationCUDResponse recv_createPackageDestination() throws org.apache.thrift.TException
    {
      createPackageDestination_result result = new createPackageDestination_result();
      receiveBase(result, "createPackageDestination");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createPackageDestination failed: unknown result");
    }

    public TPackageDurationResponse getPackageDuration(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException
    {
      send_getPackageDuration(metadataId, locale);
      return recv_getPackageDuration();
    }

    public void send_getPackageDuration(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException
    {
      getPackageDuration_args args = new getPackageDuration_args();
      args.setMetadataId(metadataId);
      args.setLocale(locale);
      sendBase("getPackageDuration", args);
    }

    public TPackageDurationResponse recv_getPackageDuration() throws org.apache.thrift.TException
    {
      getPackageDuration_result result = new getPackageDuration_result();
      receiveBase(result, "getPackageDuration");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPackageDuration failed: unknown result");
    }

    public java.util.List<TPackageDurationResponse> listPackageDurations(java.lang.String locale) throws org.apache.thrift.TException
    {
      send_listPackageDurations(locale);
      return recv_listPackageDurations();
    }

    public void send_listPackageDurations(java.lang.String locale) throws org.apache.thrift.TException
    {
      listPackageDurations_args args = new listPackageDurations_args();
      args.setLocale(locale);
      sendBase("listPackageDurations", args);
    }

    public java.util.List<TPackageDurationResponse> recv_listPackageDurations() throws org.apache.thrift.TException
    {
      listPackageDurations_result result = new listPackageDurations_result();
      receiveBase(result, "listPackageDurations");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listPackageDurations failed: unknown result");
    }

    public TPackageDurationCUDResponse createPackageDuration(java.lang.String packageDuration, java.lang.String locale) throws org.apache.thrift.TException
    {
      send_createPackageDuration(packageDuration, locale);
      return recv_createPackageDuration();
    }

    public void send_createPackageDuration(java.lang.String packageDuration, java.lang.String locale) throws org.apache.thrift.TException
    {
      createPackageDuration_args args = new createPackageDuration_args();
      args.setPackageDuration(packageDuration);
      args.setLocale(locale);
      sendBase("createPackageDuration", args);
    }

    public TPackageDurationCUDResponse recv_createPackageDuration() throws org.apache.thrift.TException
    {
      createPackageDuration_result result = new createPackageDuration_result();
      receiveBase(result, "createPackageDuration");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createPackageDuration failed: unknown result");
    }

    public TMonthResponse getMonth(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException
    {
      send_getMonth(metadataId, locale);
      return recv_getMonth();
    }

    public void send_getMonth(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException
    {
      getMonth_args args = new getMonth_args();
      args.setMetadataId(metadataId);
      args.setLocale(locale);
      sendBase("getMonth", args);
    }

    public TMonthResponse recv_getMonth() throws org.apache.thrift.TException
    {
      getMonth_result result = new getMonth_result();
      receiveBase(result, "getMonth");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMonth failed: unknown result");
    }

    public java.util.List<TMonthResponse> listMonths(java.lang.String locale) throws org.apache.thrift.TException
    {
      send_listMonths(locale);
      return recv_listMonths();
    }

    public void send_listMonths(java.lang.String locale) throws org.apache.thrift.TException
    {
      listMonths_args args = new listMonths_args();
      args.setLocale(locale);
      sendBase("listMonths", args);
    }

    public java.util.List<TMonthResponse> recv_listMonths() throws org.apache.thrift.TException
    {
      listMonths_result result = new listMonths_result();
      receiveBase(result, "listMonths");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listMonths failed: unknown result");
    }

    public java.util.List<TBlogResponse> listBlogs(java.lang.String locale) throws org.apache.thrift.TException
    {
      send_listBlogs(locale);
      return recv_listBlogs();
    }

    public void send_listBlogs(java.lang.String locale) throws org.apache.thrift.TException
    {
      listBlogs_args args = new listBlogs_args();
      args.setLocale(locale);
      sendBase("listBlogs", args);
    }

    public java.util.List<TBlogResponse> recv_listBlogs() throws org.apache.thrift.TException
    {
      listBlogs_result result = new listBlogs_result();
      receiveBase(result, "listBlogs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listBlogs failed: unknown result");
    }

    public java.util.List<TUserStoryResponse> listUserStories(java.lang.String locale) throws org.apache.thrift.TException
    {
      send_listUserStories(locale);
      return recv_listUserStories();
    }

    public void send_listUserStories(java.lang.String locale) throws org.apache.thrift.TException
    {
      listUserStories_args args = new listUserStories_args();
      args.setLocale(locale);
      sendBase("listUserStories", args);
    }

    public java.util.List<TUserStoryResponse> recv_listUserStories() throws org.apache.thrift.TException
    {
      listUserStories_result result = new listUserStories_result();
      receiveBase(result, "listUserStories");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listUserStories failed: unknown result");
    }

    public TPackageInclusionResponse getPackageInclusion(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException
    {
      send_getPackageInclusion(metadataId, locale);
      return recv_getPackageInclusion();
    }

    public void send_getPackageInclusion(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException
    {
      getPackageInclusion_args args = new getPackageInclusion_args();
      args.setMetadataId(metadataId);
      args.setLocale(locale);
      sendBase("getPackageInclusion", args);
    }

    public TPackageInclusionResponse recv_getPackageInclusion() throws org.apache.thrift.TException
    {
      getPackageInclusion_result result = new getPackageInclusion_result();
      receiveBase(result, "getPackageInclusion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPackageInclusion failed: unknown result");
    }

    public java.util.List<TPackageInclusionResponse> listPackageInclusions(java.lang.String locale) throws org.apache.thrift.TException
    {
      send_listPackageInclusions(locale);
      return recv_listPackageInclusions();
    }

    public void send_listPackageInclusions(java.lang.String locale) throws org.apache.thrift.TException
    {
      listPackageInclusions_args args = new listPackageInclusions_args();
      args.setLocale(locale);
      sendBase("listPackageInclusions", args);
    }

    public java.util.List<TPackageInclusionResponse> recv_listPackageInclusions() throws org.apache.thrift.TException
    {
      listPackageInclusions_result result = new listPackageInclusions_result();
      receiveBase(result, "listPackageInclusions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listPackageInclusions failed: unknown result");
    }

    public TPackageInclusionCUDResponse createPackageInclusion(java.lang.String inclusion, java.lang.String locale) throws org.apache.thrift.TException
    {
      send_createPackageInclusion(inclusion, locale);
      return recv_createPackageInclusion();
    }

    public void send_createPackageInclusion(java.lang.String inclusion, java.lang.String locale) throws org.apache.thrift.TException
    {
      createPackageInclusion_args args = new createPackageInclusion_args();
      args.setInclusion(inclusion);
      args.setLocale(locale);
      sendBase("createPackageInclusion", args);
    }

    public TPackageInclusionCUDResponse recv_createPackageInclusion() throws org.apache.thrift.TException
    {
      createPackageInclusion_result result = new createPackageInclusion_result();
      receiveBase(result, "createPackageInclusion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createPackageInclusion failed: unknown result");
    }

    public TPackageExclusionResponse getPackageExclusion(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException
    {
      send_getPackageExclusion(metadataId, locale);
      return recv_getPackageExclusion();
    }

    public void send_getPackageExclusion(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException
    {
      getPackageExclusion_args args = new getPackageExclusion_args();
      args.setMetadataId(metadataId);
      args.setLocale(locale);
      sendBase("getPackageExclusion", args);
    }

    public TPackageExclusionResponse recv_getPackageExclusion() throws org.apache.thrift.TException
    {
      getPackageExclusion_result result = new getPackageExclusion_result();
      receiveBase(result, "getPackageExclusion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPackageExclusion failed: unknown result");
    }

    public java.util.List<TPackageExclusionResponse> listPackageExclusions(java.lang.String locale) throws org.apache.thrift.TException
    {
      send_listPackageExclusions(locale);
      return recv_listPackageExclusions();
    }

    public void send_listPackageExclusions(java.lang.String locale) throws org.apache.thrift.TException
    {
      listPackageExclusions_args args = new listPackageExclusions_args();
      args.setLocale(locale);
      sendBase("listPackageExclusions", args);
    }

    public java.util.List<TPackageExclusionResponse> recv_listPackageExclusions() throws org.apache.thrift.TException
    {
      listPackageExclusions_result result = new listPackageExclusions_result();
      receiveBase(result, "listPackageExclusions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listPackageExclusions failed: unknown result");
    }

    public TPackageExclusionCUDResponse createPackageExclusion(java.lang.String exclusion, java.lang.String locale) throws org.apache.thrift.TException
    {
      send_createPackageExclusion(exclusion, locale);
      return recv_createPackageExclusion();
    }

    public void send_createPackageExclusion(java.lang.String exclusion, java.lang.String locale) throws org.apache.thrift.TException
    {
      createPackageExclusion_args args = new createPackageExclusion_args();
      args.setExclusion(exclusion);
      args.setLocale(locale);
      sendBase("createPackageExclusion", args);
    }

    public TPackageExclusionCUDResponse recv_createPackageExclusion() throws org.apache.thrift.TException
    {
      createPackageExclusion_result result = new createPackageExclusion_result();
      receiveBase(result, "createPackageExclusion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createPackageExclusion failed: unknown result");
    }

    public TRestrictionResponse getRestriction(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException
    {
      send_getRestriction(metadataId, locale);
      return recv_getRestriction();
    }

    public void send_getRestriction(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException
    {
      getRestriction_args args = new getRestriction_args();
      args.setMetadataId(metadataId);
      args.setLocale(locale);
      sendBase("getRestriction", args);
    }

    public TRestrictionResponse recv_getRestriction() throws org.apache.thrift.TException
    {
      getRestriction_result result = new getRestriction_result();
      receiveBase(result, "getRestriction");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRestriction failed: unknown result");
    }

    public java.util.List<TRestrictionResponse> listRestrictions(java.lang.String locale) throws org.apache.thrift.TException
    {
      send_listRestrictions(locale);
      return recv_listRestrictions();
    }

    public void send_listRestrictions(java.lang.String locale) throws org.apache.thrift.TException
    {
      listRestrictions_args args = new listRestrictions_args();
      args.setLocale(locale);
      sendBase("listRestrictions", args);
    }

    public java.util.List<TRestrictionResponse> recv_listRestrictions() throws org.apache.thrift.TException
    {
      listRestrictions_result result = new listRestrictions_result();
      receiveBase(result, "listRestrictions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listRestrictions failed: unknown result");
    }

    public TRestrictionCUDResponse createRestriction(java.lang.String restriction, java.lang.String locale) throws org.apache.thrift.TException
    {
      send_createRestriction(restriction, locale);
      return recv_createRestriction();
    }

    public void send_createRestriction(java.lang.String restriction, java.lang.String locale) throws org.apache.thrift.TException
    {
      createRestriction_args args = new createRestriction_args();
      args.setRestriction(restriction);
      args.setLocale(locale);
      sendBase("createRestriction", args);
    }

    public TRestrictionCUDResponse recv_createRestriction() throws org.apache.thrift.TException
    {
      createRestriction_result result = new createRestriction_result();
      receiveBase(result, "createRestriction");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createRestriction failed: unknown result");
    }

    public TAmenityResponse getAmenity(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException
    {
      send_getAmenity(metadataId, locale);
      return recv_getAmenity();
    }

    public void send_getAmenity(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException
    {
      getAmenity_args args = new getAmenity_args();
      args.setMetadataId(metadataId);
      args.setLocale(locale);
      sendBase("getAmenity", args);
    }

    public TAmenityResponse recv_getAmenity() throws org.apache.thrift.TException
    {
      getAmenity_result result = new getAmenity_result();
      receiveBase(result, "getAmenity");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAmenity failed: unknown result");
    }

    public java.util.List<TAmenityResponse> listAmenity(java.lang.String locale) throws org.apache.thrift.TException
    {
      send_listAmenity(locale);
      return recv_listAmenity();
    }

    public void send_listAmenity(java.lang.String locale) throws org.apache.thrift.TException
    {
      listAmenity_args args = new listAmenity_args();
      args.setLocale(locale);
      sendBase("listAmenity", args);
    }

    public java.util.List<TAmenityResponse> recv_listAmenity() throws org.apache.thrift.TException
    {
      listAmenity_result result = new listAmenity_result();
      receiveBase(result, "listAmenity");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listAmenity failed: unknown result");
    }

    public TAmenityCUDResponse createAmenity(java.lang.String amenity, java.lang.String locale) throws org.apache.thrift.TException
    {
      send_createAmenity(amenity, locale);
      return recv_createAmenity();
    }

    public void send_createAmenity(java.lang.String amenity, java.lang.String locale) throws org.apache.thrift.TException
    {
      createAmenity_args args = new createAmenity_args();
      args.setAmenity(amenity);
      args.setLocale(locale);
      sendBase("createAmenity", args);
    }

    public TAmenityCUDResponse recv_createAmenity() throws org.apache.thrift.TException
    {
      createAmenity_result result = new createAmenity_result();
      receiveBase(result, "createAmenity");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createAmenity failed: unknown result");
    }

    public TPackageTagResponse getPackageTag(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException
    {
      send_getPackageTag(metadataId, locale);
      return recv_getPackageTag();
    }

    public void send_getPackageTag(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException
    {
      getPackageTag_args args = new getPackageTag_args();
      args.setMetadataId(metadataId);
      args.setLocale(locale);
      sendBase("getPackageTag", args);
    }

    public TPackageTagResponse recv_getPackageTag() throws org.apache.thrift.TException
    {
      getPackageTag_result result = new getPackageTag_result();
      receiveBase(result, "getPackageTag");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPackageTag failed: unknown result");
    }

    public java.util.List<TPackageTagResponse> listPackageTags(java.lang.String locale) throws org.apache.thrift.TException
    {
      send_listPackageTags(locale);
      return recv_listPackageTags();
    }

    public void send_listPackageTags(java.lang.String locale) throws org.apache.thrift.TException
    {
      listPackageTags_args args = new listPackageTags_args();
      args.setLocale(locale);
      sendBase("listPackageTags", args);
    }

    public java.util.List<TPackageTagResponse> recv_listPackageTags() throws org.apache.thrift.TException
    {
      listPackageTags_result result = new listPackageTags_result();
      receiveBase(result, "listPackageTags");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listPackageTags failed: unknown result");
    }

    public TPackageTagCUDResponse createPackageTag(java.lang.String packageTag, java.lang.String locale) throws org.apache.thrift.TException
    {
      send_createPackageTag(packageTag, locale);
      return recv_createPackageTag();
    }

    public void send_createPackageTag(java.lang.String packageTag, java.lang.String locale) throws org.apache.thrift.TException
    {
      createPackageTag_args args = new createPackageTag_args();
      args.setPackageTag(packageTag);
      args.setLocale(locale);
      sendBase("createPackageTag", args);
    }

    public TPackageTagCUDResponse recv_createPackageTag() throws org.apache.thrift.TException
    {
      createPackageTag_result result = new createPackageTag_result();
      receiveBase(result, "createPackageTag");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createPackageTag failed: unknown result");
    }

    public THotelCategoryResponse getHotelCategory(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException
    {
      send_getHotelCategory(metadataId, locale);
      return recv_getHotelCategory();
    }

    public void send_getHotelCategory(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException
    {
      getHotelCategory_args args = new getHotelCategory_args();
      args.setMetadataId(metadataId);
      args.setLocale(locale);
      sendBase("getHotelCategory", args);
    }

    public THotelCategoryResponse recv_getHotelCategory() throws org.apache.thrift.TException
    {
      getHotelCategory_result result = new getHotelCategory_result();
      receiveBase(result, "getHotelCategory");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHotelCategory failed: unknown result");
    }

    public java.util.List<THotelCategoryResponse> listHotelCategories(java.lang.String locale) throws org.apache.thrift.TException
    {
      send_listHotelCategories(locale);
      return recv_listHotelCategories();
    }

    public void send_listHotelCategories(java.lang.String locale) throws org.apache.thrift.TException
    {
      listHotelCategories_args args = new listHotelCategories_args();
      args.setLocale(locale);
      sendBase("listHotelCategories", args);
    }

    public java.util.List<THotelCategoryResponse> recv_listHotelCategories() throws org.apache.thrift.TException
    {
      listHotelCategories_result result = new listHotelCategories_result();
      receiveBase(result, "listHotelCategories");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listHotelCategories failed: unknown result");
    }

    public THotelCategoryCUDResponse createHotelCategory(java.lang.String hotelCategory, java.lang.String locale) throws org.apache.thrift.TException
    {
      send_createHotelCategory(hotelCategory, locale);
      return recv_createHotelCategory();
    }

    public void send_createHotelCategory(java.lang.String hotelCategory, java.lang.String locale) throws org.apache.thrift.TException
    {
      createHotelCategory_args args = new createHotelCategory_args();
      args.setHotelCategory(hotelCategory);
      args.setLocale(locale);
      sendBase("createHotelCategory", args);
    }

    public THotelCategoryCUDResponse recv_createHotelCategory() throws org.apache.thrift.TException
    {
      createHotelCategory_result result = new createHotelCategory_result();
      receiveBase(result, "createHotelCategory");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createHotelCategory failed: unknown result");
    }

    public TRoomCategoryResponse getRoomCategory(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException
    {
      send_getRoomCategory(metadataId, locale);
      return recv_getRoomCategory();
    }

    public void send_getRoomCategory(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException
    {
      getRoomCategory_args args = new getRoomCategory_args();
      args.setMetadataId(metadataId);
      args.setLocale(locale);
      sendBase("getRoomCategory", args);
    }

    public TRoomCategoryResponse recv_getRoomCategory() throws org.apache.thrift.TException
    {
      getRoomCategory_result result = new getRoomCategory_result();
      receiveBase(result, "getRoomCategory");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRoomCategory failed: unknown result");
    }

    public java.util.List<TRoomCategoryResponse> listRoomCategories(java.lang.String locale) throws org.apache.thrift.TException
    {
      send_listRoomCategories(locale);
      return recv_listRoomCategories();
    }

    public void send_listRoomCategories(java.lang.String locale) throws org.apache.thrift.TException
    {
      listRoomCategories_args args = new listRoomCategories_args();
      args.setLocale(locale);
      sendBase("listRoomCategories", args);
    }

    public java.util.List<TRoomCategoryResponse> recv_listRoomCategories() throws org.apache.thrift.TException
    {
      listRoomCategories_result result = new listRoomCategories_result();
      receiveBase(result, "listRoomCategories");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listRoomCategories failed: unknown result");
    }

    public TRoomCategoryCUDResponse createRoomCategory(java.lang.String roomCategory, java.lang.String locale) throws org.apache.thrift.TException
    {
      send_createRoomCategory(roomCategory, locale);
      return recv_createRoomCategory();
    }

    public void send_createRoomCategory(java.lang.String roomCategory, java.lang.String locale) throws org.apache.thrift.TException
    {
      createRoomCategory_args args = new createRoomCategory_args();
      args.setRoomCategory(roomCategory);
      args.setLocale(locale);
      sendBase("createRoomCategory", args);
    }

    public TRoomCategoryCUDResponse recv_createRoomCategory() throws org.apache.thrift.TException
    {
      createRoomCategory_result result = new createRoomCategory_result();
      receiveBase(result, "createRoomCategory");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createRoomCategory failed: unknown result");
    }

    public TMiceTagResponse getMiceTag(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException
    {
      send_getMiceTag(metadataId, locale);
      return recv_getMiceTag();
    }

    public void send_getMiceTag(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException
    {
      getMiceTag_args args = new getMiceTag_args();
      args.setMetadataId(metadataId);
      args.setLocale(locale);
      sendBase("getMiceTag", args);
    }

    public TMiceTagResponse recv_getMiceTag() throws org.apache.thrift.TException
    {
      getMiceTag_result result = new getMiceTag_result();
      receiveBase(result, "getMiceTag");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMiceTag failed: unknown result");
    }

    public java.util.List<TMiceTagResponse> listMiceTags(java.lang.String locale) throws org.apache.thrift.TException
    {
      send_listMiceTags(locale);
      return recv_listMiceTags();
    }

    public void send_listMiceTags(java.lang.String locale) throws org.apache.thrift.TException
    {
      listMiceTags_args args = new listMiceTags_args();
      args.setLocale(locale);
      sendBase("listMiceTags", args);
    }

    public java.util.List<TMiceTagResponse> recv_listMiceTags() throws org.apache.thrift.TException
    {
      listMiceTags_result result = new listMiceTags_result();
      receiveBase(result, "listMiceTags");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listMiceTags failed: unknown result");
    }

    public TMiceTagCUDResponse createMiceTag(java.lang.String miceTag, java.lang.String locale) throws org.apache.thrift.TException
    {
      send_createMiceTag(miceTag, locale);
      return recv_createMiceTag();
    }

    public void send_createMiceTag(java.lang.String miceTag, java.lang.String locale) throws org.apache.thrift.TException
    {
      createMiceTag_args args = new createMiceTag_args();
      args.setMiceTag(miceTag);
      args.setLocale(locale);
      sendBase("createMiceTag", args);
    }

    public TMiceTagCUDResponse recv_createMiceTag() throws org.apache.thrift.TException
    {
      createMiceTag_result result = new createMiceTag_result();
      receiveBase(result, "createMiceTag");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createMiceTag failed: unknown result");
    }

    public TMiceEventResponse getMiceEvent(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException
    {
      send_getMiceEvent(metadataId, locale);
      return recv_getMiceEvent();
    }

    public void send_getMiceEvent(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException
    {
      getMiceEvent_args args = new getMiceEvent_args();
      args.setMetadataId(metadataId);
      args.setLocale(locale);
      sendBase("getMiceEvent", args);
    }

    public TMiceEventResponse recv_getMiceEvent() throws org.apache.thrift.TException
    {
      getMiceEvent_result result = new getMiceEvent_result();
      receiveBase(result, "getMiceEvent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMiceEvent failed: unknown result");
    }

    public java.util.List<TMiceEventResponse> listMiceEvents(java.lang.String locale) throws org.apache.thrift.TException
    {
      send_listMiceEvents(locale);
      return recv_listMiceEvents();
    }

    public void send_listMiceEvents(java.lang.String locale) throws org.apache.thrift.TException
    {
      listMiceEvents_args args = new listMiceEvents_args();
      args.setLocale(locale);
      sendBase("listMiceEvents", args);
    }

    public java.util.List<TMiceEventResponse> recv_listMiceEvents() throws org.apache.thrift.TException
    {
      listMiceEvents_result result = new listMiceEvents_result();
      receiveBase(result, "listMiceEvents");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listMiceEvents failed: unknown result");
    }

    public TMiceEventCUDResponse createMiceEvent(java.lang.String miceEventName, java.lang.String locale) throws org.apache.thrift.TException
    {
      send_createMiceEvent(miceEventName, locale);
      return recv_createMiceEvent();
    }

    public void send_createMiceEvent(java.lang.String miceEventName, java.lang.String locale) throws org.apache.thrift.TException
    {
      createMiceEvent_args args = new createMiceEvent_args();
      args.setMiceEventName(miceEventName);
      args.setLocale(locale);
      sendBase("createMiceEvent", args);
    }

    public TMiceEventCUDResponse recv_createMiceEvent() throws org.apache.thrift.TException
    {
      createMiceEvent_result result = new createMiceEvent_result();
      receiveBase(result, "createMiceEvent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createMiceEvent failed: unknown result");
    }

    public TMiceCityResponse getMiceCity(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException
    {
      send_getMiceCity(metadataId, locale);
      return recv_getMiceCity();
    }

    public void send_getMiceCity(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException
    {
      getMiceCity_args args = new getMiceCity_args();
      args.setMetadataId(metadataId);
      args.setLocale(locale);
      sendBase("getMiceCity", args);
    }

    public TMiceCityResponse recv_getMiceCity() throws org.apache.thrift.TException
    {
      getMiceCity_result result = new getMiceCity_result();
      receiveBase(result, "getMiceCity");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMiceCity failed: unknown result");
    }

    public java.util.List<TMiceCityResponse> listMiceCities(java.lang.String locale) throws org.apache.thrift.TException
    {
      send_listMiceCities(locale);
      return recv_listMiceCities();
    }

    public void send_listMiceCities(java.lang.String locale) throws org.apache.thrift.TException
    {
      listMiceCities_args args = new listMiceCities_args();
      args.setLocale(locale);
      sendBase("listMiceCities", args);
    }

    public java.util.List<TMiceCityResponse> recv_listMiceCities() throws org.apache.thrift.TException
    {
      listMiceCities_result result = new listMiceCities_result();
      receiveBase(result, "listMiceCities");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listMiceCities failed: unknown result");
    }

    public TMiceCityCUDResponse createMiceCity(java.lang.String miceCityName, java.lang.String locale) throws org.apache.thrift.TException
    {
      send_createMiceCity(miceCityName, locale);
      return recv_createMiceCity();
    }

    public void send_createMiceCity(java.lang.String miceCityName, java.lang.String locale) throws org.apache.thrift.TException
    {
      createMiceCity_args args = new createMiceCity_args();
      args.setMiceCityName(miceCityName);
      args.setLocale(locale);
      sendBase("createMiceCity", args);
    }

    public TMiceCityCUDResponse recv_createMiceCity() throws org.apache.thrift.TException
    {
      createMiceCity_result result = new createMiceCity_result();
      receiveBase(result, "createMiceCity");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createMiceCity failed: unknown result");
    }

    public TPropertyLevelResponse getPropertyLevel(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException
    {
      send_getPropertyLevel(metadataId, locale);
      return recv_getPropertyLevel();
    }

    public void send_getPropertyLevel(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException
    {
      getPropertyLevel_args args = new getPropertyLevel_args();
      args.setMetadataId(metadataId);
      args.setLocale(locale);
      sendBase("getPropertyLevel", args);
    }

    public TPropertyLevelResponse recv_getPropertyLevel() throws org.apache.thrift.TException
    {
      getPropertyLevel_result result = new getPropertyLevel_result();
      receiveBase(result, "getPropertyLevel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPropertyLevel failed: unknown result");
    }

    public java.util.List<TPropertyLevelResponse> listPropertyLevel(java.lang.String locale) throws org.apache.thrift.TException
    {
      send_listPropertyLevel(locale);
      return recv_listPropertyLevel();
    }

    public void send_listPropertyLevel(java.lang.String locale) throws org.apache.thrift.TException
    {
      listPropertyLevel_args args = new listPropertyLevel_args();
      args.setLocale(locale);
      sendBase("listPropertyLevel", args);
    }

    public java.util.List<TPropertyLevelResponse> recv_listPropertyLevel() throws org.apache.thrift.TException
    {
      listPropertyLevel_result result = new listPropertyLevel_result();
      receiveBase(result, "listPropertyLevel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listPropertyLevel failed: unknown result");
    }

    public TPropertyLevelResponse createPropertyLevel(TPropertyLevel propertyLevelData, java.lang.String locale) throws org.apache.thrift.TException
    {
      send_createPropertyLevel(propertyLevelData, locale);
      return recv_createPropertyLevel();
    }

    public void send_createPropertyLevel(TPropertyLevel propertyLevelData, java.lang.String locale) throws org.apache.thrift.TException
    {
      createPropertyLevel_args args = new createPropertyLevel_args();
      args.setPropertyLevelData(propertyLevelData);
      args.setLocale(locale);
      sendBase("createPropertyLevel", args);
    }

    public TPropertyLevelResponse recv_createPropertyLevel() throws org.apache.thrift.TException
    {
      createPropertyLevel_result result = new createPropertyLevel_result();
      receiveBase(result, "createPropertyLevel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createPropertyLevel failed: unknown result");
    }

    public TToiletConfigurationResponse getToiletConfiguration(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException
    {
      send_getToiletConfiguration(metadataId, locale);
      return recv_getToiletConfiguration();
    }

    public void send_getToiletConfiguration(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException
    {
      getToiletConfiguration_args args = new getToiletConfiguration_args();
      args.setMetadataId(metadataId);
      args.setLocale(locale);
      sendBase("getToiletConfiguration", args);
    }

    public TToiletConfigurationResponse recv_getToiletConfiguration() throws org.apache.thrift.TException
    {
      getToiletConfiguration_result result = new getToiletConfiguration_result();
      receiveBase(result, "getToiletConfiguration");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getToiletConfiguration failed: unknown result");
    }

    public java.util.List<TToiletConfigurationResponse> listToiletConfiguration(java.lang.String locale) throws org.apache.thrift.TException
    {
      send_listToiletConfiguration(locale);
      return recv_listToiletConfiguration();
    }

    public void send_listToiletConfiguration(java.lang.String locale) throws org.apache.thrift.TException
    {
      listToiletConfiguration_args args = new listToiletConfiguration_args();
      args.setLocale(locale);
      sendBase("listToiletConfiguration", args);
    }

    public java.util.List<TToiletConfigurationResponse> recv_listToiletConfiguration() throws org.apache.thrift.TException
    {
      listToiletConfiguration_result result = new listToiletConfiguration_result();
      receiveBase(result, "listToiletConfiguration");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listToiletConfiguration failed: unknown result");
    }

    public TToiletConfigurationResponse createToilet(TToiletConfigurationResponse toiletData, java.lang.String locale) throws org.apache.thrift.TException
    {
      send_createToilet(toiletData, locale);
      return recv_createToilet();
    }

    public void send_createToilet(TToiletConfigurationResponse toiletData, java.lang.String locale) throws org.apache.thrift.TException
    {
      createToilet_args args = new createToilet_args();
      args.setToiletData(toiletData);
      args.setLocale(locale);
      sendBase("createToilet", args);
    }

    public TToiletConfigurationResponse recv_createToilet() throws org.apache.thrift.TException
    {
      createToilet_result result = new createToilet_result();
      receiveBase(result, "createToilet");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createToilet failed: unknown result");
    }

    public TPaymentPolicyResponse getPaymentPolicy(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException
    {
      send_getPaymentPolicy(metadataId, locale);
      return recv_getPaymentPolicy();
    }

    public void send_getPaymentPolicy(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException
    {
      getPaymentPolicy_args args = new getPaymentPolicy_args();
      args.setMetadataId(metadataId);
      args.setLocale(locale);
      sendBase("getPaymentPolicy", args);
    }

    public TPaymentPolicyResponse recv_getPaymentPolicy() throws org.apache.thrift.TException
    {
      getPaymentPolicy_result result = new getPaymentPolicy_result();
      receiveBase(result, "getPaymentPolicy");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPaymentPolicy failed: unknown result");
    }

    public java.util.List<TPaymentPolicyResponse> listPaymentPolicies(java.lang.String locale) throws org.apache.thrift.TException
    {
      send_listPaymentPolicies(locale);
      return recv_listPaymentPolicies();
    }

    public void send_listPaymentPolicies(java.lang.String locale) throws org.apache.thrift.TException
    {
      listPaymentPolicies_args args = new listPaymentPolicies_args();
      args.setLocale(locale);
      sendBase("listPaymentPolicies", args);
    }

    public java.util.List<TPaymentPolicyResponse> recv_listPaymentPolicies() throws org.apache.thrift.TException
    {
      listPaymentPolicies_result result = new listPaymentPolicies_result();
      receiveBase(result, "listPaymentPolicies");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listPaymentPolicies failed: unknown result");
    }

    public TPaymentPolicyCUDResponse createPaymentPolicy(java.lang.String description, java.util.Map<java.lang.String,java.lang.String> rule, java.lang.String locale) throws org.apache.thrift.TException
    {
      send_createPaymentPolicy(description, rule, locale);
      return recv_createPaymentPolicy();
    }

    public void send_createPaymentPolicy(java.lang.String description, java.util.Map<java.lang.String,java.lang.String> rule, java.lang.String locale) throws org.apache.thrift.TException
    {
      createPaymentPolicy_args args = new createPaymentPolicy_args();
      args.setDescription(description);
      args.setRule(rule);
      args.setLocale(locale);
      sendBase("createPaymentPolicy", args);
    }

    public TPaymentPolicyCUDResponse recv_createPaymentPolicy() throws org.apache.thrift.TException
    {
      createPaymentPolicy_result result = new createPaymentPolicy_result();
      receiveBase(result, "createPaymentPolicy");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createPaymentPolicy failed: unknown result");
    }

    public TCancellationPolicyResponse getCancellationPolicy(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException
    {
      send_getCancellationPolicy(metadataId, locale);
      return recv_getCancellationPolicy();
    }

    public void send_getCancellationPolicy(java.lang.String metadataId, java.lang.String locale) throws org.apache.thrift.TException
    {
      getCancellationPolicy_args args = new getCancellationPolicy_args();
      args.setMetadataId(metadataId);
      args.setLocale(locale);
      sendBase("getCancellationPolicy", args);
    }

    public TCancellationPolicyResponse recv_getCancellationPolicy() throws org.apache.thrift.TException
    {
      getCancellationPolicy_result result = new getCancellationPolicy_result();
      receiveBase(result, "getCancellationPolicy");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCancellationPolicy failed: unknown result");
    }

    public java.util.List<TCancellationPolicyResponse> listCancellationPolicies(java.lang.String locale) throws org.apache.thrift.TException
    {
      send_listCancellationPolicies(locale);
      return recv_listCancellationPolicies();
    }

    public void send_listCancellationPolicies(java.lang.String locale) throws org.apache.thrift.TException
    {
      listCancellationPolicies_args args = new listCancellationPolicies_args();
      args.setLocale(locale);
      sendBase("listCancellationPolicies", args);
    }

    public java.util.List<TCancellationPolicyResponse> recv_listCancellationPolicies() throws org.apache.thrift.TException
    {
      listCancellationPolicies_result result = new listCancellationPolicies_result();
      receiveBase(result, "listCancellationPolicies");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listCancellationPolicies failed: unknown result");
    }

    public TCancellationPolicyCUDResponse createCancellationPolicy(java.lang.String description, java.util.Map<java.lang.String,java.lang.String> rule, java.lang.String locale) throws org.apache.thrift.TException
    {
      send_createCancellationPolicy(description, rule, locale);
      return recv_createCancellationPolicy();
    }

    public void send_createCancellationPolicy(java.lang.String description, java.util.Map<java.lang.String,java.lang.String> rule, java.lang.String locale) throws org.apache.thrift.TException
    {
      createCancellationPolicy_args args = new createCancellationPolicy_args();
      args.setDescription(description);
      args.setRule(rule);
      args.setLocale(locale);
      sendBase("createCancellationPolicy", args);
    }

    public TCancellationPolicyCUDResponse recv_createCancellationPolicy() throws org.apache.thrift.TException
    {
      createCancellationPolicy_result result = new createCancellationPolicy_result();
      receiveBase(result, "createCancellationPolicy");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createCancellationPolicy failed: unknown result");
    }

    public java.util.List<THotSellingPackageResponse> listHotSellingPackage(java.lang.String locale) throws org.apache.thrift.TException
    {
      send_listHotSellingPackage(locale);
      return recv_listHotSellingPackage();
    }

    public void send_listHotSellingPackage(java.lang.String locale) throws org.apache.thrift.TException
    {
      listHotSellingPackage_args args = new listHotSellingPackage_args();
      args.setLocale(locale);
      sendBase("listHotSellingPackage", args);
    }

    public java.util.List<THotSellingPackageResponse> recv_listHotSellingPackage() throws org.apache.thrift.TException
    {
      listHotSellingPackage_result result = new listHotSellingPackage_result();
      receiveBase(result, "listHotSellingPackage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listHotSellingPackage failed: unknown result");
    }

    public THotSellingPackageResponse createHotSellingPackage(java.lang.String catalogId, java.lang.String locale) throws org.apache.thrift.TException
    {
      send_createHotSellingPackage(catalogId, locale);
      return recv_createHotSellingPackage();
    }

    public void send_createHotSellingPackage(java.lang.String catalogId, java.lang.String locale) throws org.apache.thrift.TException
    {
      createHotSellingPackage_args args = new createHotSellingPackage_args();
      args.setCatalogId(catalogId);
      args.setLocale(locale);
      sendBase("createHotSellingPackage", args);
    }

    public THotSellingPackageResponse recv_createHotSellingPackage() throws org.apache.thrift.TException
    {
      createHotSellingPackage_result result = new createHotSellingPackage_result();
      receiveBase(result, "createHotSellingPackage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createHotSellingPackage failed: unknown result");
    }

    public java.util.List<TPopularPackageResponse> listPopularPackages(java.lang.String locale) throws org.apache.thrift.TException
    {
      send_listPopularPackages(locale);
      return recv_listPopularPackages();
    }

    public void send_listPopularPackages(java.lang.String locale) throws org.apache.thrift.TException
    {
      listPopularPackages_args args = new listPopularPackages_args();
      args.setLocale(locale);
      sendBase("listPopularPackages", args);
    }

    public java.util.List<TPopularPackageResponse> recv_listPopularPackages() throws org.apache.thrift.TException
    {
      listPopularPackages_result result = new listPopularPackages_result();
      receiveBase(result, "listPopularPackages");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listPopularPackages failed: unknown result");
    }

    public TPopularPackageResponse createPopularPackage(java.lang.String catalogId, java.lang.String locale) throws org.apache.thrift.TException
    {
      send_createPopularPackage(catalogId, locale);
      return recv_createPopularPackage();
    }

    public void send_createPopularPackage(java.lang.String catalogId, java.lang.String locale) throws org.apache.thrift.TException
    {
      createPopularPackage_args args = new createPopularPackage_args();
      args.setCatalogId(catalogId);
      args.setLocale(locale);
      sendBase("createPopularPackage", args);
    }

    public TPopularPackageResponse recv_createPopularPackage() throws org.apache.thrift.TException
    {
      createPopularPackage_result result = new createPopularPackage_result();
      receiveBase(result, "createPopularPackage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createPopularPackage failed: unknown result");
    }

    public java.util.List<TOtherRecommendedPackageResponse> listOtherRecommendedPackages(java.lang.String locale) throws org.apache.thrift.TException
    {
      send_listOtherRecommendedPackages(locale);
      return recv_listOtherRecommendedPackages();
    }

    public void send_listOtherRecommendedPackages(java.lang.String locale) throws org.apache.thrift.TException
    {
      listOtherRecommendedPackages_args args = new listOtherRecommendedPackages_args();
      args.setLocale(locale);
      sendBase("listOtherRecommendedPackages", args);
    }

    public java.util.List<TOtherRecommendedPackageResponse> recv_listOtherRecommendedPackages() throws org.apache.thrift.TException
    {
      listOtherRecommendedPackages_result result = new listOtherRecommendedPackages_result();
      receiveBase(result, "listOtherRecommendedPackages");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listOtherRecommendedPackages failed: unknown result");
    }

    public TOtherRecommendedPackageResponse createOtherRecommendedPackage(java.lang.String catalogId, java.lang.String locale) throws org.apache.thrift.TException
    {
      send_createOtherRecommendedPackage(catalogId, locale);
      return recv_createOtherRecommendedPackage();
    }

    public void send_createOtherRecommendedPackage(java.lang.String catalogId, java.lang.String locale) throws org.apache.thrift.TException
    {
      createOtherRecommendedPackage_args args = new createOtherRecommendedPackage_args();
      args.setCatalogId(catalogId);
      args.setLocale(locale);
      sendBase("createOtherRecommendedPackage", args);
    }

    public TOtherRecommendedPackageResponse recv_createOtherRecommendedPackage() throws org.apache.thrift.TException
    {
      createOtherRecommendedPackage_result result = new createOtherRecommendedPackage_result();
      receiveBase(result, "createOtherRecommendedPackage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createOtherRecommendedPackage failed: unknown result");
    }

    public java.util.List<TOtherDestinationToExploreResponse> listOtherDestinationsToExplore(java.lang.String locale) throws org.apache.thrift.TException
    {
      send_listOtherDestinationsToExplore(locale);
      return recv_listOtherDestinationsToExplore();
    }

    public void send_listOtherDestinationsToExplore(java.lang.String locale) throws org.apache.thrift.TException
    {
      listOtherDestinationsToExplore_args args = new listOtherDestinationsToExplore_args();
      args.setLocale(locale);
      sendBase("listOtherDestinationsToExplore", args);
    }

    public java.util.List<TOtherDestinationToExploreResponse> recv_listOtherDestinationsToExplore() throws org.apache.thrift.TException
    {
      listOtherDestinationsToExplore_result result = new listOtherDestinationsToExplore_result();
      receiveBase(result, "listOtherDestinationsToExplore");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listOtherDestinationsToExplore failed: unknown result");
    }

    public TOtherDestinationToExploreResponse createOtherDestinationToExplore(java.lang.String catalogId, java.lang.String locale) throws org.apache.thrift.TException
    {
      send_createOtherDestinationToExplore(catalogId, locale);
      return recv_createOtherDestinationToExplore();
    }

    public void send_createOtherDestinationToExplore(java.lang.String catalogId, java.lang.String locale) throws org.apache.thrift.TException
    {
      createOtherDestinationToExplore_args args = new createOtherDestinationToExplore_args();
      args.setCatalogId(catalogId);
      args.setLocale(locale);
      sendBase("createOtherDestinationToExplore", args);
    }

    public TOtherDestinationToExploreResponse recv_createOtherDestinationToExplore() throws org.apache.thrift.TException
    {
      createOtherDestinationToExplore_result result = new createOtherDestinationToExplore_result();
      receiveBase(result, "createOtherDestinationToExplore");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createOtherDestinationToExplore failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getPackageDestination(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPackageDestinationResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPackageDestination_call method_call = new getPackageDestination_call(metadataId, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPackageDestination_call extends org.apache.thrift.async.TAsyncMethodCall<TPackageDestinationResponse> {
      private java.lang.String metadataId;
      private java.lang.String locale;
      public getPackageDestination_call(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPackageDestinationResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.metadataId = metadataId;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPackageDestination", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPackageDestination_args args = new getPackageDestination_args();
        args.setMetadataId(metadataId);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TPackageDestinationResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPackageDestination();
      }
    }

    public void listPackageDestinations(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPackageDestinationResponse>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listPackageDestinations_call method_call = new listPackageDestinations_call(locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listPackageDestinations_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<TPackageDestinationResponse>> {
      private java.lang.String locale;
      public listPackageDestinations_call(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPackageDestinationResponse>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listPackageDestinations", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listPackageDestinations_args args = new listPackageDestinations_args();
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<TPackageDestinationResponse> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listPackageDestinations();
      }
    }

    public void createPackageDestination(java.lang.String packageDestinationName, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPackageDestinationCUDResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createPackageDestination_call method_call = new createPackageDestination_call(packageDestinationName, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createPackageDestination_call extends org.apache.thrift.async.TAsyncMethodCall<TPackageDestinationCUDResponse> {
      private java.lang.String packageDestinationName;
      private java.lang.String locale;
      public createPackageDestination_call(java.lang.String packageDestinationName, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPackageDestinationCUDResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.packageDestinationName = packageDestinationName;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createPackageDestination", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createPackageDestination_args args = new createPackageDestination_args();
        args.setPackageDestinationName(packageDestinationName);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TPackageDestinationCUDResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createPackageDestination();
      }
    }

    public void getPackageDuration(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPackageDurationResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPackageDuration_call method_call = new getPackageDuration_call(metadataId, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPackageDuration_call extends org.apache.thrift.async.TAsyncMethodCall<TPackageDurationResponse> {
      private java.lang.String metadataId;
      private java.lang.String locale;
      public getPackageDuration_call(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPackageDurationResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.metadataId = metadataId;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPackageDuration", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPackageDuration_args args = new getPackageDuration_args();
        args.setMetadataId(metadataId);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TPackageDurationResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPackageDuration();
      }
    }

    public void listPackageDurations(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPackageDurationResponse>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listPackageDurations_call method_call = new listPackageDurations_call(locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listPackageDurations_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<TPackageDurationResponse>> {
      private java.lang.String locale;
      public listPackageDurations_call(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPackageDurationResponse>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listPackageDurations", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listPackageDurations_args args = new listPackageDurations_args();
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<TPackageDurationResponse> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listPackageDurations();
      }
    }

    public void createPackageDuration(java.lang.String packageDuration, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPackageDurationCUDResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createPackageDuration_call method_call = new createPackageDuration_call(packageDuration, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createPackageDuration_call extends org.apache.thrift.async.TAsyncMethodCall<TPackageDurationCUDResponse> {
      private java.lang.String packageDuration;
      private java.lang.String locale;
      public createPackageDuration_call(java.lang.String packageDuration, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPackageDurationCUDResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.packageDuration = packageDuration;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createPackageDuration", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createPackageDuration_args args = new createPackageDuration_args();
        args.setPackageDuration(packageDuration);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TPackageDurationCUDResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createPackageDuration();
      }
    }

    public void getMonth(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TMonthResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMonth_call method_call = new getMonth_call(metadataId, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMonth_call extends org.apache.thrift.async.TAsyncMethodCall<TMonthResponse> {
      private java.lang.String metadataId;
      private java.lang.String locale;
      public getMonth_call(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TMonthResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.metadataId = metadataId;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMonth", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMonth_args args = new getMonth_args();
        args.setMetadataId(metadataId);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TMonthResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMonth();
      }
    }

    public void listMonths(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TMonthResponse>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listMonths_call method_call = new listMonths_call(locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listMonths_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<TMonthResponse>> {
      private java.lang.String locale;
      public listMonths_call(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TMonthResponse>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listMonths", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listMonths_args args = new listMonths_args();
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<TMonthResponse> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listMonths();
      }
    }

    public void listBlogs(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TBlogResponse>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listBlogs_call method_call = new listBlogs_call(locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listBlogs_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<TBlogResponse>> {
      private java.lang.String locale;
      public listBlogs_call(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TBlogResponse>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listBlogs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listBlogs_args args = new listBlogs_args();
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<TBlogResponse> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listBlogs();
      }
    }

    public void listUserStories(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TUserStoryResponse>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listUserStories_call method_call = new listUserStories_call(locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listUserStories_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<TUserStoryResponse>> {
      private java.lang.String locale;
      public listUserStories_call(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TUserStoryResponse>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listUserStories", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listUserStories_args args = new listUserStories_args();
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<TUserStoryResponse> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listUserStories();
      }
    }

    public void getPackageInclusion(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPackageInclusionResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPackageInclusion_call method_call = new getPackageInclusion_call(metadataId, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPackageInclusion_call extends org.apache.thrift.async.TAsyncMethodCall<TPackageInclusionResponse> {
      private java.lang.String metadataId;
      private java.lang.String locale;
      public getPackageInclusion_call(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPackageInclusionResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.metadataId = metadataId;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPackageInclusion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPackageInclusion_args args = new getPackageInclusion_args();
        args.setMetadataId(metadataId);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TPackageInclusionResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPackageInclusion();
      }
    }

    public void listPackageInclusions(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPackageInclusionResponse>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listPackageInclusions_call method_call = new listPackageInclusions_call(locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listPackageInclusions_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<TPackageInclusionResponse>> {
      private java.lang.String locale;
      public listPackageInclusions_call(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPackageInclusionResponse>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listPackageInclusions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listPackageInclusions_args args = new listPackageInclusions_args();
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<TPackageInclusionResponse> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listPackageInclusions();
      }
    }

    public void createPackageInclusion(java.lang.String inclusion, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPackageInclusionCUDResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createPackageInclusion_call method_call = new createPackageInclusion_call(inclusion, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createPackageInclusion_call extends org.apache.thrift.async.TAsyncMethodCall<TPackageInclusionCUDResponse> {
      private java.lang.String inclusion;
      private java.lang.String locale;
      public createPackageInclusion_call(java.lang.String inclusion, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPackageInclusionCUDResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.inclusion = inclusion;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createPackageInclusion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createPackageInclusion_args args = new createPackageInclusion_args();
        args.setInclusion(inclusion);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TPackageInclusionCUDResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createPackageInclusion();
      }
    }

    public void getPackageExclusion(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPackageExclusionResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPackageExclusion_call method_call = new getPackageExclusion_call(metadataId, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPackageExclusion_call extends org.apache.thrift.async.TAsyncMethodCall<TPackageExclusionResponse> {
      private java.lang.String metadataId;
      private java.lang.String locale;
      public getPackageExclusion_call(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPackageExclusionResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.metadataId = metadataId;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPackageExclusion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPackageExclusion_args args = new getPackageExclusion_args();
        args.setMetadataId(metadataId);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TPackageExclusionResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPackageExclusion();
      }
    }

    public void listPackageExclusions(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPackageExclusionResponse>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listPackageExclusions_call method_call = new listPackageExclusions_call(locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listPackageExclusions_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<TPackageExclusionResponse>> {
      private java.lang.String locale;
      public listPackageExclusions_call(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPackageExclusionResponse>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listPackageExclusions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listPackageExclusions_args args = new listPackageExclusions_args();
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<TPackageExclusionResponse> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listPackageExclusions();
      }
    }

    public void createPackageExclusion(java.lang.String exclusion, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPackageExclusionCUDResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createPackageExclusion_call method_call = new createPackageExclusion_call(exclusion, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createPackageExclusion_call extends org.apache.thrift.async.TAsyncMethodCall<TPackageExclusionCUDResponse> {
      private java.lang.String exclusion;
      private java.lang.String locale;
      public createPackageExclusion_call(java.lang.String exclusion, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPackageExclusionCUDResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.exclusion = exclusion;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createPackageExclusion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createPackageExclusion_args args = new createPackageExclusion_args();
        args.setExclusion(exclusion);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TPackageExclusionCUDResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createPackageExclusion();
      }
    }

    public void getRestriction(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TRestrictionResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRestriction_call method_call = new getRestriction_call(metadataId, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRestriction_call extends org.apache.thrift.async.TAsyncMethodCall<TRestrictionResponse> {
      private java.lang.String metadataId;
      private java.lang.String locale;
      public getRestriction_call(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TRestrictionResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.metadataId = metadataId;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRestriction", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRestriction_args args = new getRestriction_args();
        args.setMetadataId(metadataId);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TRestrictionResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRestriction();
      }
    }

    public void listRestrictions(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TRestrictionResponse>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listRestrictions_call method_call = new listRestrictions_call(locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listRestrictions_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<TRestrictionResponse>> {
      private java.lang.String locale;
      public listRestrictions_call(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TRestrictionResponse>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listRestrictions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listRestrictions_args args = new listRestrictions_args();
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<TRestrictionResponse> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listRestrictions();
      }
    }

    public void createRestriction(java.lang.String restriction, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TRestrictionCUDResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createRestriction_call method_call = new createRestriction_call(restriction, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createRestriction_call extends org.apache.thrift.async.TAsyncMethodCall<TRestrictionCUDResponse> {
      private java.lang.String restriction;
      private java.lang.String locale;
      public createRestriction_call(java.lang.String restriction, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TRestrictionCUDResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.restriction = restriction;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createRestriction", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createRestriction_args args = new createRestriction_args();
        args.setRestriction(restriction);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TRestrictionCUDResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createRestriction();
      }
    }

    public void getAmenity(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TAmenityResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAmenity_call method_call = new getAmenity_call(metadataId, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAmenity_call extends org.apache.thrift.async.TAsyncMethodCall<TAmenityResponse> {
      private java.lang.String metadataId;
      private java.lang.String locale;
      public getAmenity_call(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TAmenityResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.metadataId = metadataId;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAmenity", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAmenity_args args = new getAmenity_args();
        args.setMetadataId(metadataId);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TAmenityResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAmenity();
      }
    }

    public void listAmenity(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TAmenityResponse>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listAmenity_call method_call = new listAmenity_call(locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listAmenity_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<TAmenityResponse>> {
      private java.lang.String locale;
      public listAmenity_call(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TAmenityResponse>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listAmenity", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listAmenity_args args = new listAmenity_args();
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<TAmenityResponse> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listAmenity();
      }
    }

    public void createAmenity(java.lang.String amenity, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TAmenityCUDResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createAmenity_call method_call = new createAmenity_call(amenity, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createAmenity_call extends org.apache.thrift.async.TAsyncMethodCall<TAmenityCUDResponse> {
      private java.lang.String amenity;
      private java.lang.String locale;
      public createAmenity_call(java.lang.String amenity, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TAmenityCUDResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.amenity = amenity;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createAmenity", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createAmenity_args args = new createAmenity_args();
        args.setAmenity(amenity);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TAmenityCUDResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createAmenity();
      }
    }

    public void getPackageTag(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPackageTagResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPackageTag_call method_call = new getPackageTag_call(metadataId, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPackageTag_call extends org.apache.thrift.async.TAsyncMethodCall<TPackageTagResponse> {
      private java.lang.String metadataId;
      private java.lang.String locale;
      public getPackageTag_call(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPackageTagResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.metadataId = metadataId;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPackageTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPackageTag_args args = new getPackageTag_args();
        args.setMetadataId(metadataId);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TPackageTagResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPackageTag();
      }
    }

    public void listPackageTags(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPackageTagResponse>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listPackageTags_call method_call = new listPackageTags_call(locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listPackageTags_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<TPackageTagResponse>> {
      private java.lang.String locale;
      public listPackageTags_call(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPackageTagResponse>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listPackageTags", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listPackageTags_args args = new listPackageTags_args();
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<TPackageTagResponse> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listPackageTags();
      }
    }

    public void createPackageTag(java.lang.String packageTag, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPackageTagCUDResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createPackageTag_call method_call = new createPackageTag_call(packageTag, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createPackageTag_call extends org.apache.thrift.async.TAsyncMethodCall<TPackageTagCUDResponse> {
      private java.lang.String packageTag;
      private java.lang.String locale;
      public createPackageTag_call(java.lang.String packageTag, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPackageTagCUDResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.packageTag = packageTag;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createPackageTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createPackageTag_args args = new createPackageTag_args();
        args.setPackageTag(packageTag);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TPackageTagCUDResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createPackageTag();
      }
    }

    public void getHotelCategory(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<THotelCategoryResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHotelCategory_call method_call = new getHotelCategory_call(metadataId, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHotelCategory_call extends org.apache.thrift.async.TAsyncMethodCall<THotelCategoryResponse> {
      private java.lang.String metadataId;
      private java.lang.String locale;
      public getHotelCategory_call(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<THotelCategoryResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.metadataId = metadataId;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHotelCategory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHotelCategory_args args = new getHotelCategory_args();
        args.setMetadataId(metadataId);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public THotelCategoryResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHotelCategory();
      }
    }

    public void listHotelCategories(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<THotelCategoryResponse>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listHotelCategories_call method_call = new listHotelCategories_call(locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listHotelCategories_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<THotelCategoryResponse>> {
      private java.lang.String locale;
      public listHotelCategories_call(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<THotelCategoryResponse>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listHotelCategories", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listHotelCategories_args args = new listHotelCategories_args();
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<THotelCategoryResponse> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listHotelCategories();
      }
    }

    public void createHotelCategory(java.lang.String hotelCategory, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<THotelCategoryCUDResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createHotelCategory_call method_call = new createHotelCategory_call(hotelCategory, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createHotelCategory_call extends org.apache.thrift.async.TAsyncMethodCall<THotelCategoryCUDResponse> {
      private java.lang.String hotelCategory;
      private java.lang.String locale;
      public createHotelCategory_call(java.lang.String hotelCategory, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<THotelCategoryCUDResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hotelCategory = hotelCategory;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createHotelCategory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createHotelCategory_args args = new createHotelCategory_args();
        args.setHotelCategory(hotelCategory);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public THotelCategoryCUDResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createHotelCategory();
      }
    }

    public void getRoomCategory(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TRoomCategoryResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRoomCategory_call method_call = new getRoomCategory_call(metadataId, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRoomCategory_call extends org.apache.thrift.async.TAsyncMethodCall<TRoomCategoryResponse> {
      private java.lang.String metadataId;
      private java.lang.String locale;
      public getRoomCategory_call(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TRoomCategoryResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.metadataId = metadataId;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRoomCategory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRoomCategory_args args = new getRoomCategory_args();
        args.setMetadataId(metadataId);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TRoomCategoryResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRoomCategory();
      }
    }

    public void listRoomCategories(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TRoomCategoryResponse>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listRoomCategories_call method_call = new listRoomCategories_call(locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listRoomCategories_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<TRoomCategoryResponse>> {
      private java.lang.String locale;
      public listRoomCategories_call(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TRoomCategoryResponse>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listRoomCategories", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listRoomCategories_args args = new listRoomCategories_args();
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<TRoomCategoryResponse> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listRoomCategories();
      }
    }

    public void createRoomCategory(java.lang.String roomCategory, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TRoomCategoryCUDResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createRoomCategory_call method_call = new createRoomCategory_call(roomCategory, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createRoomCategory_call extends org.apache.thrift.async.TAsyncMethodCall<TRoomCategoryCUDResponse> {
      private java.lang.String roomCategory;
      private java.lang.String locale;
      public createRoomCategory_call(java.lang.String roomCategory, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TRoomCategoryCUDResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.roomCategory = roomCategory;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createRoomCategory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createRoomCategory_args args = new createRoomCategory_args();
        args.setRoomCategory(roomCategory);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TRoomCategoryCUDResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createRoomCategory();
      }
    }

    public void getMiceTag(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TMiceTagResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMiceTag_call method_call = new getMiceTag_call(metadataId, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMiceTag_call extends org.apache.thrift.async.TAsyncMethodCall<TMiceTagResponse> {
      private java.lang.String metadataId;
      private java.lang.String locale;
      public getMiceTag_call(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TMiceTagResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.metadataId = metadataId;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMiceTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMiceTag_args args = new getMiceTag_args();
        args.setMetadataId(metadataId);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TMiceTagResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMiceTag();
      }
    }

    public void listMiceTags(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TMiceTagResponse>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listMiceTags_call method_call = new listMiceTags_call(locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listMiceTags_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<TMiceTagResponse>> {
      private java.lang.String locale;
      public listMiceTags_call(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TMiceTagResponse>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listMiceTags", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listMiceTags_args args = new listMiceTags_args();
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<TMiceTagResponse> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listMiceTags();
      }
    }

    public void createMiceTag(java.lang.String miceTag, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TMiceTagCUDResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createMiceTag_call method_call = new createMiceTag_call(miceTag, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createMiceTag_call extends org.apache.thrift.async.TAsyncMethodCall<TMiceTagCUDResponse> {
      private java.lang.String miceTag;
      private java.lang.String locale;
      public createMiceTag_call(java.lang.String miceTag, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TMiceTagCUDResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.miceTag = miceTag;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createMiceTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createMiceTag_args args = new createMiceTag_args();
        args.setMiceTag(miceTag);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TMiceTagCUDResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createMiceTag();
      }
    }

    public void getMiceEvent(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TMiceEventResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMiceEvent_call method_call = new getMiceEvent_call(metadataId, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMiceEvent_call extends org.apache.thrift.async.TAsyncMethodCall<TMiceEventResponse> {
      private java.lang.String metadataId;
      private java.lang.String locale;
      public getMiceEvent_call(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TMiceEventResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.metadataId = metadataId;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMiceEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMiceEvent_args args = new getMiceEvent_args();
        args.setMetadataId(metadataId);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TMiceEventResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMiceEvent();
      }
    }

    public void listMiceEvents(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TMiceEventResponse>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listMiceEvents_call method_call = new listMiceEvents_call(locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listMiceEvents_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<TMiceEventResponse>> {
      private java.lang.String locale;
      public listMiceEvents_call(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TMiceEventResponse>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listMiceEvents", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listMiceEvents_args args = new listMiceEvents_args();
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<TMiceEventResponse> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listMiceEvents();
      }
    }

    public void createMiceEvent(java.lang.String miceEventName, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TMiceEventCUDResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createMiceEvent_call method_call = new createMiceEvent_call(miceEventName, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createMiceEvent_call extends org.apache.thrift.async.TAsyncMethodCall<TMiceEventCUDResponse> {
      private java.lang.String miceEventName;
      private java.lang.String locale;
      public createMiceEvent_call(java.lang.String miceEventName, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TMiceEventCUDResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.miceEventName = miceEventName;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createMiceEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createMiceEvent_args args = new createMiceEvent_args();
        args.setMiceEventName(miceEventName);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TMiceEventCUDResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createMiceEvent();
      }
    }

    public void getMiceCity(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TMiceCityResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMiceCity_call method_call = new getMiceCity_call(metadataId, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMiceCity_call extends org.apache.thrift.async.TAsyncMethodCall<TMiceCityResponse> {
      private java.lang.String metadataId;
      private java.lang.String locale;
      public getMiceCity_call(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TMiceCityResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.metadataId = metadataId;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMiceCity", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMiceCity_args args = new getMiceCity_args();
        args.setMetadataId(metadataId);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TMiceCityResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMiceCity();
      }
    }

    public void listMiceCities(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TMiceCityResponse>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listMiceCities_call method_call = new listMiceCities_call(locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listMiceCities_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<TMiceCityResponse>> {
      private java.lang.String locale;
      public listMiceCities_call(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TMiceCityResponse>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listMiceCities", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listMiceCities_args args = new listMiceCities_args();
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<TMiceCityResponse> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listMiceCities();
      }
    }

    public void createMiceCity(java.lang.String miceCityName, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TMiceCityCUDResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createMiceCity_call method_call = new createMiceCity_call(miceCityName, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createMiceCity_call extends org.apache.thrift.async.TAsyncMethodCall<TMiceCityCUDResponse> {
      private java.lang.String miceCityName;
      private java.lang.String locale;
      public createMiceCity_call(java.lang.String miceCityName, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TMiceCityCUDResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.miceCityName = miceCityName;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createMiceCity", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createMiceCity_args args = new createMiceCity_args();
        args.setMiceCityName(miceCityName);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TMiceCityCUDResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createMiceCity();
      }
    }

    public void getPropertyLevel(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPropertyLevelResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPropertyLevel_call method_call = new getPropertyLevel_call(metadataId, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPropertyLevel_call extends org.apache.thrift.async.TAsyncMethodCall<TPropertyLevelResponse> {
      private java.lang.String metadataId;
      private java.lang.String locale;
      public getPropertyLevel_call(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPropertyLevelResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.metadataId = metadataId;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPropertyLevel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPropertyLevel_args args = new getPropertyLevel_args();
        args.setMetadataId(metadataId);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TPropertyLevelResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPropertyLevel();
      }
    }

    public void listPropertyLevel(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPropertyLevelResponse>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listPropertyLevel_call method_call = new listPropertyLevel_call(locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listPropertyLevel_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<TPropertyLevelResponse>> {
      private java.lang.String locale;
      public listPropertyLevel_call(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPropertyLevelResponse>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listPropertyLevel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listPropertyLevel_args args = new listPropertyLevel_args();
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<TPropertyLevelResponse> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listPropertyLevel();
      }
    }

    public void createPropertyLevel(TPropertyLevel propertyLevelData, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPropertyLevelResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createPropertyLevel_call method_call = new createPropertyLevel_call(propertyLevelData, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createPropertyLevel_call extends org.apache.thrift.async.TAsyncMethodCall<TPropertyLevelResponse> {
      private TPropertyLevel propertyLevelData;
      private java.lang.String locale;
      public createPropertyLevel_call(TPropertyLevel propertyLevelData, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPropertyLevelResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.propertyLevelData = propertyLevelData;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createPropertyLevel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createPropertyLevel_args args = new createPropertyLevel_args();
        args.setPropertyLevelData(propertyLevelData);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TPropertyLevelResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createPropertyLevel();
      }
    }

    public void getToiletConfiguration(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TToiletConfigurationResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getToiletConfiguration_call method_call = new getToiletConfiguration_call(metadataId, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getToiletConfiguration_call extends org.apache.thrift.async.TAsyncMethodCall<TToiletConfigurationResponse> {
      private java.lang.String metadataId;
      private java.lang.String locale;
      public getToiletConfiguration_call(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TToiletConfigurationResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.metadataId = metadataId;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getToiletConfiguration", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getToiletConfiguration_args args = new getToiletConfiguration_args();
        args.setMetadataId(metadataId);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TToiletConfigurationResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getToiletConfiguration();
      }
    }

    public void listToiletConfiguration(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TToiletConfigurationResponse>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listToiletConfiguration_call method_call = new listToiletConfiguration_call(locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listToiletConfiguration_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<TToiletConfigurationResponse>> {
      private java.lang.String locale;
      public listToiletConfiguration_call(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TToiletConfigurationResponse>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listToiletConfiguration", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listToiletConfiguration_args args = new listToiletConfiguration_args();
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<TToiletConfigurationResponse> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listToiletConfiguration();
      }
    }

    public void createToilet(TToiletConfigurationResponse toiletData, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TToiletConfigurationResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createToilet_call method_call = new createToilet_call(toiletData, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createToilet_call extends org.apache.thrift.async.TAsyncMethodCall<TToiletConfigurationResponse> {
      private TToiletConfigurationResponse toiletData;
      private java.lang.String locale;
      public createToilet_call(TToiletConfigurationResponse toiletData, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TToiletConfigurationResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.toiletData = toiletData;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createToilet", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createToilet_args args = new createToilet_args();
        args.setToiletData(toiletData);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TToiletConfigurationResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createToilet();
      }
    }

    public void getPaymentPolicy(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPaymentPolicyResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPaymentPolicy_call method_call = new getPaymentPolicy_call(metadataId, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPaymentPolicy_call extends org.apache.thrift.async.TAsyncMethodCall<TPaymentPolicyResponse> {
      private java.lang.String metadataId;
      private java.lang.String locale;
      public getPaymentPolicy_call(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPaymentPolicyResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.metadataId = metadataId;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPaymentPolicy", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPaymentPolicy_args args = new getPaymentPolicy_args();
        args.setMetadataId(metadataId);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TPaymentPolicyResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPaymentPolicy();
      }
    }

    public void listPaymentPolicies(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPaymentPolicyResponse>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listPaymentPolicies_call method_call = new listPaymentPolicies_call(locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listPaymentPolicies_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<TPaymentPolicyResponse>> {
      private java.lang.String locale;
      public listPaymentPolicies_call(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPaymentPolicyResponse>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listPaymentPolicies", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listPaymentPolicies_args args = new listPaymentPolicies_args();
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<TPaymentPolicyResponse> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listPaymentPolicies();
      }
    }

    public void createPaymentPolicy(java.lang.String description, java.util.Map<java.lang.String,java.lang.String> rule, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPaymentPolicyCUDResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createPaymentPolicy_call method_call = new createPaymentPolicy_call(description, rule, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createPaymentPolicy_call extends org.apache.thrift.async.TAsyncMethodCall<TPaymentPolicyCUDResponse> {
      private java.lang.String description;
      private java.util.Map<java.lang.String,java.lang.String> rule;
      private java.lang.String locale;
      public createPaymentPolicy_call(java.lang.String description, java.util.Map<java.lang.String,java.lang.String> rule, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPaymentPolicyCUDResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.description = description;
        this.rule = rule;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createPaymentPolicy", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createPaymentPolicy_args args = new createPaymentPolicy_args();
        args.setDescription(description);
        args.setRule(rule);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TPaymentPolicyCUDResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createPaymentPolicy();
      }
    }

    public void getCancellationPolicy(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TCancellationPolicyResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCancellationPolicy_call method_call = new getCancellationPolicy_call(metadataId, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCancellationPolicy_call extends org.apache.thrift.async.TAsyncMethodCall<TCancellationPolicyResponse> {
      private java.lang.String metadataId;
      private java.lang.String locale;
      public getCancellationPolicy_call(java.lang.String metadataId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TCancellationPolicyResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.metadataId = metadataId;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCancellationPolicy", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCancellationPolicy_args args = new getCancellationPolicy_args();
        args.setMetadataId(metadataId);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TCancellationPolicyResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCancellationPolicy();
      }
    }

    public void listCancellationPolicies(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TCancellationPolicyResponse>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listCancellationPolicies_call method_call = new listCancellationPolicies_call(locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listCancellationPolicies_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<TCancellationPolicyResponse>> {
      private java.lang.String locale;
      public listCancellationPolicies_call(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TCancellationPolicyResponse>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listCancellationPolicies", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listCancellationPolicies_args args = new listCancellationPolicies_args();
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<TCancellationPolicyResponse> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listCancellationPolicies();
      }
    }

    public void createCancellationPolicy(java.lang.String description, java.util.Map<java.lang.String,java.lang.String> rule, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TCancellationPolicyCUDResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createCancellationPolicy_call method_call = new createCancellationPolicy_call(description, rule, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createCancellationPolicy_call extends org.apache.thrift.async.TAsyncMethodCall<TCancellationPolicyCUDResponse> {
      private java.lang.String description;
      private java.util.Map<java.lang.String,java.lang.String> rule;
      private java.lang.String locale;
      public createCancellationPolicy_call(java.lang.String description, java.util.Map<java.lang.String,java.lang.String> rule, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TCancellationPolicyCUDResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.description = description;
        this.rule = rule;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createCancellationPolicy", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createCancellationPolicy_args args = new createCancellationPolicy_args();
        args.setDescription(description);
        args.setRule(rule);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TCancellationPolicyCUDResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createCancellationPolicy();
      }
    }

    public void listHotSellingPackage(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<THotSellingPackageResponse>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listHotSellingPackage_call method_call = new listHotSellingPackage_call(locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listHotSellingPackage_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<THotSellingPackageResponse>> {
      private java.lang.String locale;
      public listHotSellingPackage_call(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<THotSellingPackageResponse>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listHotSellingPackage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listHotSellingPackage_args args = new listHotSellingPackage_args();
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<THotSellingPackageResponse> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listHotSellingPackage();
      }
    }

    public void createHotSellingPackage(java.lang.String catalogId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<THotSellingPackageResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createHotSellingPackage_call method_call = new createHotSellingPackage_call(catalogId, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createHotSellingPackage_call extends org.apache.thrift.async.TAsyncMethodCall<THotSellingPackageResponse> {
      private java.lang.String catalogId;
      private java.lang.String locale;
      public createHotSellingPackage_call(java.lang.String catalogId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<THotSellingPackageResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.catalogId = catalogId;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createHotSellingPackage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createHotSellingPackage_args args = new createHotSellingPackage_args();
        args.setCatalogId(catalogId);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public THotSellingPackageResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createHotSellingPackage();
      }
    }

    public void listPopularPackages(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPopularPackageResponse>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listPopularPackages_call method_call = new listPopularPackages_call(locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listPopularPackages_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<TPopularPackageResponse>> {
      private java.lang.String locale;
      public listPopularPackages_call(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPopularPackageResponse>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listPopularPackages", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listPopularPackages_args args = new listPopularPackages_args();
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<TPopularPackageResponse> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listPopularPackages();
      }
    }

    public void createPopularPackage(java.lang.String catalogId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPopularPackageResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createPopularPackage_call method_call = new createPopularPackage_call(catalogId, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createPopularPackage_call extends org.apache.thrift.async.TAsyncMethodCall<TPopularPackageResponse> {
      private java.lang.String catalogId;
      private java.lang.String locale;
      public createPopularPackage_call(java.lang.String catalogId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TPopularPackageResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.catalogId = catalogId;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createPopularPackage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createPopularPackage_args args = new createPopularPackage_args();
        args.setCatalogId(catalogId);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TPopularPackageResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createPopularPackage();
      }
    }

    public void listOtherRecommendedPackages(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TOtherRecommendedPackageResponse>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listOtherRecommendedPackages_call method_call = new listOtherRecommendedPackages_call(locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listOtherRecommendedPackages_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<TOtherRecommendedPackageResponse>> {
      private java.lang.String locale;
      public listOtherRecommendedPackages_call(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TOtherRecommendedPackageResponse>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listOtherRecommendedPackages", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listOtherRecommendedPackages_args args = new listOtherRecommendedPackages_args();
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<TOtherRecommendedPackageResponse> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listOtherRecommendedPackages();
      }
    }

    public void createOtherRecommendedPackage(java.lang.String catalogId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TOtherRecommendedPackageResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createOtherRecommendedPackage_call method_call = new createOtherRecommendedPackage_call(catalogId, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createOtherRecommendedPackage_call extends org.apache.thrift.async.TAsyncMethodCall<TOtherRecommendedPackageResponse> {
      private java.lang.String catalogId;
      private java.lang.String locale;
      public createOtherRecommendedPackage_call(java.lang.String catalogId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TOtherRecommendedPackageResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.catalogId = catalogId;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createOtherRecommendedPackage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createOtherRecommendedPackage_args args = new createOtherRecommendedPackage_args();
        args.setCatalogId(catalogId);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TOtherRecommendedPackageResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createOtherRecommendedPackage();
      }
    }

    public void listOtherDestinationsToExplore(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TOtherDestinationToExploreResponse>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listOtherDestinationsToExplore_call method_call = new listOtherDestinationsToExplore_call(locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listOtherDestinationsToExplore_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<TOtherDestinationToExploreResponse>> {
      private java.lang.String locale;
      public listOtherDestinationsToExplore_call(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TOtherDestinationToExploreResponse>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listOtherDestinationsToExplore", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listOtherDestinationsToExplore_args args = new listOtherDestinationsToExplore_args();
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<TOtherDestinationToExploreResponse> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listOtherDestinationsToExplore();
      }
    }

    public void createOtherDestinationToExplore(java.lang.String catalogId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TOtherDestinationToExploreResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createOtherDestinationToExplore_call method_call = new createOtherDestinationToExplore_call(catalogId, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createOtherDestinationToExplore_call extends org.apache.thrift.async.TAsyncMethodCall<TOtherDestinationToExploreResponse> {
      private java.lang.String catalogId;
      private java.lang.String locale;
      public createOtherDestinationToExplore_call(java.lang.String catalogId, java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<TOtherDestinationToExploreResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.catalogId = catalogId;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createOtherDestinationToExplore", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createOtherDestinationToExplore_args args = new createOtherDestinationToExplore_args();
        args.setCatalogId(catalogId);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TOtherDestinationToExploreResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createOtherDestinationToExplore();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getPackageDestination", new getPackageDestination());
      processMap.put("listPackageDestinations", new listPackageDestinations());
      processMap.put("createPackageDestination", new createPackageDestination());
      processMap.put("getPackageDuration", new getPackageDuration());
      processMap.put("listPackageDurations", new listPackageDurations());
      processMap.put("createPackageDuration", new createPackageDuration());
      processMap.put("getMonth", new getMonth());
      processMap.put("listMonths", new listMonths());
      processMap.put("listBlogs", new listBlogs());
      processMap.put("listUserStories", new listUserStories());
      processMap.put("getPackageInclusion", new getPackageInclusion());
      processMap.put("listPackageInclusions", new listPackageInclusions());
      processMap.put("createPackageInclusion", new createPackageInclusion());
      processMap.put("getPackageExclusion", new getPackageExclusion());
      processMap.put("listPackageExclusions", new listPackageExclusions());
      processMap.put("createPackageExclusion", new createPackageExclusion());
      processMap.put("getRestriction", new getRestriction());
      processMap.put("listRestrictions", new listRestrictions());
      processMap.put("createRestriction", new createRestriction());
      processMap.put("getAmenity", new getAmenity());
      processMap.put("listAmenity", new listAmenity());
      processMap.put("createAmenity", new createAmenity());
      processMap.put("getPackageTag", new getPackageTag());
      processMap.put("listPackageTags", new listPackageTags());
      processMap.put("createPackageTag", new createPackageTag());
      processMap.put("getHotelCategory", new getHotelCategory());
      processMap.put("listHotelCategories", new listHotelCategories());
      processMap.put("createHotelCategory", new createHotelCategory());
      processMap.put("getRoomCategory", new getRoomCategory());
      processMap.put("listRoomCategories", new listRoomCategories());
      processMap.put("createRoomCategory", new createRoomCategory());
      processMap.put("getMiceTag", new getMiceTag());
      processMap.put("listMiceTags", new listMiceTags());
      processMap.put("createMiceTag", new createMiceTag());
      processMap.put("getMiceEvent", new getMiceEvent());
      processMap.put("listMiceEvents", new listMiceEvents());
      processMap.put("createMiceEvent", new createMiceEvent());
      processMap.put("getMiceCity", new getMiceCity());
      processMap.put("listMiceCities", new listMiceCities());
      processMap.put("createMiceCity", new createMiceCity());
      processMap.put("getPropertyLevel", new getPropertyLevel());
      processMap.put("listPropertyLevel", new listPropertyLevel());
      processMap.put("createPropertyLevel", new createPropertyLevel());
      processMap.put("getToiletConfiguration", new getToiletConfiguration());
      processMap.put("listToiletConfiguration", new listToiletConfiguration());
      processMap.put("createToilet", new createToilet());
      processMap.put("getPaymentPolicy", new getPaymentPolicy());
      processMap.put("listPaymentPolicies", new listPaymentPolicies());
      processMap.put("createPaymentPolicy", new createPaymentPolicy());
      processMap.put("getCancellationPolicy", new getCancellationPolicy());
      processMap.put("listCancellationPolicies", new listCancellationPolicies());
      processMap.put("createCancellationPolicy", new createCancellationPolicy());
      processMap.put("listHotSellingPackage", new listHotSellingPackage());
      processMap.put("createHotSellingPackage", new createHotSellingPackage());
      processMap.put("listPopularPackages", new listPopularPackages());
      processMap.put("createPopularPackage", new createPopularPackage());
      processMap.put("listOtherRecommendedPackages", new listOtherRecommendedPackages());
      processMap.put("createOtherRecommendedPackage", new createOtherRecommendedPackage());
      processMap.put("listOtherDestinationsToExplore", new listOtherDestinationsToExplore());
      processMap.put("createOtherDestinationToExplore", new createOtherDestinationToExplore());
      return processMap;
    }

    public static class getPackageDestination<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPackageDestination_args> {
      public getPackageDestination() {
        super("getPackageDestination");
      }

      public getPackageDestination_args getEmptyArgsInstance() {
        return new getPackageDestination_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPackageDestination_result getResult(I iface, getPackageDestination_args args) throws org.apache.thrift.TException {
        getPackageDestination_result result = new getPackageDestination_result();
        result.success = iface.getPackageDestination(args.metadataId, args.locale);
        return result;
      }
    }

    public static class listPackageDestinations<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listPackageDestinations_args> {
      public listPackageDestinations() {
        super("listPackageDestinations");
      }

      public listPackageDestinations_args getEmptyArgsInstance() {
        return new listPackageDestinations_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listPackageDestinations_result getResult(I iface, listPackageDestinations_args args) throws org.apache.thrift.TException {
        listPackageDestinations_result result = new listPackageDestinations_result();
        result.success = iface.listPackageDestinations(args.locale);
        return result;
      }
    }

    public static class createPackageDestination<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createPackageDestination_args> {
      public createPackageDestination() {
        super("createPackageDestination");
      }

      public createPackageDestination_args getEmptyArgsInstance() {
        return new createPackageDestination_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createPackageDestination_result getResult(I iface, createPackageDestination_args args) throws org.apache.thrift.TException {
        createPackageDestination_result result = new createPackageDestination_result();
        result.success = iface.createPackageDestination(args.packageDestinationName, args.locale);
        return result;
      }
    }

    public static class getPackageDuration<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPackageDuration_args> {
      public getPackageDuration() {
        super("getPackageDuration");
      }

      public getPackageDuration_args getEmptyArgsInstance() {
        return new getPackageDuration_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPackageDuration_result getResult(I iface, getPackageDuration_args args) throws org.apache.thrift.TException {
        getPackageDuration_result result = new getPackageDuration_result();
        result.success = iface.getPackageDuration(args.metadataId, args.locale);
        return result;
      }
    }

    public static class listPackageDurations<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listPackageDurations_args> {
      public listPackageDurations() {
        super("listPackageDurations");
      }

      public listPackageDurations_args getEmptyArgsInstance() {
        return new listPackageDurations_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listPackageDurations_result getResult(I iface, listPackageDurations_args args) throws org.apache.thrift.TException {
        listPackageDurations_result result = new listPackageDurations_result();
        result.success = iface.listPackageDurations(args.locale);
        return result;
      }
    }

    public static class createPackageDuration<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createPackageDuration_args> {
      public createPackageDuration() {
        super("createPackageDuration");
      }

      public createPackageDuration_args getEmptyArgsInstance() {
        return new createPackageDuration_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createPackageDuration_result getResult(I iface, createPackageDuration_args args) throws org.apache.thrift.TException {
        createPackageDuration_result result = new createPackageDuration_result();
        result.success = iface.createPackageDuration(args.packageDuration, args.locale);
        return result;
      }
    }

    public static class getMonth<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMonth_args> {
      public getMonth() {
        super("getMonth");
      }

      public getMonth_args getEmptyArgsInstance() {
        return new getMonth_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMonth_result getResult(I iface, getMonth_args args) throws org.apache.thrift.TException {
        getMonth_result result = new getMonth_result();
        result.success = iface.getMonth(args.metadataId, args.locale);
        return result;
      }
    }

    public static class listMonths<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listMonths_args> {
      public listMonths() {
        super("listMonths");
      }

      public listMonths_args getEmptyArgsInstance() {
        return new listMonths_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listMonths_result getResult(I iface, listMonths_args args) throws org.apache.thrift.TException {
        listMonths_result result = new listMonths_result();
        result.success = iface.listMonths(args.locale);
        return result;
      }
    }

    public static class listBlogs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listBlogs_args> {
      public listBlogs() {
        super("listBlogs");
      }

      public listBlogs_args getEmptyArgsInstance() {
        return new listBlogs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listBlogs_result getResult(I iface, listBlogs_args args) throws org.apache.thrift.TException {
        listBlogs_result result = new listBlogs_result();
        result.success = iface.listBlogs(args.locale);
        return result;
      }
    }

    public static class listUserStories<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listUserStories_args> {
      public listUserStories() {
        super("listUserStories");
      }

      public listUserStories_args getEmptyArgsInstance() {
        return new listUserStories_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listUserStories_result getResult(I iface, listUserStories_args args) throws org.apache.thrift.TException {
        listUserStories_result result = new listUserStories_result();
        result.success = iface.listUserStories(args.locale);
        return result;
      }
    }

    public static class getPackageInclusion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPackageInclusion_args> {
      public getPackageInclusion() {
        super("getPackageInclusion");
      }

      public getPackageInclusion_args getEmptyArgsInstance() {
        return new getPackageInclusion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPackageInclusion_result getResult(I iface, getPackageInclusion_args args) throws org.apache.thrift.TException {
        getPackageInclusion_result result = new getPackageInclusion_result();
        result.success = iface.getPackageInclusion(args.metadataId, args.locale);
        return result;
      }
    }

    public static class listPackageInclusions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listPackageInclusions_args> {
      public listPackageInclusions() {
        super("listPackageInclusions");
      }

      public listPackageInclusions_args getEmptyArgsInstance() {
        return new listPackageInclusions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listPackageInclusions_result getResult(I iface, listPackageInclusions_args args) throws org.apache.thrift.TException {
        listPackageInclusions_result result = new listPackageInclusions_result();
        result.success = iface.listPackageInclusions(args.locale);
        return result;
      }
    }

    public static class createPackageInclusion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createPackageInclusion_args> {
      public createPackageInclusion() {
        super("createPackageInclusion");
      }

      public createPackageInclusion_args getEmptyArgsInstance() {
        return new createPackageInclusion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createPackageInclusion_result getResult(I iface, createPackageInclusion_args args) throws org.apache.thrift.TException {
        createPackageInclusion_result result = new createPackageInclusion_result();
        result.success = iface.createPackageInclusion(args.inclusion, args.locale);
        return result;
      }
    }

    public static class getPackageExclusion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPackageExclusion_args> {
      public getPackageExclusion() {
        super("getPackageExclusion");
      }

      public getPackageExclusion_args getEmptyArgsInstance() {
        return new getPackageExclusion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPackageExclusion_result getResult(I iface, getPackageExclusion_args args) throws org.apache.thrift.TException {
        getPackageExclusion_result result = new getPackageExclusion_result();
        result.success = iface.getPackageExclusion(args.metadataId, args.locale);
        return result;
      }
    }

    public static class listPackageExclusions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listPackageExclusions_args> {
      public listPackageExclusions() {
        super("listPackageExclusions");
      }

      public listPackageExclusions_args getEmptyArgsInstance() {
        return new listPackageExclusions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listPackageExclusions_result getResult(I iface, listPackageExclusions_args args) throws org.apache.thrift.TException {
        listPackageExclusions_result result = new listPackageExclusions_result();
        result.success = iface.listPackageExclusions(args.locale);
        return result;
      }
    }

    public static class createPackageExclusion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createPackageExclusion_args> {
      public createPackageExclusion() {
        super("createPackageExclusion");
      }

      public createPackageExclusion_args getEmptyArgsInstance() {
        return new createPackageExclusion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createPackageExclusion_result getResult(I iface, createPackageExclusion_args args) throws org.apache.thrift.TException {
        createPackageExclusion_result result = new createPackageExclusion_result();
        result.success = iface.createPackageExclusion(args.exclusion, args.locale);
        return result;
      }
    }

    public static class getRestriction<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRestriction_args> {
      public getRestriction() {
        super("getRestriction");
      }

      public getRestriction_args getEmptyArgsInstance() {
        return new getRestriction_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRestriction_result getResult(I iface, getRestriction_args args) throws org.apache.thrift.TException {
        getRestriction_result result = new getRestriction_result();
        result.success = iface.getRestriction(args.metadataId, args.locale);
        return result;
      }
    }

    public static class listRestrictions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listRestrictions_args> {
      public listRestrictions() {
        super("listRestrictions");
      }

      public listRestrictions_args getEmptyArgsInstance() {
        return new listRestrictions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listRestrictions_result getResult(I iface, listRestrictions_args args) throws org.apache.thrift.TException {
        listRestrictions_result result = new listRestrictions_result();
        result.success = iface.listRestrictions(args.locale);
        return result;
      }
    }

    public static class createRestriction<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createRestriction_args> {
      public createRestriction() {
        super("createRestriction");
      }

      public createRestriction_args getEmptyArgsInstance() {
        return new createRestriction_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createRestriction_result getResult(I iface, createRestriction_args args) throws org.apache.thrift.TException {
        createRestriction_result result = new createRestriction_result();
        result.success = iface.createRestriction(args.restriction, args.locale);
        return result;
      }
    }

    public static class getAmenity<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAmenity_args> {
      public getAmenity() {
        super("getAmenity");
      }

      public getAmenity_args getEmptyArgsInstance() {
        return new getAmenity_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAmenity_result getResult(I iface, getAmenity_args args) throws org.apache.thrift.TException {
        getAmenity_result result = new getAmenity_result();
        result.success = iface.getAmenity(args.metadataId, args.locale);
        return result;
      }
    }

    public static class listAmenity<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listAmenity_args> {
      public listAmenity() {
        super("listAmenity");
      }

      public listAmenity_args getEmptyArgsInstance() {
        return new listAmenity_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listAmenity_result getResult(I iface, listAmenity_args args) throws org.apache.thrift.TException {
        listAmenity_result result = new listAmenity_result();
        result.success = iface.listAmenity(args.locale);
        return result;
      }
    }

    public static class createAmenity<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createAmenity_args> {
      public createAmenity() {
        super("createAmenity");
      }

      public createAmenity_args getEmptyArgsInstance() {
        return new createAmenity_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createAmenity_result getResult(I iface, createAmenity_args args) throws org.apache.thrift.TException {
        createAmenity_result result = new createAmenity_result();
        result.success = iface.createAmenity(args.amenity, args.locale);
        return result;
      }
    }

    public static class getPackageTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPackageTag_args> {
      public getPackageTag() {
        super("getPackageTag");
      }

      public getPackageTag_args getEmptyArgsInstance() {
        return new getPackageTag_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPackageTag_result getResult(I iface, getPackageTag_args args) throws org.apache.thrift.TException {
        getPackageTag_result result = new getPackageTag_result();
        result.success = iface.getPackageTag(args.metadataId, args.locale);
        return result;
      }
    }

    public static class listPackageTags<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listPackageTags_args> {
      public listPackageTags() {
        super("listPackageTags");
      }

      public listPackageTags_args getEmptyArgsInstance() {
        return new listPackageTags_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listPackageTags_result getResult(I iface, listPackageTags_args args) throws org.apache.thrift.TException {
        listPackageTags_result result = new listPackageTags_result();
        result.success = iface.listPackageTags(args.locale);
        return result;
      }
    }

    public static class createPackageTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createPackageTag_args> {
      public createPackageTag() {
        super("createPackageTag");
      }

      public createPackageTag_args getEmptyArgsInstance() {
        return new createPackageTag_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createPackageTag_result getResult(I iface, createPackageTag_args args) throws org.apache.thrift.TException {
        createPackageTag_result result = new createPackageTag_result();
        result.success = iface.createPackageTag(args.packageTag, args.locale);
        return result;
      }
    }

    public static class getHotelCategory<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHotelCategory_args> {
      public getHotelCategory() {
        super("getHotelCategory");
      }

      public getHotelCategory_args getEmptyArgsInstance() {
        return new getHotelCategory_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getHotelCategory_result getResult(I iface, getHotelCategory_args args) throws org.apache.thrift.TException {
        getHotelCategory_result result = new getHotelCategory_result();
        result.success = iface.getHotelCategory(args.metadataId, args.locale);
        return result;
      }
    }

    public static class listHotelCategories<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listHotelCategories_args> {
      public listHotelCategories() {
        super("listHotelCategories");
      }

      public listHotelCategories_args getEmptyArgsInstance() {
        return new listHotelCategories_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listHotelCategories_result getResult(I iface, listHotelCategories_args args) throws org.apache.thrift.TException {
        listHotelCategories_result result = new listHotelCategories_result();
        result.success = iface.listHotelCategories(args.locale);
        return result;
      }
    }

    public static class createHotelCategory<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createHotelCategory_args> {
      public createHotelCategory() {
        super("createHotelCategory");
      }

      public createHotelCategory_args getEmptyArgsInstance() {
        return new createHotelCategory_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createHotelCategory_result getResult(I iface, createHotelCategory_args args) throws org.apache.thrift.TException {
        createHotelCategory_result result = new createHotelCategory_result();
        result.success = iface.createHotelCategory(args.hotelCategory, args.locale);
        return result;
      }
    }

    public static class getRoomCategory<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRoomCategory_args> {
      public getRoomCategory() {
        super("getRoomCategory");
      }

      public getRoomCategory_args getEmptyArgsInstance() {
        return new getRoomCategory_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRoomCategory_result getResult(I iface, getRoomCategory_args args) throws org.apache.thrift.TException {
        getRoomCategory_result result = new getRoomCategory_result();
        result.success = iface.getRoomCategory(args.metadataId, args.locale);
        return result;
      }
    }

    public static class listRoomCategories<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listRoomCategories_args> {
      public listRoomCategories() {
        super("listRoomCategories");
      }

      public listRoomCategories_args getEmptyArgsInstance() {
        return new listRoomCategories_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listRoomCategories_result getResult(I iface, listRoomCategories_args args) throws org.apache.thrift.TException {
        listRoomCategories_result result = new listRoomCategories_result();
        result.success = iface.listRoomCategories(args.locale);
        return result;
      }
    }

    public static class createRoomCategory<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createRoomCategory_args> {
      public createRoomCategory() {
        super("createRoomCategory");
      }

      public createRoomCategory_args getEmptyArgsInstance() {
        return new createRoomCategory_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createRoomCategory_result getResult(I iface, createRoomCategory_args args) throws org.apache.thrift.TException {
        createRoomCategory_result result = new createRoomCategory_result();
        result.success = iface.createRoomCategory(args.roomCategory, args.locale);
        return result;
      }
    }

    public static class getMiceTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMiceTag_args> {
      public getMiceTag() {
        super("getMiceTag");
      }

      public getMiceTag_args getEmptyArgsInstance() {
        return new getMiceTag_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMiceTag_result getResult(I iface, getMiceTag_args args) throws org.apache.thrift.TException {
        getMiceTag_result result = new getMiceTag_result();
        result.success = iface.getMiceTag(args.metadataId, args.locale);
        return result;
      }
    }

    public static class listMiceTags<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listMiceTags_args> {
      public listMiceTags() {
        super("listMiceTags");
      }

      public listMiceTags_args getEmptyArgsInstance() {
        return new listMiceTags_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listMiceTags_result getResult(I iface, listMiceTags_args args) throws org.apache.thrift.TException {
        listMiceTags_result result = new listMiceTags_result();
        result.success = iface.listMiceTags(args.locale);
        return result;
      }
    }

    public static class createMiceTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createMiceTag_args> {
      public createMiceTag() {
        super("createMiceTag");
      }

      public createMiceTag_args getEmptyArgsInstance() {
        return new createMiceTag_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createMiceTag_result getResult(I iface, createMiceTag_args args) throws org.apache.thrift.TException {
        createMiceTag_result result = new createMiceTag_result();
        result.success = iface.createMiceTag(args.miceTag, args.locale);
        return result;
      }
    }

    public static class getMiceEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMiceEvent_args> {
      public getMiceEvent() {
        super("getMiceEvent");
      }

      public getMiceEvent_args getEmptyArgsInstance() {
        return new getMiceEvent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMiceEvent_result getResult(I iface, getMiceEvent_args args) throws org.apache.thrift.TException {
        getMiceEvent_result result = new getMiceEvent_result();
        result.success = iface.getMiceEvent(args.metadataId, args.locale);
        return result;
      }
    }

    public static class listMiceEvents<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listMiceEvents_args> {
      public listMiceEvents() {
        super("listMiceEvents");
      }

      public listMiceEvents_args getEmptyArgsInstance() {
        return new listMiceEvents_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listMiceEvents_result getResult(I iface, listMiceEvents_args args) throws org.apache.thrift.TException {
        listMiceEvents_result result = new listMiceEvents_result();
        result.success = iface.listMiceEvents(args.locale);
        return result;
      }
    }

    public static class createMiceEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createMiceEvent_args> {
      public createMiceEvent() {
        super("createMiceEvent");
      }

      public createMiceEvent_args getEmptyArgsInstance() {
        return new createMiceEvent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createMiceEvent_result getResult(I iface, createMiceEvent_args args) throws org.apache.thrift.TException {
        createMiceEvent_result result = new createMiceEvent_result();
        result.success = iface.createMiceEvent(args.miceEventName, args.locale);
        return result;
      }
    }

    public static class getMiceCity<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMiceCity_args> {
      public getMiceCity() {
        super("getMiceCity");
      }

      public getMiceCity_args getEmptyArgsInstance() {
        return new getMiceCity_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMiceCity_result getResult(I iface, getMiceCity_args args) throws org.apache.thrift.TException {
        getMiceCity_result result = new getMiceCity_result();
        result.success = iface.getMiceCity(args.metadataId, args.locale);
        return result;
      }
    }

    public static class listMiceCities<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listMiceCities_args> {
      public listMiceCities() {
        super("listMiceCities");
      }

      public listMiceCities_args getEmptyArgsInstance() {
        return new listMiceCities_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listMiceCities_result getResult(I iface, listMiceCities_args args) throws org.apache.thrift.TException {
        listMiceCities_result result = new listMiceCities_result();
        result.success = iface.listMiceCities(args.locale);
        return result;
      }
    }

    public static class createMiceCity<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createMiceCity_args> {
      public createMiceCity() {
        super("createMiceCity");
      }

      public createMiceCity_args getEmptyArgsInstance() {
        return new createMiceCity_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createMiceCity_result getResult(I iface, createMiceCity_args args) throws org.apache.thrift.TException {
        createMiceCity_result result = new createMiceCity_result();
        result.success = iface.createMiceCity(args.miceCityName, args.locale);
        return result;
      }
    }

    public static class getPropertyLevel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPropertyLevel_args> {
      public getPropertyLevel() {
        super("getPropertyLevel");
      }

      public getPropertyLevel_args getEmptyArgsInstance() {
        return new getPropertyLevel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPropertyLevel_result getResult(I iface, getPropertyLevel_args args) throws org.apache.thrift.TException {
        getPropertyLevel_result result = new getPropertyLevel_result();
        result.success = iface.getPropertyLevel(args.metadataId, args.locale);
        return result;
      }
    }

    public static class listPropertyLevel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listPropertyLevel_args> {
      public listPropertyLevel() {
        super("listPropertyLevel");
      }

      public listPropertyLevel_args getEmptyArgsInstance() {
        return new listPropertyLevel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listPropertyLevel_result getResult(I iface, listPropertyLevel_args args) throws org.apache.thrift.TException {
        listPropertyLevel_result result = new listPropertyLevel_result();
        result.success = iface.listPropertyLevel(args.locale);
        return result;
      }
    }

    public static class createPropertyLevel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createPropertyLevel_args> {
      public createPropertyLevel() {
        super("createPropertyLevel");
      }

      public createPropertyLevel_args getEmptyArgsInstance() {
        return new createPropertyLevel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createPropertyLevel_result getResult(I iface, createPropertyLevel_args args) throws org.apache.thrift.TException {
        createPropertyLevel_result result = new createPropertyLevel_result();
        result.success = iface.createPropertyLevel(args.propertyLevelData, args.locale);
        return result;
      }
    }

    public static class getToiletConfiguration<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getToiletConfiguration_args> {
      public getToiletConfiguration() {
        super("getToiletConfiguration");
      }

      public getToiletConfiguration_args getEmptyArgsInstance() {
        return new getToiletConfiguration_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getToiletConfiguration_result getResult(I iface, getToiletConfiguration_args args) throws org.apache.thrift.TException {
        getToiletConfiguration_result result = new getToiletConfiguration_result();
        result.success = iface.getToiletConfiguration(args.metadataId, args.locale);
        return result;
      }
    }

    public static class listToiletConfiguration<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listToiletConfiguration_args> {
      public listToiletConfiguration() {
        super("listToiletConfiguration");
      }

      public listToiletConfiguration_args getEmptyArgsInstance() {
        return new listToiletConfiguration_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listToiletConfiguration_result getResult(I iface, listToiletConfiguration_args args) throws org.apache.thrift.TException {
        listToiletConfiguration_result result = new listToiletConfiguration_result();
        result.success = iface.listToiletConfiguration(args.locale);
        return result;
      }
    }

    public static class createToilet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createToilet_args> {
      public createToilet() {
        super("createToilet");
      }

      public createToilet_args getEmptyArgsInstance() {
        return new createToilet_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createToilet_result getResult(I iface, createToilet_args args) throws org.apache.thrift.TException {
        createToilet_result result = new createToilet_result();
        result.success = iface.createToilet(args.toiletData, args.locale);
        return result;
      }
    }

    public static class getPaymentPolicy<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPaymentPolicy_args> {
      public getPaymentPolicy() {
        super("getPaymentPolicy");
      }

      public getPaymentPolicy_args getEmptyArgsInstance() {
        return new getPaymentPolicy_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPaymentPolicy_result getResult(I iface, getPaymentPolicy_args args) throws org.apache.thrift.TException {
        getPaymentPolicy_result result = new getPaymentPolicy_result();
        result.success = iface.getPaymentPolicy(args.metadataId, args.locale);
        return result;
      }
    }

    public static class listPaymentPolicies<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listPaymentPolicies_args> {
      public listPaymentPolicies() {
        super("listPaymentPolicies");
      }

      public listPaymentPolicies_args getEmptyArgsInstance() {
        return new listPaymentPolicies_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listPaymentPolicies_result getResult(I iface, listPaymentPolicies_args args) throws org.apache.thrift.TException {
        listPaymentPolicies_result result = new listPaymentPolicies_result();
        result.success = iface.listPaymentPolicies(args.locale);
        return result;
      }
    }

    public static class createPaymentPolicy<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createPaymentPolicy_args> {
      public createPaymentPolicy() {
        super("createPaymentPolicy");
      }

      public createPaymentPolicy_args getEmptyArgsInstance() {
        return new createPaymentPolicy_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createPaymentPolicy_result getResult(I iface, createPaymentPolicy_args args) throws org.apache.thrift.TException {
        createPaymentPolicy_result result = new createPaymentPolicy_result();
        result.success = iface.createPaymentPolicy(args.description, args.rule, args.locale);
        return result;
      }
    }

    public static class getCancellationPolicy<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCancellationPolicy_args> {
      public getCancellationPolicy() {
        super("getCancellationPolicy");
      }

      public getCancellationPolicy_args getEmptyArgsInstance() {
        return new getCancellationPolicy_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCancellationPolicy_result getResult(I iface, getCancellationPolicy_args args) throws org.apache.thrift.TException {
        getCancellationPolicy_result result = new getCancellationPolicy_result();
        result.success = iface.getCancellationPolicy(args.metadataId, args.locale);
        return result;
      }
    }

    public static class listCancellationPolicies<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listCancellationPolicies_args> {
      public listCancellationPolicies() {
        super("listCancellationPolicies");
      }

      public listCancellationPolicies_args getEmptyArgsInstance() {
        return new listCancellationPolicies_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listCancellationPolicies_result getResult(I iface, listCancellationPolicies_args args) throws org.apache.thrift.TException {
        listCancellationPolicies_result result = new listCancellationPolicies_result();
        result.success = iface.listCancellationPolicies(args.locale);
        return result;
      }
    }

    public static class createCancellationPolicy<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createCancellationPolicy_args> {
      public createCancellationPolicy() {
        super("createCancellationPolicy");
      }

      public createCancellationPolicy_args getEmptyArgsInstance() {
        return new createCancellationPolicy_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createCancellationPolicy_result getResult(I iface, createCancellationPolicy_args args) throws org.apache.thrift.TException {
        createCancellationPolicy_result result = new createCancellationPolicy_result();
        result.success = iface.createCancellationPolicy(args.description, args.rule, args.locale);
        return result;
      }
    }

    public static class listHotSellingPackage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listHotSellingPackage_args> {
      public listHotSellingPackage() {
        super("listHotSellingPackage");
      }

      public listHotSellingPackage_args getEmptyArgsInstance() {
        return new listHotSellingPackage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listHotSellingPackage_result getResult(I iface, listHotSellingPackage_args args) throws org.apache.thrift.TException {
        listHotSellingPackage_result result = new listHotSellingPackage_result();
        result.success = iface.listHotSellingPackage(args.locale);
        return result;
      }
    }

    public static class createHotSellingPackage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createHotSellingPackage_args> {
      public createHotSellingPackage() {
        super("createHotSellingPackage");
      }

      public createHotSellingPackage_args getEmptyArgsInstance() {
        return new createHotSellingPackage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createHotSellingPackage_result getResult(I iface, createHotSellingPackage_args args) throws org.apache.thrift.TException {
        createHotSellingPackage_result result = new createHotSellingPackage_result();
        result.success = iface.createHotSellingPackage(args.catalogId, args.locale);
        return result;
      }
    }

    public static class listPopularPackages<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listPopularPackages_args> {
      public listPopularPackages() {
        super("listPopularPackages");
      }

      public listPopularPackages_args getEmptyArgsInstance() {
        return new listPopularPackages_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listPopularPackages_result getResult(I iface, listPopularPackages_args args) throws org.apache.thrift.TException {
        listPopularPackages_result result = new listPopularPackages_result();
        result.success = iface.listPopularPackages(args.locale);
        return result;
      }
    }

    public static class createPopularPackage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createPopularPackage_args> {
      public createPopularPackage() {
        super("createPopularPackage");
      }

      public createPopularPackage_args getEmptyArgsInstance() {
        return new createPopularPackage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createPopularPackage_result getResult(I iface, createPopularPackage_args args) throws org.apache.thrift.TException {
        createPopularPackage_result result = new createPopularPackage_result();
        result.success = iface.createPopularPackage(args.catalogId, args.locale);
        return result;
      }
    }

    public static class listOtherRecommendedPackages<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listOtherRecommendedPackages_args> {
      public listOtherRecommendedPackages() {
        super("listOtherRecommendedPackages");
      }

      public listOtherRecommendedPackages_args getEmptyArgsInstance() {
        return new listOtherRecommendedPackages_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listOtherRecommendedPackages_result getResult(I iface, listOtherRecommendedPackages_args args) throws org.apache.thrift.TException {
        listOtherRecommendedPackages_result result = new listOtherRecommendedPackages_result();
        result.success = iface.listOtherRecommendedPackages(args.locale);
        return result;
      }
    }

    public static class createOtherRecommendedPackage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createOtherRecommendedPackage_args> {
      public createOtherRecommendedPackage() {
        super("createOtherRecommendedPackage");
      }

      public createOtherRecommendedPackage_args getEmptyArgsInstance() {
        return new createOtherRecommendedPackage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createOtherRecommendedPackage_result getResult(I iface, createOtherRecommendedPackage_args args) throws org.apache.thrift.TException {
        createOtherRecommendedPackage_result result = new createOtherRecommendedPackage_result();
        result.success = iface.createOtherRecommendedPackage(args.catalogId, args.locale);
        return result;
      }
    }

    public static class listOtherDestinationsToExplore<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listOtherDestinationsToExplore_args> {
      public listOtherDestinationsToExplore() {
        super("listOtherDestinationsToExplore");
      }

      public listOtherDestinationsToExplore_args getEmptyArgsInstance() {
        return new listOtherDestinationsToExplore_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listOtherDestinationsToExplore_result getResult(I iface, listOtherDestinationsToExplore_args args) throws org.apache.thrift.TException {
        listOtherDestinationsToExplore_result result = new listOtherDestinationsToExplore_result();
        result.success = iface.listOtherDestinationsToExplore(args.locale);
        return result;
      }
    }

    public static class createOtherDestinationToExplore<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createOtherDestinationToExplore_args> {
      public createOtherDestinationToExplore() {
        super("createOtherDestinationToExplore");
      }

      public createOtherDestinationToExplore_args getEmptyArgsInstance() {
        return new createOtherDestinationToExplore_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createOtherDestinationToExplore_result getResult(I iface, createOtherDestinationToExplore_args args) throws org.apache.thrift.TException {
        createOtherDestinationToExplore_result result = new createOtherDestinationToExplore_result();
        result.success = iface.createOtherDestinationToExplore(args.catalogId, args.locale);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getPackageDestination", new getPackageDestination());
      processMap.put("listPackageDestinations", new listPackageDestinations());
      processMap.put("createPackageDestination", new createPackageDestination());
      processMap.put("getPackageDuration", new getPackageDuration());
      processMap.put("listPackageDurations", new listPackageDurations());
      processMap.put("createPackageDuration", new createPackageDuration());
      processMap.put("getMonth", new getMonth());
      processMap.put("listMonths", new listMonths());
      processMap.put("listBlogs", new listBlogs());
      processMap.put("listUserStories", new listUserStories());
      processMap.put("getPackageInclusion", new getPackageInclusion());
      processMap.put("listPackageInclusions", new listPackageInclusions());
      processMap.put("createPackageInclusion", new createPackageInclusion());
      processMap.put("getPackageExclusion", new getPackageExclusion());
      processMap.put("listPackageExclusions", new listPackageExclusions());
      processMap.put("createPackageExclusion", new createPackageExclusion());
      processMap.put("getRestriction", new getRestriction());
      processMap.put("listRestrictions", new listRestrictions());
      processMap.put("createRestriction", new createRestriction());
      processMap.put("getAmenity", new getAmenity());
      processMap.put("listAmenity", new listAmenity());
      processMap.put("createAmenity", new createAmenity());
      processMap.put("getPackageTag", new getPackageTag());
      processMap.put("listPackageTags", new listPackageTags());
      processMap.put("createPackageTag", new createPackageTag());
      processMap.put("getHotelCategory", new getHotelCategory());
      processMap.put("listHotelCategories", new listHotelCategories());
      processMap.put("createHotelCategory", new createHotelCategory());
      processMap.put("getRoomCategory", new getRoomCategory());
      processMap.put("listRoomCategories", new listRoomCategories());
      processMap.put("createRoomCategory", new createRoomCategory());
      processMap.put("getMiceTag", new getMiceTag());
      processMap.put("listMiceTags", new listMiceTags());
      processMap.put("createMiceTag", new createMiceTag());
      processMap.put("getMiceEvent", new getMiceEvent());
      processMap.put("listMiceEvents", new listMiceEvents());
      processMap.put("createMiceEvent", new createMiceEvent());
      processMap.put("getMiceCity", new getMiceCity());
      processMap.put("listMiceCities", new listMiceCities());
      processMap.put("createMiceCity", new createMiceCity());
      processMap.put("getPropertyLevel", new getPropertyLevel());
      processMap.put("listPropertyLevel", new listPropertyLevel());
      processMap.put("createPropertyLevel", new createPropertyLevel());
      processMap.put("getToiletConfiguration", new getToiletConfiguration());
      processMap.put("listToiletConfiguration", new listToiletConfiguration());
      processMap.put("createToilet", new createToilet());
      processMap.put("getPaymentPolicy", new getPaymentPolicy());
      processMap.put("listPaymentPolicies", new listPaymentPolicies());
      processMap.put("createPaymentPolicy", new createPaymentPolicy());
      processMap.put("getCancellationPolicy", new getCancellationPolicy());
      processMap.put("listCancellationPolicies", new listCancellationPolicies());
      processMap.put("createCancellationPolicy", new createCancellationPolicy());
      processMap.put("listHotSellingPackage", new listHotSellingPackage());
      processMap.put("createHotSellingPackage", new createHotSellingPackage());
      processMap.put("listPopularPackages", new listPopularPackages());
      processMap.put("createPopularPackage", new createPopularPackage());
      processMap.put("listOtherRecommendedPackages", new listOtherRecommendedPackages());
      processMap.put("createOtherRecommendedPackage", new createOtherRecommendedPackage());
      processMap.put("listOtherDestinationsToExplore", new listOtherDestinationsToExplore());
      processMap.put("createOtherDestinationToExplore", new createOtherDestinationToExplore());
      return processMap;
    }

    public static class getPackageDestination<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPackageDestination_args, TPackageDestinationResponse> {
      public getPackageDestination() {
        super("getPackageDestination");
      }

      public getPackageDestination_args getEmptyArgsInstance() {
        return new getPackageDestination_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TPackageDestinationResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TPackageDestinationResponse>() { 
          public void onComplete(TPackageDestinationResponse o) {
            getPackageDestination_result result = new getPackageDestination_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getPackageDestination_result result = new getPackageDestination_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPackageDestination_args args, org.apache.thrift.async.AsyncMethodCallback<TPackageDestinationResponse> resultHandler) throws org.apache.thrift.TException {
        iface.getPackageDestination(args.metadataId, args.locale,resultHandler);
      }
    }

    public static class listPackageDestinations<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listPackageDestinations_args, java.util.List<TPackageDestinationResponse>> {
      public listPackageDestinations() {
        super("listPackageDestinations");
      }

      public listPackageDestinations_args getEmptyArgsInstance() {
        return new listPackageDestinations_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPackageDestinationResponse>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPackageDestinationResponse>>() { 
          public void onComplete(java.util.List<TPackageDestinationResponse> o) {
            listPackageDestinations_result result = new listPackageDestinations_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listPackageDestinations_result result = new listPackageDestinations_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listPackageDestinations_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPackageDestinationResponse>> resultHandler) throws org.apache.thrift.TException {
        iface.listPackageDestinations(args.locale,resultHandler);
      }
    }

    public static class createPackageDestination<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createPackageDestination_args, TPackageDestinationCUDResponse> {
      public createPackageDestination() {
        super("createPackageDestination");
      }

      public createPackageDestination_args getEmptyArgsInstance() {
        return new createPackageDestination_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TPackageDestinationCUDResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TPackageDestinationCUDResponse>() { 
          public void onComplete(TPackageDestinationCUDResponse o) {
            createPackageDestination_result result = new createPackageDestination_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createPackageDestination_result result = new createPackageDestination_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createPackageDestination_args args, org.apache.thrift.async.AsyncMethodCallback<TPackageDestinationCUDResponse> resultHandler) throws org.apache.thrift.TException {
        iface.createPackageDestination(args.packageDestinationName, args.locale,resultHandler);
      }
    }

    public static class getPackageDuration<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPackageDuration_args, TPackageDurationResponse> {
      public getPackageDuration() {
        super("getPackageDuration");
      }

      public getPackageDuration_args getEmptyArgsInstance() {
        return new getPackageDuration_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TPackageDurationResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TPackageDurationResponse>() { 
          public void onComplete(TPackageDurationResponse o) {
            getPackageDuration_result result = new getPackageDuration_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getPackageDuration_result result = new getPackageDuration_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPackageDuration_args args, org.apache.thrift.async.AsyncMethodCallback<TPackageDurationResponse> resultHandler) throws org.apache.thrift.TException {
        iface.getPackageDuration(args.metadataId, args.locale,resultHandler);
      }
    }

    public static class listPackageDurations<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listPackageDurations_args, java.util.List<TPackageDurationResponse>> {
      public listPackageDurations() {
        super("listPackageDurations");
      }

      public listPackageDurations_args getEmptyArgsInstance() {
        return new listPackageDurations_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPackageDurationResponse>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPackageDurationResponse>>() { 
          public void onComplete(java.util.List<TPackageDurationResponse> o) {
            listPackageDurations_result result = new listPackageDurations_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listPackageDurations_result result = new listPackageDurations_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listPackageDurations_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPackageDurationResponse>> resultHandler) throws org.apache.thrift.TException {
        iface.listPackageDurations(args.locale,resultHandler);
      }
    }

    public static class createPackageDuration<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createPackageDuration_args, TPackageDurationCUDResponse> {
      public createPackageDuration() {
        super("createPackageDuration");
      }

      public createPackageDuration_args getEmptyArgsInstance() {
        return new createPackageDuration_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TPackageDurationCUDResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TPackageDurationCUDResponse>() { 
          public void onComplete(TPackageDurationCUDResponse o) {
            createPackageDuration_result result = new createPackageDuration_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createPackageDuration_result result = new createPackageDuration_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createPackageDuration_args args, org.apache.thrift.async.AsyncMethodCallback<TPackageDurationCUDResponse> resultHandler) throws org.apache.thrift.TException {
        iface.createPackageDuration(args.packageDuration, args.locale,resultHandler);
      }
    }

    public static class getMonth<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMonth_args, TMonthResponse> {
      public getMonth() {
        super("getMonth");
      }

      public getMonth_args getEmptyArgsInstance() {
        return new getMonth_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TMonthResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TMonthResponse>() { 
          public void onComplete(TMonthResponse o) {
            getMonth_result result = new getMonth_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getMonth_result result = new getMonth_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMonth_args args, org.apache.thrift.async.AsyncMethodCallback<TMonthResponse> resultHandler) throws org.apache.thrift.TException {
        iface.getMonth(args.metadataId, args.locale,resultHandler);
      }
    }

    public static class listMonths<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listMonths_args, java.util.List<TMonthResponse>> {
      public listMonths() {
        super("listMonths");
      }

      public listMonths_args getEmptyArgsInstance() {
        return new listMonths_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<TMonthResponse>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<TMonthResponse>>() { 
          public void onComplete(java.util.List<TMonthResponse> o) {
            listMonths_result result = new listMonths_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listMonths_result result = new listMonths_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listMonths_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TMonthResponse>> resultHandler) throws org.apache.thrift.TException {
        iface.listMonths(args.locale,resultHandler);
      }
    }

    public static class listBlogs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listBlogs_args, java.util.List<TBlogResponse>> {
      public listBlogs() {
        super("listBlogs");
      }

      public listBlogs_args getEmptyArgsInstance() {
        return new listBlogs_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<TBlogResponse>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<TBlogResponse>>() { 
          public void onComplete(java.util.List<TBlogResponse> o) {
            listBlogs_result result = new listBlogs_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listBlogs_result result = new listBlogs_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listBlogs_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TBlogResponse>> resultHandler) throws org.apache.thrift.TException {
        iface.listBlogs(args.locale,resultHandler);
      }
    }

    public static class listUserStories<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listUserStories_args, java.util.List<TUserStoryResponse>> {
      public listUserStories() {
        super("listUserStories");
      }

      public listUserStories_args getEmptyArgsInstance() {
        return new listUserStories_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<TUserStoryResponse>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<TUserStoryResponse>>() { 
          public void onComplete(java.util.List<TUserStoryResponse> o) {
            listUserStories_result result = new listUserStories_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listUserStories_result result = new listUserStories_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listUserStories_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TUserStoryResponse>> resultHandler) throws org.apache.thrift.TException {
        iface.listUserStories(args.locale,resultHandler);
      }
    }

    public static class getPackageInclusion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPackageInclusion_args, TPackageInclusionResponse> {
      public getPackageInclusion() {
        super("getPackageInclusion");
      }

      public getPackageInclusion_args getEmptyArgsInstance() {
        return new getPackageInclusion_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TPackageInclusionResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TPackageInclusionResponse>() { 
          public void onComplete(TPackageInclusionResponse o) {
            getPackageInclusion_result result = new getPackageInclusion_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getPackageInclusion_result result = new getPackageInclusion_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPackageInclusion_args args, org.apache.thrift.async.AsyncMethodCallback<TPackageInclusionResponse> resultHandler) throws org.apache.thrift.TException {
        iface.getPackageInclusion(args.metadataId, args.locale,resultHandler);
      }
    }

    public static class listPackageInclusions<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listPackageInclusions_args, java.util.List<TPackageInclusionResponse>> {
      public listPackageInclusions() {
        super("listPackageInclusions");
      }

      public listPackageInclusions_args getEmptyArgsInstance() {
        return new listPackageInclusions_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPackageInclusionResponse>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPackageInclusionResponse>>() { 
          public void onComplete(java.util.List<TPackageInclusionResponse> o) {
            listPackageInclusions_result result = new listPackageInclusions_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listPackageInclusions_result result = new listPackageInclusions_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listPackageInclusions_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPackageInclusionResponse>> resultHandler) throws org.apache.thrift.TException {
        iface.listPackageInclusions(args.locale,resultHandler);
      }
    }

    public static class createPackageInclusion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createPackageInclusion_args, TPackageInclusionCUDResponse> {
      public createPackageInclusion() {
        super("createPackageInclusion");
      }

      public createPackageInclusion_args getEmptyArgsInstance() {
        return new createPackageInclusion_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TPackageInclusionCUDResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TPackageInclusionCUDResponse>() { 
          public void onComplete(TPackageInclusionCUDResponse o) {
            createPackageInclusion_result result = new createPackageInclusion_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createPackageInclusion_result result = new createPackageInclusion_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createPackageInclusion_args args, org.apache.thrift.async.AsyncMethodCallback<TPackageInclusionCUDResponse> resultHandler) throws org.apache.thrift.TException {
        iface.createPackageInclusion(args.inclusion, args.locale,resultHandler);
      }
    }

    public static class getPackageExclusion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPackageExclusion_args, TPackageExclusionResponse> {
      public getPackageExclusion() {
        super("getPackageExclusion");
      }

      public getPackageExclusion_args getEmptyArgsInstance() {
        return new getPackageExclusion_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TPackageExclusionResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TPackageExclusionResponse>() { 
          public void onComplete(TPackageExclusionResponse o) {
            getPackageExclusion_result result = new getPackageExclusion_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getPackageExclusion_result result = new getPackageExclusion_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPackageExclusion_args args, org.apache.thrift.async.AsyncMethodCallback<TPackageExclusionResponse> resultHandler) throws org.apache.thrift.TException {
        iface.getPackageExclusion(args.metadataId, args.locale,resultHandler);
      }
    }

    public static class listPackageExclusions<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listPackageExclusions_args, java.util.List<TPackageExclusionResponse>> {
      public listPackageExclusions() {
        super("listPackageExclusions");
      }

      public listPackageExclusions_args getEmptyArgsInstance() {
        return new listPackageExclusions_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPackageExclusionResponse>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPackageExclusionResponse>>() { 
          public void onComplete(java.util.List<TPackageExclusionResponse> o) {
            listPackageExclusions_result result = new listPackageExclusions_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listPackageExclusions_result result = new listPackageExclusions_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listPackageExclusions_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPackageExclusionResponse>> resultHandler) throws org.apache.thrift.TException {
        iface.listPackageExclusions(args.locale,resultHandler);
      }
    }

    public static class createPackageExclusion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createPackageExclusion_args, TPackageExclusionCUDResponse> {
      public createPackageExclusion() {
        super("createPackageExclusion");
      }

      public createPackageExclusion_args getEmptyArgsInstance() {
        return new createPackageExclusion_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TPackageExclusionCUDResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TPackageExclusionCUDResponse>() { 
          public void onComplete(TPackageExclusionCUDResponse o) {
            createPackageExclusion_result result = new createPackageExclusion_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createPackageExclusion_result result = new createPackageExclusion_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createPackageExclusion_args args, org.apache.thrift.async.AsyncMethodCallback<TPackageExclusionCUDResponse> resultHandler) throws org.apache.thrift.TException {
        iface.createPackageExclusion(args.exclusion, args.locale,resultHandler);
      }
    }

    public static class getRestriction<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRestriction_args, TRestrictionResponse> {
      public getRestriction() {
        super("getRestriction");
      }

      public getRestriction_args getEmptyArgsInstance() {
        return new getRestriction_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TRestrictionResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TRestrictionResponse>() { 
          public void onComplete(TRestrictionResponse o) {
            getRestriction_result result = new getRestriction_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getRestriction_result result = new getRestriction_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRestriction_args args, org.apache.thrift.async.AsyncMethodCallback<TRestrictionResponse> resultHandler) throws org.apache.thrift.TException {
        iface.getRestriction(args.metadataId, args.locale,resultHandler);
      }
    }

    public static class listRestrictions<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listRestrictions_args, java.util.List<TRestrictionResponse>> {
      public listRestrictions() {
        super("listRestrictions");
      }

      public listRestrictions_args getEmptyArgsInstance() {
        return new listRestrictions_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<TRestrictionResponse>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<TRestrictionResponse>>() { 
          public void onComplete(java.util.List<TRestrictionResponse> o) {
            listRestrictions_result result = new listRestrictions_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listRestrictions_result result = new listRestrictions_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listRestrictions_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TRestrictionResponse>> resultHandler) throws org.apache.thrift.TException {
        iface.listRestrictions(args.locale,resultHandler);
      }
    }

    public static class createRestriction<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createRestriction_args, TRestrictionCUDResponse> {
      public createRestriction() {
        super("createRestriction");
      }

      public createRestriction_args getEmptyArgsInstance() {
        return new createRestriction_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TRestrictionCUDResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TRestrictionCUDResponse>() { 
          public void onComplete(TRestrictionCUDResponse o) {
            createRestriction_result result = new createRestriction_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createRestriction_result result = new createRestriction_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createRestriction_args args, org.apache.thrift.async.AsyncMethodCallback<TRestrictionCUDResponse> resultHandler) throws org.apache.thrift.TException {
        iface.createRestriction(args.restriction, args.locale,resultHandler);
      }
    }

    public static class getAmenity<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAmenity_args, TAmenityResponse> {
      public getAmenity() {
        super("getAmenity");
      }

      public getAmenity_args getEmptyArgsInstance() {
        return new getAmenity_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TAmenityResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TAmenityResponse>() { 
          public void onComplete(TAmenityResponse o) {
            getAmenity_result result = new getAmenity_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getAmenity_result result = new getAmenity_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAmenity_args args, org.apache.thrift.async.AsyncMethodCallback<TAmenityResponse> resultHandler) throws org.apache.thrift.TException {
        iface.getAmenity(args.metadataId, args.locale,resultHandler);
      }
    }

    public static class listAmenity<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listAmenity_args, java.util.List<TAmenityResponse>> {
      public listAmenity() {
        super("listAmenity");
      }

      public listAmenity_args getEmptyArgsInstance() {
        return new listAmenity_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<TAmenityResponse>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<TAmenityResponse>>() { 
          public void onComplete(java.util.List<TAmenityResponse> o) {
            listAmenity_result result = new listAmenity_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listAmenity_result result = new listAmenity_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listAmenity_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TAmenityResponse>> resultHandler) throws org.apache.thrift.TException {
        iface.listAmenity(args.locale,resultHandler);
      }
    }

    public static class createAmenity<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createAmenity_args, TAmenityCUDResponse> {
      public createAmenity() {
        super("createAmenity");
      }

      public createAmenity_args getEmptyArgsInstance() {
        return new createAmenity_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TAmenityCUDResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TAmenityCUDResponse>() { 
          public void onComplete(TAmenityCUDResponse o) {
            createAmenity_result result = new createAmenity_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createAmenity_result result = new createAmenity_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createAmenity_args args, org.apache.thrift.async.AsyncMethodCallback<TAmenityCUDResponse> resultHandler) throws org.apache.thrift.TException {
        iface.createAmenity(args.amenity, args.locale,resultHandler);
      }
    }

    public static class getPackageTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPackageTag_args, TPackageTagResponse> {
      public getPackageTag() {
        super("getPackageTag");
      }

      public getPackageTag_args getEmptyArgsInstance() {
        return new getPackageTag_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TPackageTagResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TPackageTagResponse>() { 
          public void onComplete(TPackageTagResponse o) {
            getPackageTag_result result = new getPackageTag_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getPackageTag_result result = new getPackageTag_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPackageTag_args args, org.apache.thrift.async.AsyncMethodCallback<TPackageTagResponse> resultHandler) throws org.apache.thrift.TException {
        iface.getPackageTag(args.metadataId, args.locale,resultHandler);
      }
    }

    public static class listPackageTags<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listPackageTags_args, java.util.List<TPackageTagResponse>> {
      public listPackageTags() {
        super("listPackageTags");
      }

      public listPackageTags_args getEmptyArgsInstance() {
        return new listPackageTags_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPackageTagResponse>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPackageTagResponse>>() { 
          public void onComplete(java.util.List<TPackageTagResponse> o) {
            listPackageTags_result result = new listPackageTags_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listPackageTags_result result = new listPackageTags_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listPackageTags_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPackageTagResponse>> resultHandler) throws org.apache.thrift.TException {
        iface.listPackageTags(args.locale,resultHandler);
      }
    }

    public static class createPackageTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createPackageTag_args, TPackageTagCUDResponse> {
      public createPackageTag() {
        super("createPackageTag");
      }

      public createPackageTag_args getEmptyArgsInstance() {
        return new createPackageTag_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TPackageTagCUDResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TPackageTagCUDResponse>() { 
          public void onComplete(TPackageTagCUDResponse o) {
            createPackageTag_result result = new createPackageTag_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createPackageTag_result result = new createPackageTag_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createPackageTag_args args, org.apache.thrift.async.AsyncMethodCallback<TPackageTagCUDResponse> resultHandler) throws org.apache.thrift.TException {
        iface.createPackageTag(args.packageTag, args.locale,resultHandler);
      }
    }

    public static class getHotelCategory<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHotelCategory_args, THotelCategoryResponse> {
      public getHotelCategory() {
        super("getHotelCategory");
      }

      public getHotelCategory_args getEmptyArgsInstance() {
        return new getHotelCategory_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<THotelCategoryResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<THotelCategoryResponse>() { 
          public void onComplete(THotelCategoryResponse o) {
            getHotelCategory_result result = new getHotelCategory_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getHotelCategory_result result = new getHotelCategory_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getHotelCategory_args args, org.apache.thrift.async.AsyncMethodCallback<THotelCategoryResponse> resultHandler) throws org.apache.thrift.TException {
        iface.getHotelCategory(args.metadataId, args.locale,resultHandler);
      }
    }

    public static class listHotelCategories<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listHotelCategories_args, java.util.List<THotelCategoryResponse>> {
      public listHotelCategories() {
        super("listHotelCategories");
      }

      public listHotelCategories_args getEmptyArgsInstance() {
        return new listHotelCategories_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<THotelCategoryResponse>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<THotelCategoryResponse>>() { 
          public void onComplete(java.util.List<THotelCategoryResponse> o) {
            listHotelCategories_result result = new listHotelCategories_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listHotelCategories_result result = new listHotelCategories_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listHotelCategories_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<THotelCategoryResponse>> resultHandler) throws org.apache.thrift.TException {
        iface.listHotelCategories(args.locale,resultHandler);
      }
    }

    public static class createHotelCategory<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createHotelCategory_args, THotelCategoryCUDResponse> {
      public createHotelCategory() {
        super("createHotelCategory");
      }

      public createHotelCategory_args getEmptyArgsInstance() {
        return new createHotelCategory_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<THotelCategoryCUDResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<THotelCategoryCUDResponse>() { 
          public void onComplete(THotelCategoryCUDResponse o) {
            createHotelCategory_result result = new createHotelCategory_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createHotelCategory_result result = new createHotelCategory_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createHotelCategory_args args, org.apache.thrift.async.AsyncMethodCallback<THotelCategoryCUDResponse> resultHandler) throws org.apache.thrift.TException {
        iface.createHotelCategory(args.hotelCategory, args.locale,resultHandler);
      }
    }

    public static class getRoomCategory<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRoomCategory_args, TRoomCategoryResponse> {
      public getRoomCategory() {
        super("getRoomCategory");
      }

      public getRoomCategory_args getEmptyArgsInstance() {
        return new getRoomCategory_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TRoomCategoryResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TRoomCategoryResponse>() { 
          public void onComplete(TRoomCategoryResponse o) {
            getRoomCategory_result result = new getRoomCategory_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getRoomCategory_result result = new getRoomCategory_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRoomCategory_args args, org.apache.thrift.async.AsyncMethodCallback<TRoomCategoryResponse> resultHandler) throws org.apache.thrift.TException {
        iface.getRoomCategory(args.metadataId, args.locale,resultHandler);
      }
    }

    public static class listRoomCategories<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listRoomCategories_args, java.util.List<TRoomCategoryResponse>> {
      public listRoomCategories() {
        super("listRoomCategories");
      }

      public listRoomCategories_args getEmptyArgsInstance() {
        return new listRoomCategories_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<TRoomCategoryResponse>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<TRoomCategoryResponse>>() { 
          public void onComplete(java.util.List<TRoomCategoryResponse> o) {
            listRoomCategories_result result = new listRoomCategories_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listRoomCategories_result result = new listRoomCategories_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listRoomCategories_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TRoomCategoryResponse>> resultHandler) throws org.apache.thrift.TException {
        iface.listRoomCategories(args.locale,resultHandler);
      }
    }

    public static class createRoomCategory<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createRoomCategory_args, TRoomCategoryCUDResponse> {
      public createRoomCategory() {
        super("createRoomCategory");
      }

      public createRoomCategory_args getEmptyArgsInstance() {
        return new createRoomCategory_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TRoomCategoryCUDResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TRoomCategoryCUDResponse>() { 
          public void onComplete(TRoomCategoryCUDResponse o) {
            createRoomCategory_result result = new createRoomCategory_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createRoomCategory_result result = new createRoomCategory_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createRoomCategory_args args, org.apache.thrift.async.AsyncMethodCallback<TRoomCategoryCUDResponse> resultHandler) throws org.apache.thrift.TException {
        iface.createRoomCategory(args.roomCategory, args.locale,resultHandler);
      }
    }

    public static class getMiceTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMiceTag_args, TMiceTagResponse> {
      public getMiceTag() {
        super("getMiceTag");
      }

      public getMiceTag_args getEmptyArgsInstance() {
        return new getMiceTag_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TMiceTagResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TMiceTagResponse>() { 
          public void onComplete(TMiceTagResponse o) {
            getMiceTag_result result = new getMiceTag_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getMiceTag_result result = new getMiceTag_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMiceTag_args args, org.apache.thrift.async.AsyncMethodCallback<TMiceTagResponse> resultHandler) throws org.apache.thrift.TException {
        iface.getMiceTag(args.metadataId, args.locale,resultHandler);
      }
    }

    public static class listMiceTags<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listMiceTags_args, java.util.List<TMiceTagResponse>> {
      public listMiceTags() {
        super("listMiceTags");
      }

      public listMiceTags_args getEmptyArgsInstance() {
        return new listMiceTags_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<TMiceTagResponse>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<TMiceTagResponse>>() { 
          public void onComplete(java.util.List<TMiceTagResponse> o) {
            listMiceTags_result result = new listMiceTags_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listMiceTags_result result = new listMiceTags_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listMiceTags_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TMiceTagResponse>> resultHandler) throws org.apache.thrift.TException {
        iface.listMiceTags(args.locale,resultHandler);
      }
    }

    public static class createMiceTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createMiceTag_args, TMiceTagCUDResponse> {
      public createMiceTag() {
        super("createMiceTag");
      }

      public createMiceTag_args getEmptyArgsInstance() {
        return new createMiceTag_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TMiceTagCUDResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TMiceTagCUDResponse>() { 
          public void onComplete(TMiceTagCUDResponse o) {
            createMiceTag_result result = new createMiceTag_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createMiceTag_result result = new createMiceTag_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createMiceTag_args args, org.apache.thrift.async.AsyncMethodCallback<TMiceTagCUDResponse> resultHandler) throws org.apache.thrift.TException {
        iface.createMiceTag(args.miceTag, args.locale,resultHandler);
      }
    }

    public static class getMiceEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMiceEvent_args, TMiceEventResponse> {
      public getMiceEvent() {
        super("getMiceEvent");
      }

      public getMiceEvent_args getEmptyArgsInstance() {
        return new getMiceEvent_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TMiceEventResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TMiceEventResponse>() { 
          public void onComplete(TMiceEventResponse o) {
            getMiceEvent_result result = new getMiceEvent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getMiceEvent_result result = new getMiceEvent_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMiceEvent_args args, org.apache.thrift.async.AsyncMethodCallback<TMiceEventResponse> resultHandler) throws org.apache.thrift.TException {
        iface.getMiceEvent(args.metadataId, args.locale,resultHandler);
      }
    }

    public static class listMiceEvents<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listMiceEvents_args, java.util.List<TMiceEventResponse>> {
      public listMiceEvents() {
        super("listMiceEvents");
      }

      public listMiceEvents_args getEmptyArgsInstance() {
        return new listMiceEvents_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<TMiceEventResponse>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<TMiceEventResponse>>() { 
          public void onComplete(java.util.List<TMiceEventResponse> o) {
            listMiceEvents_result result = new listMiceEvents_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listMiceEvents_result result = new listMiceEvents_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listMiceEvents_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TMiceEventResponse>> resultHandler) throws org.apache.thrift.TException {
        iface.listMiceEvents(args.locale,resultHandler);
      }
    }

    public static class createMiceEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createMiceEvent_args, TMiceEventCUDResponse> {
      public createMiceEvent() {
        super("createMiceEvent");
      }

      public createMiceEvent_args getEmptyArgsInstance() {
        return new createMiceEvent_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TMiceEventCUDResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TMiceEventCUDResponse>() { 
          public void onComplete(TMiceEventCUDResponse o) {
            createMiceEvent_result result = new createMiceEvent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createMiceEvent_result result = new createMiceEvent_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createMiceEvent_args args, org.apache.thrift.async.AsyncMethodCallback<TMiceEventCUDResponse> resultHandler) throws org.apache.thrift.TException {
        iface.createMiceEvent(args.miceEventName, args.locale,resultHandler);
      }
    }

    public static class getMiceCity<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMiceCity_args, TMiceCityResponse> {
      public getMiceCity() {
        super("getMiceCity");
      }

      public getMiceCity_args getEmptyArgsInstance() {
        return new getMiceCity_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TMiceCityResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TMiceCityResponse>() { 
          public void onComplete(TMiceCityResponse o) {
            getMiceCity_result result = new getMiceCity_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getMiceCity_result result = new getMiceCity_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMiceCity_args args, org.apache.thrift.async.AsyncMethodCallback<TMiceCityResponse> resultHandler) throws org.apache.thrift.TException {
        iface.getMiceCity(args.metadataId, args.locale,resultHandler);
      }
    }

    public static class listMiceCities<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listMiceCities_args, java.util.List<TMiceCityResponse>> {
      public listMiceCities() {
        super("listMiceCities");
      }

      public listMiceCities_args getEmptyArgsInstance() {
        return new listMiceCities_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<TMiceCityResponse>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<TMiceCityResponse>>() { 
          public void onComplete(java.util.List<TMiceCityResponse> o) {
            listMiceCities_result result = new listMiceCities_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listMiceCities_result result = new listMiceCities_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listMiceCities_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TMiceCityResponse>> resultHandler) throws org.apache.thrift.TException {
        iface.listMiceCities(args.locale,resultHandler);
      }
    }

    public static class createMiceCity<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createMiceCity_args, TMiceCityCUDResponse> {
      public createMiceCity() {
        super("createMiceCity");
      }

      public createMiceCity_args getEmptyArgsInstance() {
        return new createMiceCity_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TMiceCityCUDResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TMiceCityCUDResponse>() { 
          public void onComplete(TMiceCityCUDResponse o) {
            createMiceCity_result result = new createMiceCity_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createMiceCity_result result = new createMiceCity_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createMiceCity_args args, org.apache.thrift.async.AsyncMethodCallback<TMiceCityCUDResponse> resultHandler) throws org.apache.thrift.TException {
        iface.createMiceCity(args.miceCityName, args.locale,resultHandler);
      }
    }

    public static class getPropertyLevel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPropertyLevel_args, TPropertyLevelResponse> {
      public getPropertyLevel() {
        super("getPropertyLevel");
      }

      public getPropertyLevel_args getEmptyArgsInstance() {
        return new getPropertyLevel_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TPropertyLevelResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TPropertyLevelResponse>() { 
          public void onComplete(TPropertyLevelResponse o) {
            getPropertyLevel_result result = new getPropertyLevel_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getPropertyLevel_result result = new getPropertyLevel_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPropertyLevel_args args, org.apache.thrift.async.AsyncMethodCallback<TPropertyLevelResponse> resultHandler) throws org.apache.thrift.TException {
        iface.getPropertyLevel(args.metadataId, args.locale,resultHandler);
      }
    }

    public static class listPropertyLevel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listPropertyLevel_args, java.util.List<TPropertyLevelResponse>> {
      public listPropertyLevel() {
        super("listPropertyLevel");
      }

      public listPropertyLevel_args getEmptyArgsInstance() {
        return new listPropertyLevel_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPropertyLevelResponse>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPropertyLevelResponse>>() { 
          public void onComplete(java.util.List<TPropertyLevelResponse> o) {
            listPropertyLevel_result result = new listPropertyLevel_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listPropertyLevel_result result = new listPropertyLevel_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listPropertyLevel_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPropertyLevelResponse>> resultHandler) throws org.apache.thrift.TException {
        iface.listPropertyLevel(args.locale,resultHandler);
      }
    }

    public static class createPropertyLevel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createPropertyLevel_args, TPropertyLevelResponse> {
      public createPropertyLevel() {
        super("createPropertyLevel");
      }

      public createPropertyLevel_args getEmptyArgsInstance() {
        return new createPropertyLevel_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TPropertyLevelResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TPropertyLevelResponse>() { 
          public void onComplete(TPropertyLevelResponse o) {
            createPropertyLevel_result result = new createPropertyLevel_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createPropertyLevel_result result = new createPropertyLevel_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createPropertyLevel_args args, org.apache.thrift.async.AsyncMethodCallback<TPropertyLevelResponse> resultHandler) throws org.apache.thrift.TException {
        iface.createPropertyLevel(args.propertyLevelData, args.locale,resultHandler);
      }
    }

    public static class getToiletConfiguration<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getToiletConfiguration_args, TToiletConfigurationResponse> {
      public getToiletConfiguration() {
        super("getToiletConfiguration");
      }

      public getToiletConfiguration_args getEmptyArgsInstance() {
        return new getToiletConfiguration_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TToiletConfigurationResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TToiletConfigurationResponse>() { 
          public void onComplete(TToiletConfigurationResponse o) {
            getToiletConfiguration_result result = new getToiletConfiguration_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getToiletConfiguration_result result = new getToiletConfiguration_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getToiletConfiguration_args args, org.apache.thrift.async.AsyncMethodCallback<TToiletConfigurationResponse> resultHandler) throws org.apache.thrift.TException {
        iface.getToiletConfiguration(args.metadataId, args.locale,resultHandler);
      }
    }

    public static class listToiletConfiguration<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listToiletConfiguration_args, java.util.List<TToiletConfigurationResponse>> {
      public listToiletConfiguration() {
        super("listToiletConfiguration");
      }

      public listToiletConfiguration_args getEmptyArgsInstance() {
        return new listToiletConfiguration_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<TToiletConfigurationResponse>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<TToiletConfigurationResponse>>() { 
          public void onComplete(java.util.List<TToiletConfigurationResponse> o) {
            listToiletConfiguration_result result = new listToiletConfiguration_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listToiletConfiguration_result result = new listToiletConfiguration_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listToiletConfiguration_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TToiletConfigurationResponse>> resultHandler) throws org.apache.thrift.TException {
        iface.listToiletConfiguration(args.locale,resultHandler);
      }
    }

    public static class createToilet<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createToilet_args, TToiletConfigurationResponse> {
      public createToilet() {
        super("createToilet");
      }

      public createToilet_args getEmptyArgsInstance() {
        return new createToilet_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TToiletConfigurationResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TToiletConfigurationResponse>() { 
          public void onComplete(TToiletConfigurationResponse o) {
            createToilet_result result = new createToilet_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createToilet_result result = new createToilet_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createToilet_args args, org.apache.thrift.async.AsyncMethodCallback<TToiletConfigurationResponse> resultHandler) throws org.apache.thrift.TException {
        iface.createToilet(args.toiletData, args.locale,resultHandler);
      }
    }

    public static class getPaymentPolicy<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPaymentPolicy_args, TPaymentPolicyResponse> {
      public getPaymentPolicy() {
        super("getPaymentPolicy");
      }

      public getPaymentPolicy_args getEmptyArgsInstance() {
        return new getPaymentPolicy_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TPaymentPolicyResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TPaymentPolicyResponse>() { 
          public void onComplete(TPaymentPolicyResponse o) {
            getPaymentPolicy_result result = new getPaymentPolicy_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getPaymentPolicy_result result = new getPaymentPolicy_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPaymentPolicy_args args, org.apache.thrift.async.AsyncMethodCallback<TPaymentPolicyResponse> resultHandler) throws org.apache.thrift.TException {
        iface.getPaymentPolicy(args.metadataId, args.locale,resultHandler);
      }
    }

    public static class listPaymentPolicies<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listPaymentPolicies_args, java.util.List<TPaymentPolicyResponse>> {
      public listPaymentPolicies() {
        super("listPaymentPolicies");
      }

      public listPaymentPolicies_args getEmptyArgsInstance() {
        return new listPaymentPolicies_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPaymentPolicyResponse>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPaymentPolicyResponse>>() { 
          public void onComplete(java.util.List<TPaymentPolicyResponse> o) {
            listPaymentPolicies_result result = new listPaymentPolicies_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listPaymentPolicies_result result = new listPaymentPolicies_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listPaymentPolicies_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPaymentPolicyResponse>> resultHandler) throws org.apache.thrift.TException {
        iface.listPaymentPolicies(args.locale,resultHandler);
      }
    }

    public static class createPaymentPolicy<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createPaymentPolicy_args, TPaymentPolicyCUDResponse> {
      public createPaymentPolicy() {
        super("createPaymentPolicy");
      }

      public createPaymentPolicy_args getEmptyArgsInstance() {
        return new createPaymentPolicy_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TPaymentPolicyCUDResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TPaymentPolicyCUDResponse>() { 
          public void onComplete(TPaymentPolicyCUDResponse o) {
            createPaymentPolicy_result result = new createPaymentPolicy_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createPaymentPolicy_result result = new createPaymentPolicy_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createPaymentPolicy_args args, org.apache.thrift.async.AsyncMethodCallback<TPaymentPolicyCUDResponse> resultHandler) throws org.apache.thrift.TException {
        iface.createPaymentPolicy(args.description, args.rule, args.locale,resultHandler);
      }
    }

    public static class getCancellationPolicy<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCancellationPolicy_args, TCancellationPolicyResponse> {
      public getCancellationPolicy() {
        super("getCancellationPolicy");
      }

      public getCancellationPolicy_args getEmptyArgsInstance() {
        return new getCancellationPolicy_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TCancellationPolicyResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TCancellationPolicyResponse>() { 
          public void onComplete(TCancellationPolicyResponse o) {
            getCancellationPolicy_result result = new getCancellationPolicy_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getCancellationPolicy_result result = new getCancellationPolicy_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCancellationPolicy_args args, org.apache.thrift.async.AsyncMethodCallback<TCancellationPolicyResponse> resultHandler) throws org.apache.thrift.TException {
        iface.getCancellationPolicy(args.metadataId, args.locale,resultHandler);
      }
    }

    public static class listCancellationPolicies<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listCancellationPolicies_args, java.util.List<TCancellationPolicyResponse>> {
      public listCancellationPolicies() {
        super("listCancellationPolicies");
      }

      public listCancellationPolicies_args getEmptyArgsInstance() {
        return new listCancellationPolicies_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<TCancellationPolicyResponse>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<TCancellationPolicyResponse>>() { 
          public void onComplete(java.util.List<TCancellationPolicyResponse> o) {
            listCancellationPolicies_result result = new listCancellationPolicies_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listCancellationPolicies_result result = new listCancellationPolicies_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listCancellationPolicies_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TCancellationPolicyResponse>> resultHandler) throws org.apache.thrift.TException {
        iface.listCancellationPolicies(args.locale,resultHandler);
      }
    }

    public static class createCancellationPolicy<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createCancellationPolicy_args, TCancellationPolicyCUDResponse> {
      public createCancellationPolicy() {
        super("createCancellationPolicy");
      }

      public createCancellationPolicy_args getEmptyArgsInstance() {
        return new createCancellationPolicy_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TCancellationPolicyCUDResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TCancellationPolicyCUDResponse>() { 
          public void onComplete(TCancellationPolicyCUDResponse o) {
            createCancellationPolicy_result result = new createCancellationPolicy_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createCancellationPolicy_result result = new createCancellationPolicy_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createCancellationPolicy_args args, org.apache.thrift.async.AsyncMethodCallback<TCancellationPolicyCUDResponse> resultHandler) throws org.apache.thrift.TException {
        iface.createCancellationPolicy(args.description, args.rule, args.locale,resultHandler);
      }
    }

    public static class listHotSellingPackage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listHotSellingPackage_args, java.util.List<THotSellingPackageResponse>> {
      public listHotSellingPackage() {
        super("listHotSellingPackage");
      }

      public listHotSellingPackage_args getEmptyArgsInstance() {
        return new listHotSellingPackage_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<THotSellingPackageResponse>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<THotSellingPackageResponse>>() { 
          public void onComplete(java.util.List<THotSellingPackageResponse> o) {
            listHotSellingPackage_result result = new listHotSellingPackage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listHotSellingPackage_result result = new listHotSellingPackage_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listHotSellingPackage_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<THotSellingPackageResponse>> resultHandler) throws org.apache.thrift.TException {
        iface.listHotSellingPackage(args.locale,resultHandler);
      }
    }

    public static class createHotSellingPackage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createHotSellingPackage_args, THotSellingPackageResponse> {
      public createHotSellingPackage() {
        super("createHotSellingPackage");
      }

      public createHotSellingPackage_args getEmptyArgsInstance() {
        return new createHotSellingPackage_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<THotSellingPackageResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<THotSellingPackageResponse>() { 
          public void onComplete(THotSellingPackageResponse o) {
            createHotSellingPackage_result result = new createHotSellingPackage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createHotSellingPackage_result result = new createHotSellingPackage_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createHotSellingPackage_args args, org.apache.thrift.async.AsyncMethodCallback<THotSellingPackageResponse> resultHandler) throws org.apache.thrift.TException {
        iface.createHotSellingPackage(args.catalogId, args.locale,resultHandler);
      }
    }

    public static class listPopularPackages<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listPopularPackages_args, java.util.List<TPopularPackageResponse>> {
      public listPopularPackages() {
        super("listPopularPackages");
      }

      public listPopularPackages_args getEmptyArgsInstance() {
        return new listPopularPackages_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPopularPackageResponse>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPopularPackageResponse>>() { 
          public void onComplete(java.util.List<TPopularPackageResponse> o) {
            listPopularPackages_result result = new listPopularPackages_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listPopularPackages_result result = new listPopularPackages_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listPopularPackages_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TPopularPackageResponse>> resultHandler) throws org.apache.thrift.TException {
        iface.listPopularPackages(args.locale,resultHandler);
      }
    }

    public static class createPopularPackage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createPopularPackage_args, TPopularPackageResponse> {
      public createPopularPackage() {
        super("createPopularPackage");
      }

      public createPopularPackage_args getEmptyArgsInstance() {
        return new createPopularPackage_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TPopularPackageResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TPopularPackageResponse>() { 
          public void onComplete(TPopularPackageResponse o) {
            createPopularPackage_result result = new createPopularPackage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createPopularPackage_result result = new createPopularPackage_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createPopularPackage_args args, org.apache.thrift.async.AsyncMethodCallback<TPopularPackageResponse> resultHandler) throws org.apache.thrift.TException {
        iface.createPopularPackage(args.catalogId, args.locale,resultHandler);
      }
    }

    public static class listOtherRecommendedPackages<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listOtherRecommendedPackages_args, java.util.List<TOtherRecommendedPackageResponse>> {
      public listOtherRecommendedPackages() {
        super("listOtherRecommendedPackages");
      }

      public listOtherRecommendedPackages_args getEmptyArgsInstance() {
        return new listOtherRecommendedPackages_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<TOtherRecommendedPackageResponse>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<TOtherRecommendedPackageResponse>>() { 
          public void onComplete(java.util.List<TOtherRecommendedPackageResponse> o) {
            listOtherRecommendedPackages_result result = new listOtherRecommendedPackages_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listOtherRecommendedPackages_result result = new listOtherRecommendedPackages_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listOtherRecommendedPackages_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TOtherRecommendedPackageResponse>> resultHandler) throws org.apache.thrift.TException {
        iface.listOtherRecommendedPackages(args.locale,resultHandler);
      }
    }

    public static class createOtherRecommendedPackage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createOtherRecommendedPackage_args, TOtherRecommendedPackageResponse> {
      public createOtherRecommendedPackage() {
        super("createOtherRecommendedPackage");
      }

      public createOtherRecommendedPackage_args getEmptyArgsInstance() {
        return new createOtherRecommendedPackage_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TOtherRecommendedPackageResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TOtherRecommendedPackageResponse>() { 
          public void onComplete(TOtherRecommendedPackageResponse o) {
            createOtherRecommendedPackage_result result = new createOtherRecommendedPackage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createOtherRecommendedPackage_result result = new createOtherRecommendedPackage_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createOtherRecommendedPackage_args args, org.apache.thrift.async.AsyncMethodCallback<TOtherRecommendedPackageResponse> resultHandler) throws org.apache.thrift.TException {
        iface.createOtherRecommendedPackage(args.catalogId, args.locale,resultHandler);
      }
    }

    public static class listOtherDestinationsToExplore<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listOtherDestinationsToExplore_args, java.util.List<TOtherDestinationToExploreResponse>> {
      public listOtherDestinationsToExplore() {
        super("listOtherDestinationsToExplore");
      }

      public listOtherDestinationsToExplore_args getEmptyArgsInstance() {
        return new listOtherDestinationsToExplore_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<TOtherDestinationToExploreResponse>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<TOtherDestinationToExploreResponse>>() { 
          public void onComplete(java.util.List<TOtherDestinationToExploreResponse> o) {
            listOtherDestinationsToExplore_result result = new listOtherDestinationsToExplore_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listOtherDestinationsToExplore_result result = new listOtherDestinationsToExplore_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listOtherDestinationsToExplore_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TOtherDestinationToExploreResponse>> resultHandler) throws org.apache.thrift.TException {
        iface.listOtherDestinationsToExplore(args.locale,resultHandler);
      }
    }

    public static class createOtherDestinationToExplore<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createOtherDestinationToExplore_args, TOtherDestinationToExploreResponse> {
      public createOtherDestinationToExplore() {
        super("createOtherDestinationToExplore");
      }

      public createOtherDestinationToExplore_args getEmptyArgsInstance() {
        return new createOtherDestinationToExplore_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TOtherDestinationToExploreResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TOtherDestinationToExploreResponse>() { 
          public void onComplete(TOtherDestinationToExploreResponse o) {
            createOtherDestinationToExplore_result result = new createOtherDestinationToExplore_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createOtherDestinationToExplore_result result = new createOtherDestinationToExplore_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createOtherDestinationToExplore_args args, org.apache.thrift.async.AsyncMethodCallback<TOtherDestinationToExploreResponse> resultHandler) throws org.apache.thrift.TException {
        iface.createOtherDestinationToExplore(args.catalogId, args.locale,resultHandler);
      }
    }

  }

  public static class getPackageDestination_args implements org.apache.thrift.TBase<getPackageDestination_args, getPackageDestination_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPackageDestination_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPackageDestination_args");

    private static final org.apache.thrift.protocol.TField METADATA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("metadataId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPackageDestination_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPackageDestination_argsTupleSchemeFactory();

    private java.lang.String metadataId; // required
    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      METADATA_ID((short)1, "metadataId"),
      LOCALE((short)2, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // METADATA_ID
            return METADATA_ID;
          case 2: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.METADATA_ID, new org.apache.thrift.meta_data.FieldMetaData("metadataId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPackageDestination_args.class, metaDataMap);
    }

    public getPackageDestination_args() {
    }

    public getPackageDestination_args(
      java.lang.String metadataId,
      java.lang.String locale)
    {
      this();
      this.metadataId = metadataId;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPackageDestination_args(getPackageDestination_args other) {
      if (other.isSetMetadataId()) {
        this.metadataId = other.metadataId;
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public getPackageDestination_args deepCopy() {
      return new getPackageDestination_args(this);
    }

    @Override
    public void clear() {
      this.metadataId = null;
      this.locale = null;
    }

    public java.lang.String getMetadataId() {
      return this.metadataId;
    }

    public void setMetadataId(java.lang.String metadataId) {
      this.metadataId = metadataId;
    }

    public void unsetMetadataId() {
      this.metadataId = null;
    }

    /** Returns true if field metadataId is set (has been assigned a value) and false otherwise */
    public boolean isSetMetadataId() {
      return this.metadataId != null;
    }

    public void setMetadataIdIsSet(boolean value) {
      if (!value) {
        this.metadataId = null;
      }
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case METADATA_ID:
        if (value == null) {
          unsetMetadataId();
        } else {
          setMetadataId((java.lang.String)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case METADATA_ID:
        return getMetadataId();

      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case METADATA_ID:
        return isSetMetadataId();
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getPackageDestination_args)
        return this.equals((getPackageDestination_args)that);
      return false;
    }

    public boolean equals(getPackageDestination_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_metadataId = true && this.isSetMetadataId();
      boolean that_present_metadataId = true && that.isSetMetadataId();
      if (this_present_metadataId || that_present_metadataId) {
        if (!(this_present_metadataId && that_present_metadataId))
          return false;
        if (!this.metadataId.equals(that.metadataId))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMetadataId()) ? 131071 : 524287);
      if (isSetMetadataId())
        hashCode = hashCode * 8191 + metadataId.hashCode();

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getPackageDestination_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMetadataId()).compareTo(other.isSetMetadataId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMetadataId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadataId, other.metadataId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getPackageDestination_args(");
      boolean first = true;

      sb.append("metadataId:");
      if (this.metadataId == null) {
        sb.append("null");
      } else {
        sb.append(this.metadataId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPackageDestination_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPackageDestination_argsStandardScheme getScheme() {
        return new getPackageDestination_argsStandardScheme();
      }
    }

    private static class getPackageDestination_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPackageDestination_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPackageDestination_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // METADATA_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.metadataId = iprot.readString();
                struct.setMetadataIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPackageDestination_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.metadataId != null) {
          oprot.writeFieldBegin(METADATA_ID_FIELD_DESC);
          oprot.writeString(struct.metadataId);
          oprot.writeFieldEnd();
        }
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPackageDestination_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPackageDestination_argsTupleScheme getScheme() {
        return new getPackageDestination_argsTupleScheme();
      }
    }

    private static class getPackageDestination_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPackageDestination_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPackageDestination_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMetadataId()) {
          optionals.set(0);
        }
        if (struct.isSetLocale()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMetadataId()) {
          oprot.writeString(struct.metadataId);
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPackageDestination_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.metadataId = iprot.readString();
          struct.setMetadataIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getPackageDestination_result implements org.apache.thrift.TBase<getPackageDestination_result, getPackageDestination_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPackageDestination_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPackageDestination_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPackageDestination_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPackageDestination_resultTupleSchemeFactory();

    private TPackageDestinationResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPackageDestinationResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPackageDestination_result.class, metaDataMap);
    }

    public getPackageDestination_result() {
    }

    public getPackageDestination_result(
      TPackageDestinationResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPackageDestination_result(getPackageDestination_result other) {
      if (other.isSetSuccess()) {
        this.success = new TPackageDestinationResponse(other.success);
      }
    }

    public getPackageDestination_result deepCopy() {
      return new getPackageDestination_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TPackageDestinationResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TPackageDestinationResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TPackageDestinationResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getPackageDestination_result)
        return this.equals((getPackageDestination_result)that);
      return false;
    }

    public boolean equals(getPackageDestination_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getPackageDestination_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getPackageDestination_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPackageDestination_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPackageDestination_resultStandardScheme getScheme() {
        return new getPackageDestination_resultStandardScheme();
      }
    }

    private static class getPackageDestination_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPackageDestination_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPackageDestination_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TPackageDestinationResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPackageDestination_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPackageDestination_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPackageDestination_resultTupleScheme getScheme() {
        return new getPackageDestination_resultTupleScheme();
      }
    }

    private static class getPackageDestination_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPackageDestination_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPackageDestination_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPackageDestination_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TPackageDestinationResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listPackageDestinations_args implements org.apache.thrift.TBase<listPackageDestinations_args, listPackageDestinations_args._Fields>, java.io.Serializable, Cloneable, Comparable<listPackageDestinations_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listPackageDestinations_args");

    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listPackageDestinations_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listPackageDestinations_argsTupleSchemeFactory();

    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCALE((short)1, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listPackageDestinations_args.class, metaDataMap);
    }

    public listPackageDestinations_args() {
    }

    public listPackageDestinations_args(
      java.lang.String locale)
    {
      this();
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listPackageDestinations_args(listPackageDestinations_args other) {
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public listPackageDestinations_args deepCopy() {
      return new listPackageDestinations_args(this);
    }

    @Override
    public void clear() {
      this.locale = null;
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listPackageDestinations_args)
        return this.equals((listPackageDestinations_args)that);
      return false;
    }

    public boolean equals(listPackageDestinations_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listPackageDestinations_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listPackageDestinations_args(");
      boolean first = true;

      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listPackageDestinations_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listPackageDestinations_argsStandardScheme getScheme() {
        return new listPackageDestinations_argsStandardScheme();
      }
    }

    private static class listPackageDestinations_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listPackageDestinations_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listPackageDestinations_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listPackageDestinations_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listPackageDestinations_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listPackageDestinations_argsTupleScheme getScheme() {
        return new listPackageDestinations_argsTupleScheme();
      }
    }

    private static class listPackageDestinations_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listPackageDestinations_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listPackageDestinations_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetLocale()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listPackageDestinations_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listPackageDestinations_result implements org.apache.thrift.TBase<listPackageDestinations_result, listPackageDestinations_result._Fields>, java.io.Serializable, Cloneable, Comparable<listPackageDestinations_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listPackageDestinations_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listPackageDestinations_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listPackageDestinations_resultTupleSchemeFactory();

    private java.util.List<TPackageDestinationResponse> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPackageDestinationResponse.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listPackageDestinations_result.class, metaDataMap);
    }

    public listPackageDestinations_result() {
    }

    public listPackageDestinations_result(
      java.util.List<TPackageDestinationResponse> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listPackageDestinations_result(listPackageDestinations_result other) {
      if (other.isSetSuccess()) {
        java.util.List<TPackageDestinationResponse> __this__success = new java.util.ArrayList<TPackageDestinationResponse>(other.success.size());
        for (TPackageDestinationResponse other_element : other.success) {
          __this__success.add(new TPackageDestinationResponse(other_element));
        }
        this.success = __this__success;
      }
    }

    public listPackageDestinations_result deepCopy() {
      return new listPackageDestinations_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TPackageDestinationResponse> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TPackageDestinationResponse elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<TPackageDestinationResponse>();
      }
      this.success.add(elem);
    }

    public java.util.List<TPackageDestinationResponse> getSuccess() {
      return this.success;
    }

    public void setSuccess(java.util.List<TPackageDestinationResponse> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<TPackageDestinationResponse>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listPackageDestinations_result)
        return this.equals((listPackageDestinations_result)that);
      return false;
    }

    public boolean equals(listPackageDestinations_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listPackageDestinations_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listPackageDestinations_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listPackageDestinations_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listPackageDestinations_resultStandardScheme getScheme() {
        return new listPackageDestinations_resultStandardScheme();
      }
    }

    private static class listPackageDestinations_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listPackageDestinations_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listPackageDestinations_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list400 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<TPackageDestinationResponse>(_list400.size);
                  TPackageDestinationResponse _elem401;
                  for (int _i402 = 0; _i402 < _list400.size; ++_i402)
                  {
                    _elem401 = new TPackageDestinationResponse();
                    _elem401.read(iprot);
                    struct.success.add(_elem401);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listPackageDestinations_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TPackageDestinationResponse _iter403 : struct.success)
            {
              _iter403.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listPackageDestinations_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listPackageDestinations_resultTupleScheme getScheme() {
        return new listPackageDestinations_resultTupleScheme();
      }
    }

    private static class listPackageDestinations_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listPackageDestinations_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listPackageDestinations_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TPackageDestinationResponse _iter404 : struct.success)
            {
              _iter404.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listPackageDestinations_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list405 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<TPackageDestinationResponse>(_list405.size);
            TPackageDestinationResponse _elem406;
            for (int _i407 = 0; _i407 < _list405.size; ++_i407)
            {
              _elem406 = new TPackageDestinationResponse();
              _elem406.read(iprot);
              struct.success.add(_elem406);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createPackageDestination_args implements org.apache.thrift.TBase<createPackageDestination_args, createPackageDestination_args._Fields>, java.io.Serializable, Cloneable, Comparable<createPackageDestination_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createPackageDestination_args");

    private static final org.apache.thrift.protocol.TField PACKAGE_DESTINATION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("packageDestinationName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createPackageDestination_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createPackageDestination_argsTupleSchemeFactory();

    private java.lang.String packageDestinationName; // required
    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PACKAGE_DESTINATION_NAME((short)1, "packageDestinationName"),
      LOCALE((short)2, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PACKAGE_DESTINATION_NAME
            return PACKAGE_DESTINATION_NAME;
          case 2: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PACKAGE_DESTINATION_NAME, new org.apache.thrift.meta_data.FieldMetaData("packageDestinationName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createPackageDestination_args.class, metaDataMap);
    }

    public createPackageDestination_args() {
    }

    public createPackageDestination_args(
      java.lang.String packageDestinationName,
      java.lang.String locale)
    {
      this();
      this.packageDestinationName = packageDestinationName;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createPackageDestination_args(createPackageDestination_args other) {
      if (other.isSetPackageDestinationName()) {
        this.packageDestinationName = other.packageDestinationName;
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public createPackageDestination_args deepCopy() {
      return new createPackageDestination_args(this);
    }

    @Override
    public void clear() {
      this.packageDestinationName = null;
      this.locale = null;
    }

    public java.lang.String getPackageDestinationName() {
      return this.packageDestinationName;
    }

    public void setPackageDestinationName(java.lang.String packageDestinationName) {
      this.packageDestinationName = packageDestinationName;
    }

    public void unsetPackageDestinationName() {
      this.packageDestinationName = null;
    }

    /** Returns true if field packageDestinationName is set (has been assigned a value) and false otherwise */
    public boolean isSetPackageDestinationName() {
      return this.packageDestinationName != null;
    }

    public void setPackageDestinationNameIsSet(boolean value) {
      if (!value) {
        this.packageDestinationName = null;
      }
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PACKAGE_DESTINATION_NAME:
        if (value == null) {
          unsetPackageDestinationName();
        } else {
          setPackageDestinationName((java.lang.String)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PACKAGE_DESTINATION_NAME:
        return getPackageDestinationName();

      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PACKAGE_DESTINATION_NAME:
        return isSetPackageDestinationName();
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createPackageDestination_args)
        return this.equals((createPackageDestination_args)that);
      return false;
    }

    public boolean equals(createPackageDestination_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_packageDestinationName = true && this.isSetPackageDestinationName();
      boolean that_present_packageDestinationName = true && that.isSetPackageDestinationName();
      if (this_present_packageDestinationName || that_present_packageDestinationName) {
        if (!(this_present_packageDestinationName && that_present_packageDestinationName))
          return false;
        if (!this.packageDestinationName.equals(that.packageDestinationName))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPackageDestinationName()) ? 131071 : 524287);
      if (isSetPackageDestinationName())
        hashCode = hashCode * 8191 + packageDestinationName.hashCode();

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createPackageDestination_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPackageDestinationName()).compareTo(other.isSetPackageDestinationName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPackageDestinationName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.packageDestinationName, other.packageDestinationName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createPackageDestination_args(");
      boolean first = true;

      sb.append("packageDestinationName:");
      if (this.packageDestinationName == null) {
        sb.append("null");
      } else {
        sb.append(this.packageDestinationName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createPackageDestination_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createPackageDestination_argsStandardScheme getScheme() {
        return new createPackageDestination_argsStandardScheme();
      }
    }

    private static class createPackageDestination_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createPackageDestination_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createPackageDestination_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PACKAGE_DESTINATION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.packageDestinationName = iprot.readString();
                struct.setPackageDestinationNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createPackageDestination_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.packageDestinationName != null) {
          oprot.writeFieldBegin(PACKAGE_DESTINATION_NAME_FIELD_DESC);
          oprot.writeString(struct.packageDestinationName);
          oprot.writeFieldEnd();
        }
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createPackageDestination_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createPackageDestination_argsTupleScheme getScheme() {
        return new createPackageDestination_argsTupleScheme();
      }
    }

    private static class createPackageDestination_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createPackageDestination_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createPackageDestination_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPackageDestinationName()) {
          optionals.set(0);
        }
        if (struct.isSetLocale()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPackageDestinationName()) {
          oprot.writeString(struct.packageDestinationName);
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createPackageDestination_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.packageDestinationName = iprot.readString();
          struct.setPackageDestinationNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createPackageDestination_result implements org.apache.thrift.TBase<createPackageDestination_result, createPackageDestination_result._Fields>, java.io.Serializable, Cloneable, Comparable<createPackageDestination_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createPackageDestination_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createPackageDestination_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createPackageDestination_resultTupleSchemeFactory();

    private TPackageDestinationCUDResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPackageDestinationCUDResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createPackageDestination_result.class, metaDataMap);
    }

    public createPackageDestination_result() {
    }

    public createPackageDestination_result(
      TPackageDestinationCUDResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createPackageDestination_result(createPackageDestination_result other) {
      if (other.isSetSuccess()) {
        this.success = new TPackageDestinationCUDResponse(other.success);
      }
    }

    public createPackageDestination_result deepCopy() {
      return new createPackageDestination_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TPackageDestinationCUDResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TPackageDestinationCUDResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TPackageDestinationCUDResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createPackageDestination_result)
        return this.equals((createPackageDestination_result)that);
      return false;
    }

    public boolean equals(createPackageDestination_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createPackageDestination_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createPackageDestination_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createPackageDestination_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createPackageDestination_resultStandardScheme getScheme() {
        return new createPackageDestination_resultStandardScheme();
      }
    }

    private static class createPackageDestination_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createPackageDestination_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createPackageDestination_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TPackageDestinationCUDResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createPackageDestination_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createPackageDestination_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createPackageDestination_resultTupleScheme getScheme() {
        return new createPackageDestination_resultTupleScheme();
      }
    }

    private static class createPackageDestination_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createPackageDestination_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createPackageDestination_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createPackageDestination_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TPackageDestinationCUDResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getPackageDuration_args implements org.apache.thrift.TBase<getPackageDuration_args, getPackageDuration_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPackageDuration_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPackageDuration_args");

    private static final org.apache.thrift.protocol.TField METADATA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("metadataId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPackageDuration_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPackageDuration_argsTupleSchemeFactory();

    private java.lang.String metadataId; // required
    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      METADATA_ID((short)1, "metadataId"),
      LOCALE((short)2, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // METADATA_ID
            return METADATA_ID;
          case 2: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.METADATA_ID, new org.apache.thrift.meta_data.FieldMetaData("metadataId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPackageDuration_args.class, metaDataMap);
    }

    public getPackageDuration_args() {
    }

    public getPackageDuration_args(
      java.lang.String metadataId,
      java.lang.String locale)
    {
      this();
      this.metadataId = metadataId;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPackageDuration_args(getPackageDuration_args other) {
      if (other.isSetMetadataId()) {
        this.metadataId = other.metadataId;
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public getPackageDuration_args deepCopy() {
      return new getPackageDuration_args(this);
    }

    @Override
    public void clear() {
      this.metadataId = null;
      this.locale = null;
    }

    public java.lang.String getMetadataId() {
      return this.metadataId;
    }

    public void setMetadataId(java.lang.String metadataId) {
      this.metadataId = metadataId;
    }

    public void unsetMetadataId() {
      this.metadataId = null;
    }

    /** Returns true if field metadataId is set (has been assigned a value) and false otherwise */
    public boolean isSetMetadataId() {
      return this.metadataId != null;
    }

    public void setMetadataIdIsSet(boolean value) {
      if (!value) {
        this.metadataId = null;
      }
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case METADATA_ID:
        if (value == null) {
          unsetMetadataId();
        } else {
          setMetadataId((java.lang.String)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case METADATA_ID:
        return getMetadataId();

      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case METADATA_ID:
        return isSetMetadataId();
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getPackageDuration_args)
        return this.equals((getPackageDuration_args)that);
      return false;
    }

    public boolean equals(getPackageDuration_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_metadataId = true && this.isSetMetadataId();
      boolean that_present_metadataId = true && that.isSetMetadataId();
      if (this_present_metadataId || that_present_metadataId) {
        if (!(this_present_metadataId && that_present_metadataId))
          return false;
        if (!this.metadataId.equals(that.metadataId))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMetadataId()) ? 131071 : 524287);
      if (isSetMetadataId())
        hashCode = hashCode * 8191 + metadataId.hashCode();

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getPackageDuration_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMetadataId()).compareTo(other.isSetMetadataId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMetadataId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadataId, other.metadataId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getPackageDuration_args(");
      boolean first = true;

      sb.append("metadataId:");
      if (this.metadataId == null) {
        sb.append("null");
      } else {
        sb.append(this.metadataId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPackageDuration_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPackageDuration_argsStandardScheme getScheme() {
        return new getPackageDuration_argsStandardScheme();
      }
    }

    private static class getPackageDuration_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPackageDuration_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPackageDuration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // METADATA_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.metadataId = iprot.readString();
                struct.setMetadataIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPackageDuration_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.metadataId != null) {
          oprot.writeFieldBegin(METADATA_ID_FIELD_DESC);
          oprot.writeString(struct.metadataId);
          oprot.writeFieldEnd();
        }
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPackageDuration_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPackageDuration_argsTupleScheme getScheme() {
        return new getPackageDuration_argsTupleScheme();
      }
    }

    private static class getPackageDuration_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPackageDuration_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPackageDuration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMetadataId()) {
          optionals.set(0);
        }
        if (struct.isSetLocale()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMetadataId()) {
          oprot.writeString(struct.metadataId);
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPackageDuration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.metadataId = iprot.readString();
          struct.setMetadataIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getPackageDuration_result implements org.apache.thrift.TBase<getPackageDuration_result, getPackageDuration_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPackageDuration_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPackageDuration_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPackageDuration_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPackageDuration_resultTupleSchemeFactory();

    private TPackageDurationResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPackageDurationResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPackageDuration_result.class, metaDataMap);
    }

    public getPackageDuration_result() {
    }

    public getPackageDuration_result(
      TPackageDurationResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPackageDuration_result(getPackageDuration_result other) {
      if (other.isSetSuccess()) {
        this.success = new TPackageDurationResponse(other.success);
      }
    }

    public getPackageDuration_result deepCopy() {
      return new getPackageDuration_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TPackageDurationResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TPackageDurationResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TPackageDurationResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getPackageDuration_result)
        return this.equals((getPackageDuration_result)that);
      return false;
    }

    public boolean equals(getPackageDuration_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getPackageDuration_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getPackageDuration_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPackageDuration_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPackageDuration_resultStandardScheme getScheme() {
        return new getPackageDuration_resultStandardScheme();
      }
    }

    private static class getPackageDuration_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPackageDuration_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPackageDuration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TPackageDurationResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPackageDuration_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPackageDuration_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPackageDuration_resultTupleScheme getScheme() {
        return new getPackageDuration_resultTupleScheme();
      }
    }

    private static class getPackageDuration_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPackageDuration_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPackageDuration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPackageDuration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TPackageDurationResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listPackageDurations_args implements org.apache.thrift.TBase<listPackageDurations_args, listPackageDurations_args._Fields>, java.io.Serializable, Cloneable, Comparable<listPackageDurations_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listPackageDurations_args");

    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listPackageDurations_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listPackageDurations_argsTupleSchemeFactory();

    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCALE((short)1, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listPackageDurations_args.class, metaDataMap);
    }

    public listPackageDurations_args() {
    }

    public listPackageDurations_args(
      java.lang.String locale)
    {
      this();
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listPackageDurations_args(listPackageDurations_args other) {
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public listPackageDurations_args deepCopy() {
      return new listPackageDurations_args(this);
    }

    @Override
    public void clear() {
      this.locale = null;
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listPackageDurations_args)
        return this.equals((listPackageDurations_args)that);
      return false;
    }

    public boolean equals(listPackageDurations_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listPackageDurations_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listPackageDurations_args(");
      boolean first = true;

      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listPackageDurations_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listPackageDurations_argsStandardScheme getScheme() {
        return new listPackageDurations_argsStandardScheme();
      }
    }

    private static class listPackageDurations_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listPackageDurations_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listPackageDurations_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listPackageDurations_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listPackageDurations_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listPackageDurations_argsTupleScheme getScheme() {
        return new listPackageDurations_argsTupleScheme();
      }
    }

    private static class listPackageDurations_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listPackageDurations_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listPackageDurations_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetLocale()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listPackageDurations_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listPackageDurations_result implements org.apache.thrift.TBase<listPackageDurations_result, listPackageDurations_result._Fields>, java.io.Serializable, Cloneable, Comparable<listPackageDurations_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listPackageDurations_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listPackageDurations_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listPackageDurations_resultTupleSchemeFactory();

    private java.util.List<TPackageDurationResponse> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPackageDurationResponse.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listPackageDurations_result.class, metaDataMap);
    }

    public listPackageDurations_result() {
    }

    public listPackageDurations_result(
      java.util.List<TPackageDurationResponse> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listPackageDurations_result(listPackageDurations_result other) {
      if (other.isSetSuccess()) {
        java.util.List<TPackageDurationResponse> __this__success = new java.util.ArrayList<TPackageDurationResponse>(other.success.size());
        for (TPackageDurationResponse other_element : other.success) {
          __this__success.add(new TPackageDurationResponse(other_element));
        }
        this.success = __this__success;
      }
    }

    public listPackageDurations_result deepCopy() {
      return new listPackageDurations_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TPackageDurationResponse> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TPackageDurationResponse elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<TPackageDurationResponse>();
      }
      this.success.add(elem);
    }

    public java.util.List<TPackageDurationResponse> getSuccess() {
      return this.success;
    }

    public void setSuccess(java.util.List<TPackageDurationResponse> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<TPackageDurationResponse>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listPackageDurations_result)
        return this.equals((listPackageDurations_result)that);
      return false;
    }

    public boolean equals(listPackageDurations_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listPackageDurations_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listPackageDurations_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listPackageDurations_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listPackageDurations_resultStandardScheme getScheme() {
        return new listPackageDurations_resultStandardScheme();
      }
    }

    private static class listPackageDurations_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listPackageDurations_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listPackageDurations_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list408 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<TPackageDurationResponse>(_list408.size);
                  TPackageDurationResponse _elem409;
                  for (int _i410 = 0; _i410 < _list408.size; ++_i410)
                  {
                    _elem409 = new TPackageDurationResponse();
                    _elem409.read(iprot);
                    struct.success.add(_elem409);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listPackageDurations_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TPackageDurationResponse _iter411 : struct.success)
            {
              _iter411.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listPackageDurations_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listPackageDurations_resultTupleScheme getScheme() {
        return new listPackageDurations_resultTupleScheme();
      }
    }

    private static class listPackageDurations_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listPackageDurations_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listPackageDurations_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TPackageDurationResponse _iter412 : struct.success)
            {
              _iter412.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listPackageDurations_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list413 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<TPackageDurationResponse>(_list413.size);
            TPackageDurationResponse _elem414;
            for (int _i415 = 0; _i415 < _list413.size; ++_i415)
            {
              _elem414 = new TPackageDurationResponse();
              _elem414.read(iprot);
              struct.success.add(_elem414);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createPackageDuration_args implements org.apache.thrift.TBase<createPackageDuration_args, createPackageDuration_args._Fields>, java.io.Serializable, Cloneable, Comparable<createPackageDuration_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createPackageDuration_args");

    private static final org.apache.thrift.protocol.TField PACKAGE_DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("packageDuration", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createPackageDuration_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createPackageDuration_argsTupleSchemeFactory();

    private java.lang.String packageDuration; // required
    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PACKAGE_DURATION((short)1, "packageDuration"),
      LOCALE((short)2, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PACKAGE_DURATION
            return PACKAGE_DURATION;
          case 2: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PACKAGE_DURATION, new org.apache.thrift.meta_data.FieldMetaData("packageDuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createPackageDuration_args.class, metaDataMap);
    }

    public createPackageDuration_args() {
    }

    public createPackageDuration_args(
      java.lang.String packageDuration,
      java.lang.String locale)
    {
      this();
      this.packageDuration = packageDuration;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createPackageDuration_args(createPackageDuration_args other) {
      if (other.isSetPackageDuration()) {
        this.packageDuration = other.packageDuration;
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public createPackageDuration_args deepCopy() {
      return new createPackageDuration_args(this);
    }

    @Override
    public void clear() {
      this.packageDuration = null;
      this.locale = null;
    }

    public java.lang.String getPackageDuration() {
      return this.packageDuration;
    }

    public void setPackageDuration(java.lang.String packageDuration) {
      this.packageDuration = packageDuration;
    }

    public void unsetPackageDuration() {
      this.packageDuration = null;
    }

    /** Returns true if field packageDuration is set (has been assigned a value) and false otherwise */
    public boolean isSetPackageDuration() {
      return this.packageDuration != null;
    }

    public void setPackageDurationIsSet(boolean value) {
      if (!value) {
        this.packageDuration = null;
      }
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PACKAGE_DURATION:
        if (value == null) {
          unsetPackageDuration();
        } else {
          setPackageDuration((java.lang.String)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PACKAGE_DURATION:
        return getPackageDuration();

      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PACKAGE_DURATION:
        return isSetPackageDuration();
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createPackageDuration_args)
        return this.equals((createPackageDuration_args)that);
      return false;
    }

    public boolean equals(createPackageDuration_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_packageDuration = true && this.isSetPackageDuration();
      boolean that_present_packageDuration = true && that.isSetPackageDuration();
      if (this_present_packageDuration || that_present_packageDuration) {
        if (!(this_present_packageDuration && that_present_packageDuration))
          return false;
        if (!this.packageDuration.equals(that.packageDuration))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPackageDuration()) ? 131071 : 524287);
      if (isSetPackageDuration())
        hashCode = hashCode * 8191 + packageDuration.hashCode();

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createPackageDuration_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPackageDuration()).compareTo(other.isSetPackageDuration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPackageDuration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.packageDuration, other.packageDuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createPackageDuration_args(");
      boolean first = true;

      sb.append("packageDuration:");
      if (this.packageDuration == null) {
        sb.append("null");
      } else {
        sb.append(this.packageDuration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createPackageDuration_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createPackageDuration_argsStandardScheme getScheme() {
        return new createPackageDuration_argsStandardScheme();
      }
    }

    private static class createPackageDuration_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createPackageDuration_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createPackageDuration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PACKAGE_DURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.packageDuration = iprot.readString();
                struct.setPackageDurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createPackageDuration_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.packageDuration != null) {
          oprot.writeFieldBegin(PACKAGE_DURATION_FIELD_DESC);
          oprot.writeString(struct.packageDuration);
          oprot.writeFieldEnd();
        }
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createPackageDuration_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createPackageDuration_argsTupleScheme getScheme() {
        return new createPackageDuration_argsTupleScheme();
      }
    }

    private static class createPackageDuration_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createPackageDuration_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createPackageDuration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPackageDuration()) {
          optionals.set(0);
        }
        if (struct.isSetLocale()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPackageDuration()) {
          oprot.writeString(struct.packageDuration);
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createPackageDuration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.packageDuration = iprot.readString();
          struct.setPackageDurationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createPackageDuration_result implements org.apache.thrift.TBase<createPackageDuration_result, createPackageDuration_result._Fields>, java.io.Serializable, Cloneable, Comparable<createPackageDuration_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createPackageDuration_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createPackageDuration_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createPackageDuration_resultTupleSchemeFactory();

    private TPackageDurationCUDResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPackageDurationCUDResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createPackageDuration_result.class, metaDataMap);
    }

    public createPackageDuration_result() {
    }

    public createPackageDuration_result(
      TPackageDurationCUDResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createPackageDuration_result(createPackageDuration_result other) {
      if (other.isSetSuccess()) {
        this.success = new TPackageDurationCUDResponse(other.success);
      }
    }

    public createPackageDuration_result deepCopy() {
      return new createPackageDuration_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TPackageDurationCUDResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TPackageDurationCUDResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TPackageDurationCUDResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createPackageDuration_result)
        return this.equals((createPackageDuration_result)that);
      return false;
    }

    public boolean equals(createPackageDuration_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createPackageDuration_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createPackageDuration_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createPackageDuration_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createPackageDuration_resultStandardScheme getScheme() {
        return new createPackageDuration_resultStandardScheme();
      }
    }

    private static class createPackageDuration_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createPackageDuration_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createPackageDuration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TPackageDurationCUDResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createPackageDuration_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createPackageDuration_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createPackageDuration_resultTupleScheme getScheme() {
        return new createPackageDuration_resultTupleScheme();
      }
    }

    private static class createPackageDuration_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createPackageDuration_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createPackageDuration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createPackageDuration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TPackageDurationCUDResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMonth_args implements org.apache.thrift.TBase<getMonth_args, getMonth_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMonth_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMonth_args");

    private static final org.apache.thrift.protocol.TField METADATA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("metadataId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMonth_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMonth_argsTupleSchemeFactory();

    private java.lang.String metadataId; // required
    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      METADATA_ID((short)1, "metadataId"),
      LOCALE((short)2, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // METADATA_ID
            return METADATA_ID;
          case 2: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.METADATA_ID, new org.apache.thrift.meta_data.FieldMetaData("metadataId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMonth_args.class, metaDataMap);
    }

    public getMonth_args() {
    }

    public getMonth_args(
      java.lang.String metadataId,
      java.lang.String locale)
    {
      this();
      this.metadataId = metadataId;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMonth_args(getMonth_args other) {
      if (other.isSetMetadataId()) {
        this.metadataId = other.metadataId;
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public getMonth_args deepCopy() {
      return new getMonth_args(this);
    }

    @Override
    public void clear() {
      this.metadataId = null;
      this.locale = null;
    }

    public java.lang.String getMetadataId() {
      return this.metadataId;
    }

    public void setMetadataId(java.lang.String metadataId) {
      this.metadataId = metadataId;
    }

    public void unsetMetadataId() {
      this.metadataId = null;
    }

    /** Returns true if field metadataId is set (has been assigned a value) and false otherwise */
    public boolean isSetMetadataId() {
      return this.metadataId != null;
    }

    public void setMetadataIdIsSet(boolean value) {
      if (!value) {
        this.metadataId = null;
      }
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case METADATA_ID:
        if (value == null) {
          unsetMetadataId();
        } else {
          setMetadataId((java.lang.String)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case METADATA_ID:
        return getMetadataId();

      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case METADATA_ID:
        return isSetMetadataId();
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMonth_args)
        return this.equals((getMonth_args)that);
      return false;
    }

    public boolean equals(getMonth_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_metadataId = true && this.isSetMetadataId();
      boolean that_present_metadataId = true && that.isSetMetadataId();
      if (this_present_metadataId || that_present_metadataId) {
        if (!(this_present_metadataId && that_present_metadataId))
          return false;
        if (!this.metadataId.equals(that.metadataId))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMetadataId()) ? 131071 : 524287);
      if (isSetMetadataId())
        hashCode = hashCode * 8191 + metadataId.hashCode();

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getMonth_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMetadataId()).compareTo(other.isSetMetadataId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMetadataId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadataId, other.metadataId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMonth_args(");
      boolean first = true;

      sb.append("metadataId:");
      if (this.metadataId == null) {
        sb.append("null");
      } else {
        sb.append(this.metadataId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMonth_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMonth_argsStandardScheme getScheme() {
        return new getMonth_argsStandardScheme();
      }
    }

    private static class getMonth_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMonth_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMonth_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // METADATA_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.metadataId = iprot.readString();
                struct.setMetadataIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMonth_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.metadataId != null) {
          oprot.writeFieldBegin(METADATA_ID_FIELD_DESC);
          oprot.writeString(struct.metadataId);
          oprot.writeFieldEnd();
        }
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMonth_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMonth_argsTupleScheme getScheme() {
        return new getMonth_argsTupleScheme();
      }
    }

    private static class getMonth_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMonth_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMonth_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMetadataId()) {
          optionals.set(0);
        }
        if (struct.isSetLocale()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMetadataId()) {
          oprot.writeString(struct.metadataId);
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMonth_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.metadataId = iprot.readString();
          struct.setMetadataIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMonth_result implements org.apache.thrift.TBase<getMonth_result, getMonth_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMonth_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMonth_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMonth_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMonth_resultTupleSchemeFactory();

    private TMonthResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMonthResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMonth_result.class, metaDataMap);
    }

    public getMonth_result() {
    }

    public getMonth_result(
      TMonthResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMonth_result(getMonth_result other) {
      if (other.isSetSuccess()) {
        this.success = new TMonthResponse(other.success);
      }
    }

    public getMonth_result deepCopy() {
      return new getMonth_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TMonthResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TMonthResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TMonthResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMonth_result)
        return this.equals((getMonth_result)that);
      return false;
    }

    public boolean equals(getMonth_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getMonth_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMonth_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMonth_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMonth_resultStandardScheme getScheme() {
        return new getMonth_resultStandardScheme();
      }
    }

    private static class getMonth_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMonth_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMonth_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TMonthResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMonth_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMonth_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMonth_resultTupleScheme getScheme() {
        return new getMonth_resultTupleScheme();
      }
    }

    private static class getMonth_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMonth_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMonth_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMonth_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TMonthResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listMonths_args implements org.apache.thrift.TBase<listMonths_args, listMonths_args._Fields>, java.io.Serializable, Cloneable, Comparable<listMonths_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listMonths_args");

    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listMonths_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listMonths_argsTupleSchemeFactory();

    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCALE((short)1, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listMonths_args.class, metaDataMap);
    }

    public listMonths_args() {
    }

    public listMonths_args(
      java.lang.String locale)
    {
      this();
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listMonths_args(listMonths_args other) {
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public listMonths_args deepCopy() {
      return new listMonths_args(this);
    }

    @Override
    public void clear() {
      this.locale = null;
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listMonths_args)
        return this.equals((listMonths_args)that);
      return false;
    }

    public boolean equals(listMonths_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listMonths_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listMonths_args(");
      boolean first = true;

      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listMonths_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listMonths_argsStandardScheme getScheme() {
        return new listMonths_argsStandardScheme();
      }
    }

    private static class listMonths_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listMonths_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listMonths_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listMonths_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listMonths_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listMonths_argsTupleScheme getScheme() {
        return new listMonths_argsTupleScheme();
      }
    }

    private static class listMonths_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listMonths_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listMonths_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetLocale()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listMonths_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listMonths_result implements org.apache.thrift.TBase<listMonths_result, listMonths_result._Fields>, java.io.Serializable, Cloneable, Comparable<listMonths_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listMonths_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listMonths_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listMonths_resultTupleSchemeFactory();

    private java.util.List<TMonthResponse> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMonthResponse.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listMonths_result.class, metaDataMap);
    }

    public listMonths_result() {
    }

    public listMonths_result(
      java.util.List<TMonthResponse> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listMonths_result(listMonths_result other) {
      if (other.isSetSuccess()) {
        java.util.List<TMonthResponse> __this__success = new java.util.ArrayList<TMonthResponse>(other.success.size());
        for (TMonthResponse other_element : other.success) {
          __this__success.add(new TMonthResponse(other_element));
        }
        this.success = __this__success;
      }
    }

    public listMonths_result deepCopy() {
      return new listMonths_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TMonthResponse> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TMonthResponse elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<TMonthResponse>();
      }
      this.success.add(elem);
    }

    public java.util.List<TMonthResponse> getSuccess() {
      return this.success;
    }

    public void setSuccess(java.util.List<TMonthResponse> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<TMonthResponse>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listMonths_result)
        return this.equals((listMonths_result)that);
      return false;
    }

    public boolean equals(listMonths_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listMonths_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listMonths_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listMonths_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listMonths_resultStandardScheme getScheme() {
        return new listMonths_resultStandardScheme();
      }
    }

    private static class listMonths_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listMonths_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listMonths_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list416 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<TMonthResponse>(_list416.size);
                  TMonthResponse _elem417;
                  for (int _i418 = 0; _i418 < _list416.size; ++_i418)
                  {
                    _elem417 = new TMonthResponse();
                    _elem417.read(iprot);
                    struct.success.add(_elem417);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listMonths_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TMonthResponse _iter419 : struct.success)
            {
              _iter419.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listMonths_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listMonths_resultTupleScheme getScheme() {
        return new listMonths_resultTupleScheme();
      }
    }

    private static class listMonths_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listMonths_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listMonths_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TMonthResponse _iter420 : struct.success)
            {
              _iter420.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listMonths_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list421 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<TMonthResponse>(_list421.size);
            TMonthResponse _elem422;
            for (int _i423 = 0; _i423 < _list421.size; ++_i423)
            {
              _elem422 = new TMonthResponse();
              _elem422.read(iprot);
              struct.success.add(_elem422);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listBlogs_args implements org.apache.thrift.TBase<listBlogs_args, listBlogs_args._Fields>, java.io.Serializable, Cloneable, Comparable<listBlogs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listBlogs_args");

    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listBlogs_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listBlogs_argsTupleSchemeFactory();

    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCALE((short)1, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listBlogs_args.class, metaDataMap);
    }

    public listBlogs_args() {
    }

    public listBlogs_args(
      java.lang.String locale)
    {
      this();
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listBlogs_args(listBlogs_args other) {
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public listBlogs_args deepCopy() {
      return new listBlogs_args(this);
    }

    @Override
    public void clear() {
      this.locale = null;
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listBlogs_args)
        return this.equals((listBlogs_args)that);
      return false;
    }

    public boolean equals(listBlogs_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listBlogs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listBlogs_args(");
      boolean first = true;

      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listBlogs_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listBlogs_argsStandardScheme getScheme() {
        return new listBlogs_argsStandardScheme();
      }
    }

    private static class listBlogs_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listBlogs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listBlogs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listBlogs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listBlogs_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listBlogs_argsTupleScheme getScheme() {
        return new listBlogs_argsTupleScheme();
      }
    }

    private static class listBlogs_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listBlogs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listBlogs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetLocale()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listBlogs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listBlogs_result implements org.apache.thrift.TBase<listBlogs_result, listBlogs_result._Fields>, java.io.Serializable, Cloneable, Comparable<listBlogs_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listBlogs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listBlogs_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listBlogs_resultTupleSchemeFactory();

    private java.util.List<TBlogResponse> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBlogResponse.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listBlogs_result.class, metaDataMap);
    }

    public listBlogs_result() {
    }

    public listBlogs_result(
      java.util.List<TBlogResponse> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listBlogs_result(listBlogs_result other) {
      if (other.isSetSuccess()) {
        java.util.List<TBlogResponse> __this__success = new java.util.ArrayList<TBlogResponse>(other.success.size());
        for (TBlogResponse other_element : other.success) {
          __this__success.add(new TBlogResponse(other_element));
        }
        this.success = __this__success;
      }
    }

    public listBlogs_result deepCopy() {
      return new listBlogs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TBlogResponse> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TBlogResponse elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<TBlogResponse>();
      }
      this.success.add(elem);
    }

    public java.util.List<TBlogResponse> getSuccess() {
      return this.success;
    }

    public void setSuccess(java.util.List<TBlogResponse> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<TBlogResponse>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listBlogs_result)
        return this.equals((listBlogs_result)that);
      return false;
    }

    public boolean equals(listBlogs_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listBlogs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listBlogs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listBlogs_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listBlogs_resultStandardScheme getScheme() {
        return new listBlogs_resultStandardScheme();
      }
    }

    private static class listBlogs_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listBlogs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listBlogs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list424 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<TBlogResponse>(_list424.size);
                  TBlogResponse _elem425;
                  for (int _i426 = 0; _i426 < _list424.size; ++_i426)
                  {
                    _elem425 = new TBlogResponse();
                    _elem425.read(iprot);
                    struct.success.add(_elem425);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listBlogs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TBlogResponse _iter427 : struct.success)
            {
              _iter427.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listBlogs_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listBlogs_resultTupleScheme getScheme() {
        return new listBlogs_resultTupleScheme();
      }
    }

    private static class listBlogs_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listBlogs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listBlogs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TBlogResponse _iter428 : struct.success)
            {
              _iter428.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listBlogs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list429 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<TBlogResponse>(_list429.size);
            TBlogResponse _elem430;
            for (int _i431 = 0; _i431 < _list429.size; ++_i431)
            {
              _elem430 = new TBlogResponse();
              _elem430.read(iprot);
              struct.success.add(_elem430);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listUserStories_args implements org.apache.thrift.TBase<listUserStories_args, listUserStories_args._Fields>, java.io.Serializable, Cloneable, Comparable<listUserStories_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listUserStories_args");

    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listUserStories_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listUserStories_argsTupleSchemeFactory();

    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCALE((short)1, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listUserStories_args.class, metaDataMap);
    }

    public listUserStories_args() {
    }

    public listUserStories_args(
      java.lang.String locale)
    {
      this();
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listUserStories_args(listUserStories_args other) {
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public listUserStories_args deepCopy() {
      return new listUserStories_args(this);
    }

    @Override
    public void clear() {
      this.locale = null;
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listUserStories_args)
        return this.equals((listUserStories_args)that);
      return false;
    }

    public boolean equals(listUserStories_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listUserStories_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listUserStories_args(");
      boolean first = true;

      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listUserStories_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listUserStories_argsStandardScheme getScheme() {
        return new listUserStories_argsStandardScheme();
      }
    }

    private static class listUserStories_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listUserStories_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listUserStories_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listUserStories_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listUserStories_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listUserStories_argsTupleScheme getScheme() {
        return new listUserStories_argsTupleScheme();
      }
    }

    private static class listUserStories_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listUserStories_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listUserStories_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetLocale()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listUserStories_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listUserStories_result implements org.apache.thrift.TBase<listUserStories_result, listUserStories_result._Fields>, java.io.Serializable, Cloneable, Comparable<listUserStories_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listUserStories_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listUserStories_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listUserStories_resultTupleSchemeFactory();

    private java.util.List<TUserStoryResponse> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TUserStoryResponse.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listUserStories_result.class, metaDataMap);
    }

    public listUserStories_result() {
    }

    public listUserStories_result(
      java.util.List<TUserStoryResponse> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listUserStories_result(listUserStories_result other) {
      if (other.isSetSuccess()) {
        java.util.List<TUserStoryResponse> __this__success = new java.util.ArrayList<TUserStoryResponse>(other.success.size());
        for (TUserStoryResponse other_element : other.success) {
          __this__success.add(new TUserStoryResponse(other_element));
        }
        this.success = __this__success;
      }
    }

    public listUserStories_result deepCopy() {
      return new listUserStories_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TUserStoryResponse> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TUserStoryResponse elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<TUserStoryResponse>();
      }
      this.success.add(elem);
    }

    public java.util.List<TUserStoryResponse> getSuccess() {
      return this.success;
    }

    public void setSuccess(java.util.List<TUserStoryResponse> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<TUserStoryResponse>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listUserStories_result)
        return this.equals((listUserStories_result)that);
      return false;
    }

    public boolean equals(listUserStories_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listUserStories_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listUserStories_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listUserStories_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listUserStories_resultStandardScheme getScheme() {
        return new listUserStories_resultStandardScheme();
      }
    }

    private static class listUserStories_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listUserStories_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listUserStories_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list432 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<TUserStoryResponse>(_list432.size);
                  TUserStoryResponse _elem433;
                  for (int _i434 = 0; _i434 < _list432.size; ++_i434)
                  {
                    _elem433 = new TUserStoryResponse();
                    _elem433.read(iprot);
                    struct.success.add(_elem433);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listUserStories_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TUserStoryResponse _iter435 : struct.success)
            {
              _iter435.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listUserStories_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listUserStories_resultTupleScheme getScheme() {
        return new listUserStories_resultTupleScheme();
      }
    }

    private static class listUserStories_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listUserStories_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listUserStories_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TUserStoryResponse _iter436 : struct.success)
            {
              _iter436.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listUserStories_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list437 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<TUserStoryResponse>(_list437.size);
            TUserStoryResponse _elem438;
            for (int _i439 = 0; _i439 < _list437.size; ++_i439)
            {
              _elem438 = new TUserStoryResponse();
              _elem438.read(iprot);
              struct.success.add(_elem438);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getPackageInclusion_args implements org.apache.thrift.TBase<getPackageInclusion_args, getPackageInclusion_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPackageInclusion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPackageInclusion_args");

    private static final org.apache.thrift.protocol.TField METADATA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("metadataId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPackageInclusion_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPackageInclusion_argsTupleSchemeFactory();

    private java.lang.String metadataId; // required
    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      METADATA_ID((short)1, "metadataId"),
      LOCALE((short)2, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // METADATA_ID
            return METADATA_ID;
          case 2: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.METADATA_ID, new org.apache.thrift.meta_data.FieldMetaData("metadataId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPackageInclusion_args.class, metaDataMap);
    }

    public getPackageInclusion_args() {
    }

    public getPackageInclusion_args(
      java.lang.String metadataId,
      java.lang.String locale)
    {
      this();
      this.metadataId = metadataId;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPackageInclusion_args(getPackageInclusion_args other) {
      if (other.isSetMetadataId()) {
        this.metadataId = other.metadataId;
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public getPackageInclusion_args deepCopy() {
      return new getPackageInclusion_args(this);
    }

    @Override
    public void clear() {
      this.metadataId = null;
      this.locale = null;
    }

    public java.lang.String getMetadataId() {
      return this.metadataId;
    }

    public void setMetadataId(java.lang.String metadataId) {
      this.metadataId = metadataId;
    }

    public void unsetMetadataId() {
      this.metadataId = null;
    }

    /** Returns true if field metadataId is set (has been assigned a value) and false otherwise */
    public boolean isSetMetadataId() {
      return this.metadataId != null;
    }

    public void setMetadataIdIsSet(boolean value) {
      if (!value) {
        this.metadataId = null;
      }
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case METADATA_ID:
        if (value == null) {
          unsetMetadataId();
        } else {
          setMetadataId((java.lang.String)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case METADATA_ID:
        return getMetadataId();

      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case METADATA_ID:
        return isSetMetadataId();
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getPackageInclusion_args)
        return this.equals((getPackageInclusion_args)that);
      return false;
    }

    public boolean equals(getPackageInclusion_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_metadataId = true && this.isSetMetadataId();
      boolean that_present_metadataId = true && that.isSetMetadataId();
      if (this_present_metadataId || that_present_metadataId) {
        if (!(this_present_metadataId && that_present_metadataId))
          return false;
        if (!this.metadataId.equals(that.metadataId))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMetadataId()) ? 131071 : 524287);
      if (isSetMetadataId())
        hashCode = hashCode * 8191 + metadataId.hashCode();

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getPackageInclusion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMetadataId()).compareTo(other.isSetMetadataId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMetadataId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadataId, other.metadataId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getPackageInclusion_args(");
      boolean first = true;

      sb.append("metadataId:");
      if (this.metadataId == null) {
        sb.append("null");
      } else {
        sb.append(this.metadataId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPackageInclusion_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPackageInclusion_argsStandardScheme getScheme() {
        return new getPackageInclusion_argsStandardScheme();
      }
    }

    private static class getPackageInclusion_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPackageInclusion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPackageInclusion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // METADATA_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.metadataId = iprot.readString();
                struct.setMetadataIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPackageInclusion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.metadataId != null) {
          oprot.writeFieldBegin(METADATA_ID_FIELD_DESC);
          oprot.writeString(struct.metadataId);
          oprot.writeFieldEnd();
        }
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPackageInclusion_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPackageInclusion_argsTupleScheme getScheme() {
        return new getPackageInclusion_argsTupleScheme();
      }
    }

    private static class getPackageInclusion_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPackageInclusion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPackageInclusion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMetadataId()) {
          optionals.set(0);
        }
        if (struct.isSetLocale()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMetadataId()) {
          oprot.writeString(struct.metadataId);
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPackageInclusion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.metadataId = iprot.readString();
          struct.setMetadataIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getPackageInclusion_result implements org.apache.thrift.TBase<getPackageInclusion_result, getPackageInclusion_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPackageInclusion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPackageInclusion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPackageInclusion_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPackageInclusion_resultTupleSchemeFactory();

    private TPackageInclusionResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPackageInclusionResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPackageInclusion_result.class, metaDataMap);
    }

    public getPackageInclusion_result() {
    }

    public getPackageInclusion_result(
      TPackageInclusionResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPackageInclusion_result(getPackageInclusion_result other) {
      if (other.isSetSuccess()) {
        this.success = new TPackageInclusionResponse(other.success);
      }
    }

    public getPackageInclusion_result deepCopy() {
      return new getPackageInclusion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TPackageInclusionResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TPackageInclusionResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TPackageInclusionResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getPackageInclusion_result)
        return this.equals((getPackageInclusion_result)that);
      return false;
    }

    public boolean equals(getPackageInclusion_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getPackageInclusion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getPackageInclusion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPackageInclusion_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPackageInclusion_resultStandardScheme getScheme() {
        return new getPackageInclusion_resultStandardScheme();
      }
    }

    private static class getPackageInclusion_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPackageInclusion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPackageInclusion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TPackageInclusionResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPackageInclusion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPackageInclusion_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPackageInclusion_resultTupleScheme getScheme() {
        return new getPackageInclusion_resultTupleScheme();
      }
    }

    private static class getPackageInclusion_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPackageInclusion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPackageInclusion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPackageInclusion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TPackageInclusionResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listPackageInclusions_args implements org.apache.thrift.TBase<listPackageInclusions_args, listPackageInclusions_args._Fields>, java.io.Serializable, Cloneable, Comparable<listPackageInclusions_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listPackageInclusions_args");

    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listPackageInclusions_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listPackageInclusions_argsTupleSchemeFactory();

    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCALE((short)1, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listPackageInclusions_args.class, metaDataMap);
    }

    public listPackageInclusions_args() {
    }

    public listPackageInclusions_args(
      java.lang.String locale)
    {
      this();
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listPackageInclusions_args(listPackageInclusions_args other) {
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public listPackageInclusions_args deepCopy() {
      return new listPackageInclusions_args(this);
    }

    @Override
    public void clear() {
      this.locale = null;
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listPackageInclusions_args)
        return this.equals((listPackageInclusions_args)that);
      return false;
    }

    public boolean equals(listPackageInclusions_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listPackageInclusions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listPackageInclusions_args(");
      boolean first = true;

      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listPackageInclusions_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listPackageInclusions_argsStandardScheme getScheme() {
        return new listPackageInclusions_argsStandardScheme();
      }
    }

    private static class listPackageInclusions_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listPackageInclusions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listPackageInclusions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listPackageInclusions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listPackageInclusions_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listPackageInclusions_argsTupleScheme getScheme() {
        return new listPackageInclusions_argsTupleScheme();
      }
    }

    private static class listPackageInclusions_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listPackageInclusions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listPackageInclusions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetLocale()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listPackageInclusions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listPackageInclusions_result implements org.apache.thrift.TBase<listPackageInclusions_result, listPackageInclusions_result._Fields>, java.io.Serializable, Cloneable, Comparable<listPackageInclusions_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listPackageInclusions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listPackageInclusions_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listPackageInclusions_resultTupleSchemeFactory();

    private java.util.List<TPackageInclusionResponse> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPackageInclusionResponse.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listPackageInclusions_result.class, metaDataMap);
    }

    public listPackageInclusions_result() {
    }

    public listPackageInclusions_result(
      java.util.List<TPackageInclusionResponse> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listPackageInclusions_result(listPackageInclusions_result other) {
      if (other.isSetSuccess()) {
        java.util.List<TPackageInclusionResponse> __this__success = new java.util.ArrayList<TPackageInclusionResponse>(other.success.size());
        for (TPackageInclusionResponse other_element : other.success) {
          __this__success.add(new TPackageInclusionResponse(other_element));
        }
        this.success = __this__success;
      }
    }

    public listPackageInclusions_result deepCopy() {
      return new listPackageInclusions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TPackageInclusionResponse> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TPackageInclusionResponse elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<TPackageInclusionResponse>();
      }
      this.success.add(elem);
    }

    public java.util.List<TPackageInclusionResponse> getSuccess() {
      return this.success;
    }

    public void setSuccess(java.util.List<TPackageInclusionResponse> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<TPackageInclusionResponse>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listPackageInclusions_result)
        return this.equals((listPackageInclusions_result)that);
      return false;
    }

    public boolean equals(listPackageInclusions_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listPackageInclusions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listPackageInclusions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listPackageInclusions_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listPackageInclusions_resultStandardScheme getScheme() {
        return new listPackageInclusions_resultStandardScheme();
      }
    }

    private static class listPackageInclusions_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listPackageInclusions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listPackageInclusions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list440 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<TPackageInclusionResponse>(_list440.size);
                  TPackageInclusionResponse _elem441;
                  for (int _i442 = 0; _i442 < _list440.size; ++_i442)
                  {
                    _elem441 = new TPackageInclusionResponse();
                    _elem441.read(iprot);
                    struct.success.add(_elem441);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listPackageInclusions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TPackageInclusionResponse _iter443 : struct.success)
            {
              _iter443.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listPackageInclusions_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listPackageInclusions_resultTupleScheme getScheme() {
        return new listPackageInclusions_resultTupleScheme();
      }
    }

    private static class listPackageInclusions_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listPackageInclusions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listPackageInclusions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TPackageInclusionResponse _iter444 : struct.success)
            {
              _iter444.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listPackageInclusions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list445 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<TPackageInclusionResponse>(_list445.size);
            TPackageInclusionResponse _elem446;
            for (int _i447 = 0; _i447 < _list445.size; ++_i447)
            {
              _elem446 = new TPackageInclusionResponse();
              _elem446.read(iprot);
              struct.success.add(_elem446);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createPackageInclusion_args implements org.apache.thrift.TBase<createPackageInclusion_args, createPackageInclusion_args._Fields>, java.io.Serializable, Cloneable, Comparable<createPackageInclusion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createPackageInclusion_args");

    private static final org.apache.thrift.protocol.TField INCLUSION_FIELD_DESC = new org.apache.thrift.protocol.TField("inclusion", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createPackageInclusion_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createPackageInclusion_argsTupleSchemeFactory();

    private java.lang.String inclusion; // required
    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INCLUSION((short)1, "inclusion"),
      LOCALE((short)2, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INCLUSION
            return INCLUSION;
          case 2: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INCLUSION, new org.apache.thrift.meta_data.FieldMetaData("inclusion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createPackageInclusion_args.class, metaDataMap);
    }

    public createPackageInclusion_args() {
    }

    public createPackageInclusion_args(
      java.lang.String inclusion,
      java.lang.String locale)
    {
      this();
      this.inclusion = inclusion;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createPackageInclusion_args(createPackageInclusion_args other) {
      if (other.isSetInclusion()) {
        this.inclusion = other.inclusion;
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public createPackageInclusion_args deepCopy() {
      return new createPackageInclusion_args(this);
    }

    @Override
    public void clear() {
      this.inclusion = null;
      this.locale = null;
    }

    public java.lang.String getInclusion() {
      return this.inclusion;
    }

    public void setInclusion(java.lang.String inclusion) {
      this.inclusion = inclusion;
    }

    public void unsetInclusion() {
      this.inclusion = null;
    }

    /** Returns true if field inclusion is set (has been assigned a value) and false otherwise */
    public boolean isSetInclusion() {
      return this.inclusion != null;
    }

    public void setInclusionIsSet(boolean value) {
      if (!value) {
        this.inclusion = null;
      }
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case INCLUSION:
        if (value == null) {
          unsetInclusion();
        } else {
          setInclusion((java.lang.String)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case INCLUSION:
        return getInclusion();

      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case INCLUSION:
        return isSetInclusion();
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createPackageInclusion_args)
        return this.equals((createPackageInclusion_args)that);
      return false;
    }

    public boolean equals(createPackageInclusion_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_inclusion = true && this.isSetInclusion();
      boolean that_present_inclusion = true && that.isSetInclusion();
      if (this_present_inclusion || that_present_inclusion) {
        if (!(this_present_inclusion && that_present_inclusion))
          return false;
        if (!this.inclusion.equals(that.inclusion))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInclusion()) ? 131071 : 524287);
      if (isSetInclusion())
        hashCode = hashCode * 8191 + inclusion.hashCode();

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createPackageInclusion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetInclusion()).compareTo(other.isSetInclusion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInclusion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inclusion, other.inclusion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createPackageInclusion_args(");
      boolean first = true;

      sb.append("inclusion:");
      if (this.inclusion == null) {
        sb.append("null");
      } else {
        sb.append(this.inclusion);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createPackageInclusion_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createPackageInclusion_argsStandardScheme getScheme() {
        return new createPackageInclusion_argsStandardScheme();
      }
    }

    private static class createPackageInclusion_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createPackageInclusion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createPackageInclusion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INCLUSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inclusion = iprot.readString();
                struct.setInclusionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createPackageInclusion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.inclusion != null) {
          oprot.writeFieldBegin(INCLUSION_FIELD_DESC);
          oprot.writeString(struct.inclusion);
          oprot.writeFieldEnd();
        }
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createPackageInclusion_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createPackageInclusion_argsTupleScheme getScheme() {
        return new createPackageInclusion_argsTupleScheme();
      }
    }

    private static class createPackageInclusion_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createPackageInclusion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createPackageInclusion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInclusion()) {
          optionals.set(0);
        }
        if (struct.isSetLocale()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetInclusion()) {
          oprot.writeString(struct.inclusion);
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createPackageInclusion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.inclusion = iprot.readString();
          struct.setInclusionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createPackageInclusion_result implements org.apache.thrift.TBase<createPackageInclusion_result, createPackageInclusion_result._Fields>, java.io.Serializable, Cloneable, Comparable<createPackageInclusion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createPackageInclusion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createPackageInclusion_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createPackageInclusion_resultTupleSchemeFactory();

    private TPackageInclusionCUDResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPackageInclusionCUDResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createPackageInclusion_result.class, metaDataMap);
    }

    public createPackageInclusion_result() {
    }

    public createPackageInclusion_result(
      TPackageInclusionCUDResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createPackageInclusion_result(createPackageInclusion_result other) {
      if (other.isSetSuccess()) {
        this.success = new TPackageInclusionCUDResponse(other.success);
      }
    }

    public createPackageInclusion_result deepCopy() {
      return new createPackageInclusion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TPackageInclusionCUDResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TPackageInclusionCUDResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TPackageInclusionCUDResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createPackageInclusion_result)
        return this.equals((createPackageInclusion_result)that);
      return false;
    }

    public boolean equals(createPackageInclusion_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createPackageInclusion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createPackageInclusion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createPackageInclusion_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createPackageInclusion_resultStandardScheme getScheme() {
        return new createPackageInclusion_resultStandardScheme();
      }
    }

    private static class createPackageInclusion_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createPackageInclusion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createPackageInclusion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TPackageInclusionCUDResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createPackageInclusion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createPackageInclusion_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createPackageInclusion_resultTupleScheme getScheme() {
        return new createPackageInclusion_resultTupleScheme();
      }
    }

    private static class createPackageInclusion_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createPackageInclusion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createPackageInclusion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createPackageInclusion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TPackageInclusionCUDResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getPackageExclusion_args implements org.apache.thrift.TBase<getPackageExclusion_args, getPackageExclusion_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPackageExclusion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPackageExclusion_args");

    private static final org.apache.thrift.protocol.TField METADATA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("metadataId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPackageExclusion_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPackageExclusion_argsTupleSchemeFactory();

    private java.lang.String metadataId; // required
    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      METADATA_ID((short)1, "metadataId"),
      LOCALE((short)2, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // METADATA_ID
            return METADATA_ID;
          case 2: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.METADATA_ID, new org.apache.thrift.meta_data.FieldMetaData("metadataId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPackageExclusion_args.class, metaDataMap);
    }

    public getPackageExclusion_args() {
    }

    public getPackageExclusion_args(
      java.lang.String metadataId,
      java.lang.String locale)
    {
      this();
      this.metadataId = metadataId;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPackageExclusion_args(getPackageExclusion_args other) {
      if (other.isSetMetadataId()) {
        this.metadataId = other.metadataId;
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public getPackageExclusion_args deepCopy() {
      return new getPackageExclusion_args(this);
    }

    @Override
    public void clear() {
      this.metadataId = null;
      this.locale = null;
    }

    public java.lang.String getMetadataId() {
      return this.metadataId;
    }

    public void setMetadataId(java.lang.String metadataId) {
      this.metadataId = metadataId;
    }

    public void unsetMetadataId() {
      this.metadataId = null;
    }

    /** Returns true if field metadataId is set (has been assigned a value) and false otherwise */
    public boolean isSetMetadataId() {
      return this.metadataId != null;
    }

    public void setMetadataIdIsSet(boolean value) {
      if (!value) {
        this.metadataId = null;
      }
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case METADATA_ID:
        if (value == null) {
          unsetMetadataId();
        } else {
          setMetadataId((java.lang.String)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case METADATA_ID:
        return getMetadataId();

      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case METADATA_ID:
        return isSetMetadataId();
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getPackageExclusion_args)
        return this.equals((getPackageExclusion_args)that);
      return false;
    }

    public boolean equals(getPackageExclusion_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_metadataId = true && this.isSetMetadataId();
      boolean that_present_metadataId = true && that.isSetMetadataId();
      if (this_present_metadataId || that_present_metadataId) {
        if (!(this_present_metadataId && that_present_metadataId))
          return false;
        if (!this.metadataId.equals(that.metadataId))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMetadataId()) ? 131071 : 524287);
      if (isSetMetadataId())
        hashCode = hashCode * 8191 + metadataId.hashCode();

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getPackageExclusion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMetadataId()).compareTo(other.isSetMetadataId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMetadataId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadataId, other.metadataId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getPackageExclusion_args(");
      boolean first = true;

      sb.append("metadataId:");
      if (this.metadataId == null) {
        sb.append("null");
      } else {
        sb.append(this.metadataId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPackageExclusion_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPackageExclusion_argsStandardScheme getScheme() {
        return new getPackageExclusion_argsStandardScheme();
      }
    }

    private static class getPackageExclusion_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPackageExclusion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPackageExclusion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // METADATA_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.metadataId = iprot.readString();
                struct.setMetadataIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPackageExclusion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.metadataId != null) {
          oprot.writeFieldBegin(METADATA_ID_FIELD_DESC);
          oprot.writeString(struct.metadataId);
          oprot.writeFieldEnd();
        }
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPackageExclusion_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPackageExclusion_argsTupleScheme getScheme() {
        return new getPackageExclusion_argsTupleScheme();
      }
    }

    private static class getPackageExclusion_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPackageExclusion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPackageExclusion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMetadataId()) {
          optionals.set(0);
        }
        if (struct.isSetLocale()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMetadataId()) {
          oprot.writeString(struct.metadataId);
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPackageExclusion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.metadataId = iprot.readString();
          struct.setMetadataIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getPackageExclusion_result implements org.apache.thrift.TBase<getPackageExclusion_result, getPackageExclusion_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPackageExclusion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPackageExclusion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPackageExclusion_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPackageExclusion_resultTupleSchemeFactory();

    private TPackageExclusionResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPackageExclusionResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPackageExclusion_result.class, metaDataMap);
    }

    public getPackageExclusion_result() {
    }

    public getPackageExclusion_result(
      TPackageExclusionResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPackageExclusion_result(getPackageExclusion_result other) {
      if (other.isSetSuccess()) {
        this.success = new TPackageExclusionResponse(other.success);
      }
    }

    public getPackageExclusion_result deepCopy() {
      return new getPackageExclusion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TPackageExclusionResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TPackageExclusionResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TPackageExclusionResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getPackageExclusion_result)
        return this.equals((getPackageExclusion_result)that);
      return false;
    }

    public boolean equals(getPackageExclusion_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getPackageExclusion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getPackageExclusion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPackageExclusion_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPackageExclusion_resultStandardScheme getScheme() {
        return new getPackageExclusion_resultStandardScheme();
      }
    }

    private static class getPackageExclusion_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPackageExclusion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPackageExclusion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TPackageExclusionResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPackageExclusion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPackageExclusion_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPackageExclusion_resultTupleScheme getScheme() {
        return new getPackageExclusion_resultTupleScheme();
      }
    }

    private static class getPackageExclusion_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPackageExclusion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPackageExclusion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPackageExclusion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TPackageExclusionResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listPackageExclusions_args implements org.apache.thrift.TBase<listPackageExclusions_args, listPackageExclusions_args._Fields>, java.io.Serializable, Cloneable, Comparable<listPackageExclusions_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listPackageExclusions_args");

    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listPackageExclusions_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listPackageExclusions_argsTupleSchemeFactory();

    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCALE((short)1, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listPackageExclusions_args.class, metaDataMap);
    }

    public listPackageExclusions_args() {
    }

    public listPackageExclusions_args(
      java.lang.String locale)
    {
      this();
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listPackageExclusions_args(listPackageExclusions_args other) {
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public listPackageExclusions_args deepCopy() {
      return new listPackageExclusions_args(this);
    }

    @Override
    public void clear() {
      this.locale = null;
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listPackageExclusions_args)
        return this.equals((listPackageExclusions_args)that);
      return false;
    }

    public boolean equals(listPackageExclusions_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listPackageExclusions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listPackageExclusions_args(");
      boolean first = true;

      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listPackageExclusions_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listPackageExclusions_argsStandardScheme getScheme() {
        return new listPackageExclusions_argsStandardScheme();
      }
    }

    private static class listPackageExclusions_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listPackageExclusions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listPackageExclusions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listPackageExclusions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listPackageExclusions_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listPackageExclusions_argsTupleScheme getScheme() {
        return new listPackageExclusions_argsTupleScheme();
      }
    }

    private static class listPackageExclusions_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listPackageExclusions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listPackageExclusions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetLocale()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listPackageExclusions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listPackageExclusions_result implements org.apache.thrift.TBase<listPackageExclusions_result, listPackageExclusions_result._Fields>, java.io.Serializable, Cloneable, Comparable<listPackageExclusions_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listPackageExclusions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listPackageExclusions_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listPackageExclusions_resultTupleSchemeFactory();

    private java.util.List<TPackageExclusionResponse> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPackageExclusionResponse.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listPackageExclusions_result.class, metaDataMap);
    }

    public listPackageExclusions_result() {
    }

    public listPackageExclusions_result(
      java.util.List<TPackageExclusionResponse> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listPackageExclusions_result(listPackageExclusions_result other) {
      if (other.isSetSuccess()) {
        java.util.List<TPackageExclusionResponse> __this__success = new java.util.ArrayList<TPackageExclusionResponse>(other.success.size());
        for (TPackageExclusionResponse other_element : other.success) {
          __this__success.add(new TPackageExclusionResponse(other_element));
        }
        this.success = __this__success;
      }
    }

    public listPackageExclusions_result deepCopy() {
      return new listPackageExclusions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TPackageExclusionResponse> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TPackageExclusionResponse elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<TPackageExclusionResponse>();
      }
      this.success.add(elem);
    }

    public java.util.List<TPackageExclusionResponse> getSuccess() {
      return this.success;
    }

    public void setSuccess(java.util.List<TPackageExclusionResponse> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<TPackageExclusionResponse>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listPackageExclusions_result)
        return this.equals((listPackageExclusions_result)that);
      return false;
    }

    public boolean equals(listPackageExclusions_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listPackageExclusions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listPackageExclusions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listPackageExclusions_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listPackageExclusions_resultStandardScheme getScheme() {
        return new listPackageExclusions_resultStandardScheme();
      }
    }

    private static class listPackageExclusions_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listPackageExclusions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listPackageExclusions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list448 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<TPackageExclusionResponse>(_list448.size);
                  TPackageExclusionResponse _elem449;
                  for (int _i450 = 0; _i450 < _list448.size; ++_i450)
                  {
                    _elem449 = new TPackageExclusionResponse();
                    _elem449.read(iprot);
                    struct.success.add(_elem449);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listPackageExclusions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TPackageExclusionResponse _iter451 : struct.success)
            {
              _iter451.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listPackageExclusions_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listPackageExclusions_resultTupleScheme getScheme() {
        return new listPackageExclusions_resultTupleScheme();
      }
    }

    private static class listPackageExclusions_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listPackageExclusions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listPackageExclusions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TPackageExclusionResponse _iter452 : struct.success)
            {
              _iter452.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listPackageExclusions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list453 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<TPackageExclusionResponse>(_list453.size);
            TPackageExclusionResponse _elem454;
            for (int _i455 = 0; _i455 < _list453.size; ++_i455)
            {
              _elem454 = new TPackageExclusionResponse();
              _elem454.read(iprot);
              struct.success.add(_elem454);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createPackageExclusion_args implements org.apache.thrift.TBase<createPackageExclusion_args, createPackageExclusion_args._Fields>, java.io.Serializable, Cloneable, Comparable<createPackageExclusion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createPackageExclusion_args");

    private static final org.apache.thrift.protocol.TField EXCLUSION_FIELD_DESC = new org.apache.thrift.protocol.TField("exclusion", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createPackageExclusion_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createPackageExclusion_argsTupleSchemeFactory();

    private java.lang.String exclusion; // required
    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXCLUSION((short)1, "exclusion"),
      LOCALE((short)2, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXCLUSION
            return EXCLUSION;
          case 2: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXCLUSION, new org.apache.thrift.meta_data.FieldMetaData("exclusion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createPackageExclusion_args.class, metaDataMap);
    }

    public createPackageExclusion_args() {
    }

    public createPackageExclusion_args(
      java.lang.String exclusion,
      java.lang.String locale)
    {
      this();
      this.exclusion = exclusion;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createPackageExclusion_args(createPackageExclusion_args other) {
      if (other.isSetExclusion()) {
        this.exclusion = other.exclusion;
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public createPackageExclusion_args deepCopy() {
      return new createPackageExclusion_args(this);
    }

    @Override
    public void clear() {
      this.exclusion = null;
      this.locale = null;
    }

    public java.lang.String getExclusion() {
      return this.exclusion;
    }

    public void setExclusion(java.lang.String exclusion) {
      this.exclusion = exclusion;
    }

    public void unsetExclusion() {
      this.exclusion = null;
    }

    /** Returns true if field exclusion is set (has been assigned a value) and false otherwise */
    public boolean isSetExclusion() {
      return this.exclusion != null;
    }

    public void setExclusionIsSet(boolean value) {
      if (!value) {
        this.exclusion = null;
      }
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EXCLUSION:
        if (value == null) {
          unsetExclusion();
        } else {
          setExclusion((java.lang.String)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EXCLUSION:
        return getExclusion();

      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EXCLUSION:
        return isSetExclusion();
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createPackageExclusion_args)
        return this.equals((createPackageExclusion_args)that);
      return false;
    }

    public boolean equals(createPackageExclusion_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_exclusion = true && this.isSetExclusion();
      boolean that_present_exclusion = true && that.isSetExclusion();
      if (this_present_exclusion || that_present_exclusion) {
        if (!(this_present_exclusion && that_present_exclusion))
          return false;
        if (!this.exclusion.equals(that.exclusion))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetExclusion()) ? 131071 : 524287);
      if (isSetExclusion())
        hashCode = hashCode * 8191 + exclusion.hashCode();

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createPackageExclusion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetExclusion()).compareTo(other.isSetExclusion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExclusion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exclusion, other.exclusion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createPackageExclusion_args(");
      boolean first = true;

      sb.append("exclusion:");
      if (this.exclusion == null) {
        sb.append("null");
      } else {
        sb.append(this.exclusion);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createPackageExclusion_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createPackageExclusion_argsStandardScheme getScheme() {
        return new createPackageExclusion_argsStandardScheme();
      }
    }

    private static class createPackageExclusion_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createPackageExclusion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createPackageExclusion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXCLUSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.exclusion = iprot.readString();
                struct.setExclusionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createPackageExclusion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.exclusion != null) {
          oprot.writeFieldBegin(EXCLUSION_FIELD_DESC);
          oprot.writeString(struct.exclusion);
          oprot.writeFieldEnd();
        }
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createPackageExclusion_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createPackageExclusion_argsTupleScheme getScheme() {
        return new createPackageExclusion_argsTupleScheme();
      }
    }

    private static class createPackageExclusion_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createPackageExclusion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createPackageExclusion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetExclusion()) {
          optionals.set(0);
        }
        if (struct.isSetLocale()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetExclusion()) {
          oprot.writeString(struct.exclusion);
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createPackageExclusion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.exclusion = iprot.readString();
          struct.setExclusionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createPackageExclusion_result implements org.apache.thrift.TBase<createPackageExclusion_result, createPackageExclusion_result._Fields>, java.io.Serializable, Cloneable, Comparable<createPackageExclusion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createPackageExclusion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createPackageExclusion_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createPackageExclusion_resultTupleSchemeFactory();

    private TPackageExclusionCUDResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPackageExclusionCUDResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createPackageExclusion_result.class, metaDataMap);
    }

    public createPackageExclusion_result() {
    }

    public createPackageExclusion_result(
      TPackageExclusionCUDResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createPackageExclusion_result(createPackageExclusion_result other) {
      if (other.isSetSuccess()) {
        this.success = new TPackageExclusionCUDResponse(other.success);
      }
    }

    public createPackageExclusion_result deepCopy() {
      return new createPackageExclusion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TPackageExclusionCUDResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TPackageExclusionCUDResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TPackageExclusionCUDResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createPackageExclusion_result)
        return this.equals((createPackageExclusion_result)that);
      return false;
    }

    public boolean equals(createPackageExclusion_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createPackageExclusion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createPackageExclusion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createPackageExclusion_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createPackageExclusion_resultStandardScheme getScheme() {
        return new createPackageExclusion_resultStandardScheme();
      }
    }

    private static class createPackageExclusion_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createPackageExclusion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createPackageExclusion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TPackageExclusionCUDResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createPackageExclusion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createPackageExclusion_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createPackageExclusion_resultTupleScheme getScheme() {
        return new createPackageExclusion_resultTupleScheme();
      }
    }

    private static class createPackageExclusion_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createPackageExclusion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createPackageExclusion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createPackageExclusion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TPackageExclusionCUDResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getRestriction_args implements org.apache.thrift.TBase<getRestriction_args, getRestriction_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRestriction_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRestriction_args");

    private static final org.apache.thrift.protocol.TField METADATA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("metadataId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRestriction_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRestriction_argsTupleSchemeFactory();

    private java.lang.String metadataId; // required
    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      METADATA_ID((short)1, "metadataId"),
      LOCALE((short)2, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // METADATA_ID
            return METADATA_ID;
          case 2: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.METADATA_ID, new org.apache.thrift.meta_data.FieldMetaData("metadataId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRestriction_args.class, metaDataMap);
    }

    public getRestriction_args() {
    }

    public getRestriction_args(
      java.lang.String metadataId,
      java.lang.String locale)
    {
      this();
      this.metadataId = metadataId;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRestriction_args(getRestriction_args other) {
      if (other.isSetMetadataId()) {
        this.metadataId = other.metadataId;
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public getRestriction_args deepCopy() {
      return new getRestriction_args(this);
    }

    @Override
    public void clear() {
      this.metadataId = null;
      this.locale = null;
    }

    public java.lang.String getMetadataId() {
      return this.metadataId;
    }

    public void setMetadataId(java.lang.String metadataId) {
      this.metadataId = metadataId;
    }

    public void unsetMetadataId() {
      this.metadataId = null;
    }

    /** Returns true if field metadataId is set (has been assigned a value) and false otherwise */
    public boolean isSetMetadataId() {
      return this.metadataId != null;
    }

    public void setMetadataIdIsSet(boolean value) {
      if (!value) {
        this.metadataId = null;
      }
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case METADATA_ID:
        if (value == null) {
          unsetMetadataId();
        } else {
          setMetadataId((java.lang.String)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case METADATA_ID:
        return getMetadataId();

      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case METADATA_ID:
        return isSetMetadataId();
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getRestriction_args)
        return this.equals((getRestriction_args)that);
      return false;
    }

    public boolean equals(getRestriction_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_metadataId = true && this.isSetMetadataId();
      boolean that_present_metadataId = true && that.isSetMetadataId();
      if (this_present_metadataId || that_present_metadataId) {
        if (!(this_present_metadataId && that_present_metadataId))
          return false;
        if (!this.metadataId.equals(that.metadataId))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMetadataId()) ? 131071 : 524287);
      if (isSetMetadataId())
        hashCode = hashCode * 8191 + metadataId.hashCode();

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getRestriction_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMetadataId()).compareTo(other.isSetMetadataId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMetadataId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadataId, other.metadataId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getRestriction_args(");
      boolean first = true;

      sb.append("metadataId:");
      if (this.metadataId == null) {
        sb.append("null");
      } else {
        sb.append(this.metadataId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRestriction_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRestriction_argsStandardScheme getScheme() {
        return new getRestriction_argsStandardScheme();
      }
    }

    private static class getRestriction_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRestriction_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRestriction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // METADATA_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.metadataId = iprot.readString();
                struct.setMetadataIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRestriction_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.metadataId != null) {
          oprot.writeFieldBegin(METADATA_ID_FIELD_DESC);
          oprot.writeString(struct.metadataId);
          oprot.writeFieldEnd();
        }
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRestriction_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRestriction_argsTupleScheme getScheme() {
        return new getRestriction_argsTupleScheme();
      }
    }

    private static class getRestriction_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRestriction_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRestriction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMetadataId()) {
          optionals.set(0);
        }
        if (struct.isSetLocale()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMetadataId()) {
          oprot.writeString(struct.metadataId);
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRestriction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.metadataId = iprot.readString();
          struct.setMetadataIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getRestriction_result implements org.apache.thrift.TBase<getRestriction_result, getRestriction_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRestriction_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRestriction_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRestriction_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRestriction_resultTupleSchemeFactory();

    private TRestrictionResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRestrictionResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRestriction_result.class, metaDataMap);
    }

    public getRestriction_result() {
    }

    public getRestriction_result(
      TRestrictionResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRestriction_result(getRestriction_result other) {
      if (other.isSetSuccess()) {
        this.success = new TRestrictionResponse(other.success);
      }
    }

    public getRestriction_result deepCopy() {
      return new getRestriction_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TRestrictionResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TRestrictionResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TRestrictionResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getRestriction_result)
        return this.equals((getRestriction_result)that);
      return false;
    }

    public boolean equals(getRestriction_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getRestriction_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getRestriction_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRestriction_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRestriction_resultStandardScheme getScheme() {
        return new getRestriction_resultStandardScheme();
      }
    }

    private static class getRestriction_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRestriction_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRestriction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TRestrictionResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRestriction_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRestriction_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRestriction_resultTupleScheme getScheme() {
        return new getRestriction_resultTupleScheme();
      }
    }

    private static class getRestriction_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRestriction_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRestriction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRestriction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TRestrictionResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listRestrictions_args implements org.apache.thrift.TBase<listRestrictions_args, listRestrictions_args._Fields>, java.io.Serializable, Cloneable, Comparable<listRestrictions_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listRestrictions_args");

    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listRestrictions_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listRestrictions_argsTupleSchemeFactory();

    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCALE((short)1, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listRestrictions_args.class, metaDataMap);
    }

    public listRestrictions_args() {
    }

    public listRestrictions_args(
      java.lang.String locale)
    {
      this();
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listRestrictions_args(listRestrictions_args other) {
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public listRestrictions_args deepCopy() {
      return new listRestrictions_args(this);
    }

    @Override
    public void clear() {
      this.locale = null;
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listRestrictions_args)
        return this.equals((listRestrictions_args)that);
      return false;
    }

    public boolean equals(listRestrictions_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listRestrictions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listRestrictions_args(");
      boolean first = true;

      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listRestrictions_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listRestrictions_argsStandardScheme getScheme() {
        return new listRestrictions_argsStandardScheme();
      }
    }

    private static class listRestrictions_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listRestrictions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listRestrictions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listRestrictions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listRestrictions_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listRestrictions_argsTupleScheme getScheme() {
        return new listRestrictions_argsTupleScheme();
      }
    }

    private static class listRestrictions_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listRestrictions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listRestrictions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetLocale()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listRestrictions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listRestrictions_result implements org.apache.thrift.TBase<listRestrictions_result, listRestrictions_result._Fields>, java.io.Serializable, Cloneable, Comparable<listRestrictions_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listRestrictions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listRestrictions_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listRestrictions_resultTupleSchemeFactory();

    private java.util.List<TRestrictionResponse> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRestrictionResponse.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listRestrictions_result.class, metaDataMap);
    }

    public listRestrictions_result() {
    }

    public listRestrictions_result(
      java.util.List<TRestrictionResponse> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listRestrictions_result(listRestrictions_result other) {
      if (other.isSetSuccess()) {
        java.util.List<TRestrictionResponse> __this__success = new java.util.ArrayList<TRestrictionResponse>(other.success.size());
        for (TRestrictionResponse other_element : other.success) {
          __this__success.add(new TRestrictionResponse(other_element));
        }
        this.success = __this__success;
      }
    }

    public listRestrictions_result deepCopy() {
      return new listRestrictions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TRestrictionResponse> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TRestrictionResponse elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<TRestrictionResponse>();
      }
      this.success.add(elem);
    }

    public java.util.List<TRestrictionResponse> getSuccess() {
      return this.success;
    }

    public void setSuccess(java.util.List<TRestrictionResponse> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<TRestrictionResponse>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listRestrictions_result)
        return this.equals((listRestrictions_result)that);
      return false;
    }

    public boolean equals(listRestrictions_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listRestrictions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listRestrictions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listRestrictions_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listRestrictions_resultStandardScheme getScheme() {
        return new listRestrictions_resultStandardScheme();
      }
    }

    private static class listRestrictions_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listRestrictions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listRestrictions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list456 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<TRestrictionResponse>(_list456.size);
                  TRestrictionResponse _elem457;
                  for (int _i458 = 0; _i458 < _list456.size; ++_i458)
                  {
                    _elem457 = new TRestrictionResponse();
                    _elem457.read(iprot);
                    struct.success.add(_elem457);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listRestrictions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TRestrictionResponse _iter459 : struct.success)
            {
              _iter459.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listRestrictions_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listRestrictions_resultTupleScheme getScheme() {
        return new listRestrictions_resultTupleScheme();
      }
    }

    private static class listRestrictions_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listRestrictions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listRestrictions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TRestrictionResponse _iter460 : struct.success)
            {
              _iter460.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listRestrictions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list461 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<TRestrictionResponse>(_list461.size);
            TRestrictionResponse _elem462;
            for (int _i463 = 0; _i463 < _list461.size; ++_i463)
            {
              _elem462 = new TRestrictionResponse();
              _elem462.read(iprot);
              struct.success.add(_elem462);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createRestriction_args implements org.apache.thrift.TBase<createRestriction_args, createRestriction_args._Fields>, java.io.Serializable, Cloneable, Comparable<createRestriction_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createRestriction_args");

    private static final org.apache.thrift.protocol.TField RESTRICTION_FIELD_DESC = new org.apache.thrift.protocol.TField("restriction", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createRestriction_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createRestriction_argsTupleSchemeFactory();

    private java.lang.String restriction; // required
    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RESTRICTION((short)1, "restriction"),
      LOCALE((short)2, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RESTRICTION
            return RESTRICTION;
          case 2: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RESTRICTION, new org.apache.thrift.meta_data.FieldMetaData("restriction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createRestriction_args.class, metaDataMap);
    }

    public createRestriction_args() {
    }

    public createRestriction_args(
      java.lang.String restriction,
      java.lang.String locale)
    {
      this();
      this.restriction = restriction;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createRestriction_args(createRestriction_args other) {
      if (other.isSetRestriction()) {
        this.restriction = other.restriction;
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public createRestriction_args deepCopy() {
      return new createRestriction_args(this);
    }

    @Override
    public void clear() {
      this.restriction = null;
      this.locale = null;
    }

    public java.lang.String getRestriction() {
      return this.restriction;
    }

    public void setRestriction(java.lang.String restriction) {
      this.restriction = restriction;
    }

    public void unsetRestriction() {
      this.restriction = null;
    }

    /** Returns true if field restriction is set (has been assigned a value) and false otherwise */
    public boolean isSetRestriction() {
      return this.restriction != null;
    }

    public void setRestrictionIsSet(boolean value) {
      if (!value) {
        this.restriction = null;
      }
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case RESTRICTION:
        if (value == null) {
          unsetRestriction();
        } else {
          setRestriction((java.lang.String)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case RESTRICTION:
        return getRestriction();

      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case RESTRICTION:
        return isSetRestriction();
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createRestriction_args)
        return this.equals((createRestriction_args)that);
      return false;
    }

    public boolean equals(createRestriction_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_restriction = true && this.isSetRestriction();
      boolean that_present_restriction = true && that.isSetRestriction();
      if (this_present_restriction || that_present_restriction) {
        if (!(this_present_restriction && that_present_restriction))
          return false;
        if (!this.restriction.equals(that.restriction))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRestriction()) ? 131071 : 524287);
      if (isSetRestriction())
        hashCode = hashCode * 8191 + restriction.hashCode();

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createRestriction_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRestriction()).compareTo(other.isSetRestriction());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRestriction()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.restriction, other.restriction);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createRestriction_args(");
      boolean first = true;

      sb.append("restriction:");
      if (this.restriction == null) {
        sb.append("null");
      } else {
        sb.append(this.restriction);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createRestriction_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createRestriction_argsStandardScheme getScheme() {
        return new createRestriction_argsStandardScheme();
      }
    }

    private static class createRestriction_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createRestriction_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createRestriction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RESTRICTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.restriction = iprot.readString();
                struct.setRestrictionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createRestriction_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.restriction != null) {
          oprot.writeFieldBegin(RESTRICTION_FIELD_DESC);
          oprot.writeString(struct.restriction);
          oprot.writeFieldEnd();
        }
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createRestriction_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createRestriction_argsTupleScheme getScheme() {
        return new createRestriction_argsTupleScheme();
      }
    }

    private static class createRestriction_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createRestriction_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createRestriction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRestriction()) {
          optionals.set(0);
        }
        if (struct.isSetLocale()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRestriction()) {
          oprot.writeString(struct.restriction);
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createRestriction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.restriction = iprot.readString();
          struct.setRestrictionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createRestriction_result implements org.apache.thrift.TBase<createRestriction_result, createRestriction_result._Fields>, java.io.Serializable, Cloneable, Comparable<createRestriction_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createRestriction_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createRestriction_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createRestriction_resultTupleSchemeFactory();

    private TRestrictionCUDResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRestrictionCUDResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createRestriction_result.class, metaDataMap);
    }

    public createRestriction_result() {
    }

    public createRestriction_result(
      TRestrictionCUDResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createRestriction_result(createRestriction_result other) {
      if (other.isSetSuccess()) {
        this.success = new TRestrictionCUDResponse(other.success);
      }
    }

    public createRestriction_result deepCopy() {
      return new createRestriction_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TRestrictionCUDResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TRestrictionCUDResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TRestrictionCUDResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createRestriction_result)
        return this.equals((createRestriction_result)that);
      return false;
    }

    public boolean equals(createRestriction_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createRestriction_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createRestriction_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createRestriction_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createRestriction_resultStandardScheme getScheme() {
        return new createRestriction_resultStandardScheme();
      }
    }

    private static class createRestriction_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createRestriction_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createRestriction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TRestrictionCUDResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createRestriction_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createRestriction_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createRestriction_resultTupleScheme getScheme() {
        return new createRestriction_resultTupleScheme();
      }
    }

    private static class createRestriction_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createRestriction_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createRestriction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createRestriction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TRestrictionCUDResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAmenity_args implements org.apache.thrift.TBase<getAmenity_args, getAmenity_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAmenity_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAmenity_args");

    private static final org.apache.thrift.protocol.TField METADATA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("metadataId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAmenity_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAmenity_argsTupleSchemeFactory();

    private java.lang.String metadataId; // required
    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      METADATA_ID((short)1, "metadataId"),
      LOCALE((short)2, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // METADATA_ID
            return METADATA_ID;
          case 2: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.METADATA_ID, new org.apache.thrift.meta_data.FieldMetaData("metadataId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAmenity_args.class, metaDataMap);
    }

    public getAmenity_args() {
    }

    public getAmenity_args(
      java.lang.String metadataId,
      java.lang.String locale)
    {
      this();
      this.metadataId = metadataId;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAmenity_args(getAmenity_args other) {
      if (other.isSetMetadataId()) {
        this.metadataId = other.metadataId;
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public getAmenity_args deepCopy() {
      return new getAmenity_args(this);
    }

    @Override
    public void clear() {
      this.metadataId = null;
      this.locale = null;
    }

    public java.lang.String getMetadataId() {
      return this.metadataId;
    }

    public void setMetadataId(java.lang.String metadataId) {
      this.metadataId = metadataId;
    }

    public void unsetMetadataId() {
      this.metadataId = null;
    }

    /** Returns true if field metadataId is set (has been assigned a value) and false otherwise */
    public boolean isSetMetadataId() {
      return this.metadataId != null;
    }

    public void setMetadataIdIsSet(boolean value) {
      if (!value) {
        this.metadataId = null;
      }
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case METADATA_ID:
        if (value == null) {
          unsetMetadataId();
        } else {
          setMetadataId((java.lang.String)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case METADATA_ID:
        return getMetadataId();

      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case METADATA_ID:
        return isSetMetadataId();
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAmenity_args)
        return this.equals((getAmenity_args)that);
      return false;
    }

    public boolean equals(getAmenity_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_metadataId = true && this.isSetMetadataId();
      boolean that_present_metadataId = true && that.isSetMetadataId();
      if (this_present_metadataId || that_present_metadataId) {
        if (!(this_present_metadataId && that_present_metadataId))
          return false;
        if (!this.metadataId.equals(that.metadataId))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMetadataId()) ? 131071 : 524287);
      if (isSetMetadataId())
        hashCode = hashCode * 8191 + metadataId.hashCode();

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAmenity_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMetadataId()).compareTo(other.isSetMetadataId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMetadataId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadataId, other.metadataId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAmenity_args(");
      boolean first = true;

      sb.append("metadataId:");
      if (this.metadataId == null) {
        sb.append("null");
      } else {
        sb.append(this.metadataId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAmenity_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAmenity_argsStandardScheme getScheme() {
        return new getAmenity_argsStandardScheme();
      }
    }

    private static class getAmenity_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAmenity_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAmenity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // METADATA_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.metadataId = iprot.readString();
                struct.setMetadataIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAmenity_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.metadataId != null) {
          oprot.writeFieldBegin(METADATA_ID_FIELD_DESC);
          oprot.writeString(struct.metadataId);
          oprot.writeFieldEnd();
        }
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAmenity_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAmenity_argsTupleScheme getScheme() {
        return new getAmenity_argsTupleScheme();
      }
    }

    private static class getAmenity_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAmenity_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAmenity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMetadataId()) {
          optionals.set(0);
        }
        if (struct.isSetLocale()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMetadataId()) {
          oprot.writeString(struct.metadataId);
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAmenity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.metadataId = iprot.readString();
          struct.setMetadataIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAmenity_result implements org.apache.thrift.TBase<getAmenity_result, getAmenity_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAmenity_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAmenity_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAmenity_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAmenity_resultTupleSchemeFactory();

    private TAmenityResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAmenityResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAmenity_result.class, metaDataMap);
    }

    public getAmenity_result() {
    }

    public getAmenity_result(
      TAmenityResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAmenity_result(getAmenity_result other) {
      if (other.isSetSuccess()) {
        this.success = new TAmenityResponse(other.success);
      }
    }

    public getAmenity_result deepCopy() {
      return new getAmenity_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TAmenityResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TAmenityResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TAmenityResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAmenity_result)
        return this.equals((getAmenity_result)that);
      return false;
    }

    public boolean equals(getAmenity_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAmenity_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAmenity_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAmenity_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAmenity_resultStandardScheme getScheme() {
        return new getAmenity_resultStandardScheme();
      }
    }

    private static class getAmenity_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAmenity_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAmenity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TAmenityResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAmenity_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAmenity_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAmenity_resultTupleScheme getScheme() {
        return new getAmenity_resultTupleScheme();
      }
    }

    private static class getAmenity_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAmenity_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAmenity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAmenity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TAmenityResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listAmenity_args implements org.apache.thrift.TBase<listAmenity_args, listAmenity_args._Fields>, java.io.Serializable, Cloneable, Comparable<listAmenity_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listAmenity_args");

    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listAmenity_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listAmenity_argsTupleSchemeFactory();

    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCALE((short)1, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listAmenity_args.class, metaDataMap);
    }

    public listAmenity_args() {
    }

    public listAmenity_args(
      java.lang.String locale)
    {
      this();
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listAmenity_args(listAmenity_args other) {
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public listAmenity_args deepCopy() {
      return new listAmenity_args(this);
    }

    @Override
    public void clear() {
      this.locale = null;
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listAmenity_args)
        return this.equals((listAmenity_args)that);
      return false;
    }

    public boolean equals(listAmenity_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listAmenity_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listAmenity_args(");
      boolean first = true;

      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listAmenity_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listAmenity_argsStandardScheme getScheme() {
        return new listAmenity_argsStandardScheme();
      }
    }

    private static class listAmenity_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listAmenity_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listAmenity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listAmenity_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listAmenity_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listAmenity_argsTupleScheme getScheme() {
        return new listAmenity_argsTupleScheme();
      }
    }

    private static class listAmenity_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listAmenity_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listAmenity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetLocale()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listAmenity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listAmenity_result implements org.apache.thrift.TBase<listAmenity_result, listAmenity_result._Fields>, java.io.Serializable, Cloneable, Comparable<listAmenity_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listAmenity_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listAmenity_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listAmenity_resultTupleSchemeFactory();

    private java.util.List<TAmenityResponse> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAmenityResponse.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listAmenity_result.class, metaDataMap);
    }

    public listAmenity_result() {
    }

    public listAmenity_result(
      java.util.List<TAmenityResponse> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listAmenity_result(listAmenity_result other) {
      if (other.isSetSuccess()) {
        java.util.List<TAmenityResponse> __this__success = new java.util.ArrayList<TAmenityResponse>(other.success.size());
        for (TAmenityResponse other_element : other.success) {
          __this__success.add(new TAmenityResponse(other_element));
        }
        this.success = __this__success;
      }
    }

    public listAmenity_result deepCopy() {
      return new listAmenity_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TAmenityResponse> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TAmenityResponse elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<TAmenityResponse>();
      }
      this.success.add(elem);
    }

    public java.util.List<TAmenityResponse> getSuccess() {
      return this.success;
    }

    public void setSuccess(java.util.List<TAmenityResponse> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<TAmenityResponse>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listAmenity_result)
        return this.equals((listAmenity_result)that);
      return false;
    }

    public boolean equals(listAmenity_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listAmenity_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listAmenity_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listAmenity_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listAmenity_resultStandardScheme getScheme() {
        return new listAmenity_resultStandardScheme();
      }
    }

    private static class listAmenity_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listAmenity_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listAmenity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list464 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<TAmenityResponse>(_list464.size);
                  TAmenityResponse _elem465;
                  for (int _i466 = 0; _i466 < _list464.size; ++_i466)
                  {
                    _elem465 = new TAmenityResponse();
                    _elem465.read(iprot);
                    struct.success.add(_elem465);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listAmenity_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TAmenityResponse _iter467 : struct.success)
            {
              _iter467.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listAmenity_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listAmenity_resultTupleScheme getScheme() {
        return new listAmenity_resultTupleScheme();
      }
    }

    private static class listAmenity_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listAmenity_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listAmenity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TAmenityResponse _iter468 : struct.success)
            {
              _iter468.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listAmenity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list469 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<TAmenityResponse>(_list469.size);
            TAmenityResponse _elem470;
            for (int _i471 = 0; _i471 < _list469.size; ++_i471)
            {
              _elem470 = new TAmenityResponse();
              _elem470.read(iprot);
              struct.success.add(_elem470);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createAmenity_args implements org.apache.thrift.TBase<createAmenity_args, createAmenity_args._Fields>, java.io.Serializable, Cloneable, Comparable<createAmenity_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createAmenity_args");

    private static final org.apache.thrift.protocol.TField AMENITY_FIELD_DESC = new org.apache.thrift.protocol.TField("amenity", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createAmenity_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createAmenity_argsTupleSchemeFactory();

    private java.lang.String amenity; // required
    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AMENITY((short)1, "amenity"),
      LOCALE((short)2, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AMENITY
            return AMENITY;
          case 2: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AMENITY, new org.apache.thrift.meta_data.FieldMetaData("amenity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createAmenity_args.class, metaDataMap);
    }

    public createAmenity_args() {
    }

    public createAmenity_args(
      java.lang.String amenity,
      java.lang.String locale)
    {
      this();
      this.amenity = amenity;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createAmenity_args(createAmenity_args other) {
      if (other.isSetAmenity()) {
        this.amenity = other.amenity;
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public createAmenity_args deepCopy() {
      return new createAmenity_args(this);
    }

    @Override
    public void clear() {
      this.amenity = null;
      this.locale = null;
    }

    public java.lang.String getAmenity() {
      return this.amenity;
    }

    public void setAmenity(java.lang.String amenity) {
      this.amenity = amenity;
    }

    public void unsetAmenity() {
      this.amenity = null;
    }

    /** Returns true if field amenity is set (has been assigned a value) and false otherwise */
    public boolean isSetAmenity() {
      return this.amenity != null;
    }

    public void setAmenityIsSet(boolean value) {
      if (!value) {
        this.amenity = null;
      }
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AMENITY:
        if (value == null) {
          unsetAmenity();
        } else {
          setAmenity((java.lang.String)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AMENITY:
        return getAmenity();

      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AMENITY:
        return isSetAmenity();
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createAmenity_args)
        return this.equals((createAmenity_args)that);
      return false;
    }

    public boolean equals(createAmenity_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_amenity = true && this.isSetAmenity();
      boolean that_present_amenity = true && that.isSetAmenity();
      if (this_present_amenity || that_present_amenity) {
        if (!(this_present_amenity && that_present_amenity))
          return false;
        if (!this.amenity.equals(that.amenity))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAmenity()) ? 131071 : 524287);
      if (isSetAmenity())
        hashCode = hashCode * 8191 + amenity.hashCode();

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createAmenity_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAmenity()).compareTo(other.isSetAmenity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAmenity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amenity, other.amenity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createAmenity_args(");
      boolean first = true;

      sb.append("amenity:");
      if (this.amenity == null) {
        sb.append("null");
      } else {
        sb.append(this.amenity);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createAmenity_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createAmenity_argsStandardScheme getScheme() {
        return new createAmenity_argsStandardScheme();
      }
    }

    private static class createAmenity_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createAmenity_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createAmenity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AMENITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.amenity = iprot.readString();
                struct.setAmenityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createAmenity_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.amenity != null) {
          oprot.writeFieldBegin(AMENITY_FIELD_DESC);
          oprot.writeString(struct.amenity);
          oprot.writeFieldEnd();
        }
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createAmenity_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createAmenity_argsTupleScheme getScheme() {
        return new createAmenity_argsTupleScheme();
      }
    }

    private static class createAmenity_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createAmenity_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createAmenity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAmenity()) {
          optionals.set(0);
        }
        if (struct.isSetLocale()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAmenity()) {
          oprot.writeString(struct.amenity);
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createAmenity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.amenity = iprot.readString();
          struct.setAmenityIsSet(true);
        }
        if (incoming.get(1)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createAmenity_result implements org.apache.thrift.TBase<createAmenity_result, createAmenity_result._Fields>, java.io.Serializable, Cloneable, Comparable<createAmenity_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createAmenity_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createAmenity_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createAmenity_resultTupleSchemeFactory();

    private TAmenityCUDResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAmenityCUDResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createAmenity_result.class, metaDataMap);
    }

    public createAmenity_result() {
    }

    public createAmenity_result(
      TAmenityCUDResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createAmenity_result(createAmenity_result other) {
      if (other.isSetSuccess()) {
        this.success = new TAmenityCUDResponse(other.success);
      }
    }

    public createAmenity_result deepCopy() {
      return new createAmenity_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TAmenityCUDResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TAmenityCUDResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TAmenityCUDResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createAmenity_result)
        return this.equals((createAmenity_result)that);
      return false;
    }

    public boolean equals(createAmenity_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createAmenity_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createAmenity_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createAmenity_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createAmenity_resultStandardScheme getScheme() {
        return new createAmenity_resultStandardScheme();
      }
    }

    private static class createAmenity_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createAmenity_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createAmenity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TAmenityCUDResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createAmenity_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createAmenity_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createAmenity_resultTupleScheme getScheme() {
        return new createAmenity_resultTupleScheme();
      }
    }

    private static class createAmenity_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createAmenity_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createAmenity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createAmenity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TAmenityCUDResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getPackageTag_args implements org.apache.thrift.TBase<getPackageTag_args, getPackageTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPackageTag_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPackageTag_args");

    private static final org.apache.thrift.protocol.TField METADATA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("metadataId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPackageTag_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPackageTag_argsTupleSchemeFactory();

    private java.lang.String metadataId; // required
    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      METADATA_ID((short)1, "metadataId"),
      LOCALE((short)2, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // METADATA_ID
            return METADATA_ID;
          case 2: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.METADATA_ID, new org.apache.thrift.meta_data.FieldMetaData("metadataId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPackageTag_args.class, metaDataMap);
    }

    public getPackageTag_args() {
    }

    public getPackageTag_args(
      java.lang.String metadataId,
      java.lang.String locale)
    {
      this();
      this.metadataId = metadataId;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPackageTag_args(getPackageTag_args other) {
      if (other.isSetMetadataId()) {
        this.metadataId = other.metadataId;
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public getPackageTag_args deepCopy() {
      return new getPackageTag_args(this);
    }

    @Override
    public void clear() {
      this.metadataId = null;
      this.locale = null;
    }

    public java.lang.String getMetadataId() {
      return this.metadataId;
    }

    public void setMetadataId(java.lang.String metadataId) {
      this.metadataId = metadataId;
    }

    public void unsetMetadataId() {
      this.metadataId = null;
    }

    /** Returns true if field metadataId is set (has been assigned a value) and false otherwise */
    public boolean isSetMetadataId() {
      return this.metadataId != null;
    }

    public void setMetadataIdIsSet(boolean value) {
      if (!value) {
        this.metadataId = null;
      }
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case METADATA_ID:
        if (value == null) {
          unsetMetadataId();
        } else {
          setMetadataId((java.lang.String)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case METADATA_ID:
        return getMetadataId();

      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case METADATA_ID:
        return isSetMetadataId();
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getPackageTag_args)
        return this.equals((getPackageTag_args)that);
      return false;
    }

    public boolean equals(getPackageTag_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_metadataId = true && this.isSetMetadataId();
      boolean that_present_metadataId = true && that.isSetMetadataId();
      if (this_present_metadataId || that_present_metadataId) {
        if (!(this_present_metadataId && that_present_metadataId))
          return false;
        if (!this.metadataId.equals(that.metadataId))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMetadataId()) ? 131071 : 524287);
      if (isSetMetadataId())
        hashCode = hashCode * 8191 + metadataId.hashCode();

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getPackageTag_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMetadataId()).compareTo(other.isSetMetadataId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMetadataId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadataId, other.metadataId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getPackageTag_args(");
      boolean first = true;

      sb.append("metadataId:");
      if (this.metadataId == null) {
        sb.append("null");
      } else {
        sb.append(this.metadataId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPackageTag_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPackageTag_argsStandardScheme getScheme() {
        return new getPackageTag_argsStandardScheme();
      }
    }

    private static class getPackageTag_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPackageTag_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPackageTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // METADATA_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.metadataId = iprot.readString();
                struct.setMetadataIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPackageTag_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.metadataId != null) {
          oprot.writeFieldBegin(METADATA_ID_FIELD_DESC);
          oprot.writeString(struct.metadataId);
          oprot.writeFieldEnd();
        }
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPackageTag_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPackageTag_argsTupleScheme getScheme() {
        return new getPackageTag_argsTupleScheme();
      }
    }

    private static class getPackageTag_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPackageTag_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPackageTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMetadataId()) {
          optionals.set(0);
        }
        if (struct.isSetLocale()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMetadataId()) {
          oprot.writeString(struct.metadataId);
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPackageTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.metadataId = iprot.readString();
          struct.setMetadataIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getPackageTag_result implements org.apache.thrift.TBase<getPackageTag_result, getPackageTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPackageTag_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPackageTag_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPackageTag_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPackageTag_resultTupleSchemeFactory();

    private TPackageTagResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPackageTagResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPackageTag_result.class, metaDataMap);
    }

    public getPackageTag_result() {
    }

    public getPackageTag_result(
      TPackageTagResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPackageTag_result(getPackageTag_result other) {
      if (other.isSetSuccess()) {
        this.success = new TPackageTagResponse(other.success);
      }
    }

    public getPackageTag_result deepCopy() {
      return new getPackageTag_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TPackageTagResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TPackageTagResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TPackageTagResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getPackageTag_result)
        return this.equals((getPackageTag_result)that);
      return false;
    }

    public boolean equals(getPackageTag_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getPackageTag_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getPackageTag_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPackageTag_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPackageTag_resultStandardScheme getScheme() {
        return new getPackageTag_resultStandardScheme();
      }
    }

    private static class getPackageTag_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPackageTag_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPackageTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TPackageTagResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPackageTag_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPackageTag_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPackageTag_resultTupleScheme getScheme() {
        return new getPackageTag_resultTupleScheme();
      }
    }

    private static class getPackageTag_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPackageTag_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPackageTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPackageTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TPackageTagResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listPackageTags_args implements org.apache.thrift.TBase<listPackageTags_args, listPackageTags_args._Fields>, java.io.Serializable, Cloneable, Comparable<listPackageTags_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listPackageTags_args");

    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listPackageTags_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listPackageTags_argsTupleSchemeFactory();

    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCALE((short)1, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listPackageTags_args.class, metaDataMap);
    }

    public listPackageTags_args() {
    }

    public listPackageTags_args(
      java.lang.String locale)
    {
      this();
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listPackageTags_args(listPackageTags_args other) {
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public listPackageTags_args deepCopy() {
      return new listPackageTags_args(this);
    }

    @Override
    public void clear() {
      this.locale = null;
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listPackageTags_args)
        return this.equals((listPackageTags_args)that);
      return false;
    }

    public boolean equals(listPackageTags_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listPackageTags_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listPackageTags_args(");
      boolean first = true;

      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listPackageTags_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listPackageTags_argsStandardScheme getScheme() {
        return new listPackageTags_argsStandardScheme();
      }
    }

    private static class listPackageTags_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listPackageTags_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listPackageTags_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listPackageTags_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listPackageTags_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listPackageTags_argsTupleScheme getScheme() {
        return new listPackageTags_argsTupleScheme();
      }
    }

    private static class listPackageTags_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listPackageTags_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listPackageTags_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetLocale()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listPackageTags_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listPackageTags_result implements org.apache.thrift.TBase<listPackageTags_result, listPackageTags_result._Fields>, java.io.Serializable, Cloneable, Comparable<listPackageTags_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listPackageTags_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listPackageTags_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listPackageTags_resultTupleSchemeFactory();

    private java.util.List<TPackageTagResponse> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPackageTagResponse.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listPackageTags_result.class, metaDataMap);
    }

    public listPackageTags_result() {
    }

    public listPackageTags_result(
      java.util.List<TPackageTagResponse> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listPackageTags_result(listPackageTags_result other) {
      if (other.isSetSuccess()) {
        java.util.List<TPackageTagResponse> __this__success = new java.util.ArrayList<TPackageTagResponse>(other.success.size());
        for (TPackageTagResponse other_element : other.success) {
          __this__success.add(new TPackageTagResponse(other_element));
        }
        this.success = __this__success;
      }
    }

    public listPackageTags_result deepCopy() {
      return new listPackageTags_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TPackageTagResponse> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TPackageTagResponse elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<TPackageTagResponse>();
      }
      this.success.add(elem);
    }

    public java.util.List<TPackageTagResponse> getSuccess() {
      return this.success;
    }

    public void setSuccess(java.util.List<TPackageTagResponse> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<TPackageTagResponse>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listPackageTags_result)
        return this.equals((listPackageTags_result)that);
      return false;
    }

    public boolean equals(listPackageTags_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listPackageTags_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listPackageTags_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listPackageTags_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listPackageTags_resultStandardScheme getScheme() {
        return new listPackageTags_resultStandardScheme();
      }
    }

    private static class listPackageTags_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listPackageTags_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listPackageTags_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list472 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<TPackageTagResponse>(_list472.size);
                  TPackageTagResponse _elem473;
                  for (int _i474 = 0; _i474 < _list472.size; ++_i474)
                  {
                    _elem473 = new TPackageTagResponse();
                    _elem473.read(iprot);
                    struct.success.add(_elem473);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listPackageTags_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TPackageTagResponse _iter475 : struct.success)
            {
              _iter475.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listPackageTags_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listPackageTags_resultTupleScheme getScheme() {
        return new listPackageTags_resultTupleScheme();
      }
    }

    private static class listPackageTags_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listPackageTags_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listPackageTags_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TPackageTagResponse _iter476 : struct.success)
            {
              _iter476.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listPackageTags_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list477 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<TPackageTagResponse>(_list477.size);
            TPackageTagResponse _elem478;
            for (int _i479 = 0; _i479 < _list477.size; ++_i479)
            {
              _elem478 = new TPackageTagResponse();
              _elem478.read(iprot);
              struct.success.add(_elem478);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createPackageTag_args implements org.apache.thrift.TBase<createPackageTag_args, createPackageTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<createPackageTag_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createPackageTag_args");

    private static final org.apache.thrift.protocol.TField PACKAGE_TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("packageTag", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createPackageTag_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createPackageTag_argsTupleSchemeFactory();

    private java.lang.String packageTag; // required
    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PACKAGE_TAG((short)1, "packageTag"),
      LOCALE((short)2, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PACKAGE_TAG
            return PACKAGE_TAG;
          case 2: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PACKAGE_TAG, new org.apache.thrift.meta_data.FieldMetaData("packageTag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createPackageTag_args.class, metaDataMap);
    }

    public createPackageTag_args() {
    }

    public createPackageTag_args(
      java.lang.String packageTag,
      java.lang.String locale)
    {
      this();
      this.packageTag = packageTag;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createPackageTag_args(createPackageTag_args other) {
      if (other.isSetPackageTag()) {
        this.packageTag = other.packageTag;
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public createPackageTag_args deepCopy() {
      return new createPackageTag_args(this);
    }

    @Override
    public void clear() {
      this.packageTag = null;
      this.locale = null;
    }

    public java.lang.String getPackageTag() {
      return this.packageTag;
    }

    public void setPackageTag(java.lang.String packageTag) {
      this.packageTag = packageTag;
    }

    public void unsetPackageTag() {
      this.packageTag = null;
    }

    /** Returns true if field packageTag is set (has been assigned a value) and false otherwise */
    public boolean isSetPackageTag() {
      return this.packageTag != null;
    }

    public void setPackageTagIsSet(boolean value) {
      if (!value) {
        this.packageTag = null;
      }
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PACKAGE_TAG:
        if (value == null) {
          unsetPackageTag();
        } else {
          setPackageTag((java.lang.String)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PACKAGE_TAG:
        return getPackageTag();

      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PACKAGE_TAG:
        return isSetPackageTag();
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createPackageTag_args)
        return this.equals((createPackageTag_args)that);
      return false;
    }

    public boolean equals(createPackageTag_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_packageTag = true && this.isSetPackageTag();
      boolean that_present_packageTag = true && that.isSetPackageTag();
      if (this_present_packageTag || that_present_packageTag) {
        if (!(this_present_packageTag && that_present_packageTag))
          return false;
        if (!this.packageTag.equals(that.packageTag))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPackageTag()) ? 131071 : 524287);
      if (isSetPackageTag())
        hashCode = hashCode * 8191 + packageTag.hashCode();

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createPackageTag_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPackageTag()).compareTo(other.isSetPackageTag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPackageTag()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.packageTag, other.packageTag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createPackageTag_args(");
      boolean first = true;

      sb.append("packageTag:");
      if (this.packageTag == null) {
        sb.append("null");
      } else {
        sb.append(this.packageTag);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createPackageTag_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createPackageTag_argsStandardScheme getScheme() {
        return new createPackageTag_argsStandardScheme();
      }
    }

    private static class createPackageTag_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createPackageTag_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createPackageTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PACKAGE_TAG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.packageTag = iprot.readString();
                struct.setPackageTagIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createPackageTag_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.packageTag != null) {
          oprot.writeFieldBegin(PACKAGE_TAG_FIELD_DESC);
          oprot.writeString(struct.packageTag);
          oprot.writeFieldEnd();
        }
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createPackageTag_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createPackageTag_argsTupleScheme getScheme() {
        return new createPackageTag_argsTupleScheme();
      }
    }

    private static class createPackageTag_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createPackageTag_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createPackageTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPackageTag()) {
          optionals.set(0);
        }
        if (struct.isSetLocale()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPackageTag()) {
          oprot.writeString(struct.packageTag);
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createPackageTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.packageTag = iprot.readString();
          struct.setPackageTagIsSet(true);
        }
        if (incoming.get(1)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createPackageTag_result implements org.apache.thrift.TBase<createPackageTag_result, createPackageTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<createPackageTag_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createPackageTag_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createPackageTag_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createPackageTag_resultTupleSchemeFactory();

    private TPackageTagCUDResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPackageTagCUDResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createPackageTag_result.class, metaDataMap);
    }

    public createPackageTag_result() {
    }

    public createPackageTag_result(
      TPackageTagCUDResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createPackageTag_result(createPackageTag_result other) {
      if (other.isSetSuccess()) {
        this.success = new TPackageTagCUDResponse(other.success);
      }
    }

    public createPackageTag_result deepCopy() {
      return new createPackageTag_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TPackageTagCUDResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TPackageTagCUDResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TPackageTagCUDResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createPackageTag_result)
        return this.equals((createPackageTag_result)that);
      return false;
    }

    public boolean equals(createPackageTag_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createPackageTag_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createPackageTag_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createPackageTag_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createPackageTag_resultStandardScheme getScheme() {
        return new createPackageTag_resultStandardScheme();
      }
    }

    private static class createPackageTag_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createPackageTag_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createPackageTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TPackageTagCUDResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createPackageTag_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createPackageTag_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createPackageTag_resultTupleScheme getScheme() {
        return new createPackageTag_resultTupleScheme();
      }
    }

    private static class createPackageTag_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createPackageTag_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createPackageTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createPackageTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TPackageTagCUDResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getHotelCategory_args implements org.apache.thrift.TBase<getHotelCategory_args, getHotelCategory_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHotelCategory_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHotelCategory_args");

    private static final org.apache.thrift.protocol.TField METADATA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("metadataId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getHotelCategory_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getHotelCategory_argsTupleSchemeFactory();

    private java.lang.String metadataId; // required
    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      METADATA_ID((short)1, "metadataId"),
      LOCALE((short)2, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // METADATA_ID
            return METADATA_ID;
          case 2: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.METADATA_ID, new org.apache.thrift.meta_data.FieldMetaData("metadataId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHotelCategory_args.class, metaDataMap);
    }

    public getHotelCategory_args() {
    }

    public getHotelCategory_args(
      java.lang.String metadataId,
      java.lang.String locale)
    {
      this();
      this.metadataId = metadataId;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHotelCategory_args(getHotelCategory_args other) {
      if (other.isSetMetadataId()) {
        this.metadataId = other.metadataId;
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public getHotelCategory_args deepCopy() {
      return new getHotelCategory_args(this);
    }

    @Override
    public void clear() {
      this.metadataId = null;
      this.locale = null;
    }

    public java.lang.String getMetadataId() {
      return this.metadataId;
    }

    public void setMetadataId(java.lang.String metadataId) {
      this.metadataId = metadataId;
    }

    public void unsetMetadataId() {
      this.metadataId = null;
    }

    /** Returns true if field metadataId is set (has been assigned a value) and false otherwise */
    public boolean isSetMetadataId() {
      return this.metadataId != null;
    }

    public void setMetadataIdIsSet(boolean value) {
      if (!value) {
        this.metadataId = null;
      }
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case METADATA_ID:
        if (value == null) {
          unsetMetadataId();
        } else {
          setMetadataId((java.lang.String)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case METADATA_ID:
        return getMetadataId();

      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case METADATA_ID:
        return isSetMetadataId();
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getHotelCategory_args)
        return this.equals((getHotelCategory_args)that);
      return false;
    }

    public boolean equals(getHotelCategory_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_metadataId = true && this.isSetMetadataId();
      boolean that_present_metadataId = true && that.isSetMetadataId();
      if (this_present_metadataId || that_present_metadataId) {
        if (!(this_present_metadataId && that_present_metadataId))
          return false;
        if (!this.metadataId.equals(that.metadataId))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMetadataId()) ? 131071 : 524287);
      if (isSetMetadataId())
        hashCode = hashCode * 8191 + metadataId.hashCode();

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getHotelCategory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMetadataId()).compareTo(other.isSetMetadataId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMetadataId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadataId, other.metadataId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getHotelCategory_args(");
      boolean first = true;

      sb.append("metadataId:");
      if (this.metadataId == null) {
        sb.append("null");
      } else {
        sb.append(this.metadataId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHotelCategory_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getHotelCategory_argsStandardScheme getScheme() {
        return new getHotelCategory_argsStandardScheme();
      }
    }

    private static class getHotelCategory_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getHotelCategory_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHotelCategory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // METADATA_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.metadataId = iprot.readString();
                struct.setMetadataIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHotelCategory_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.metadataId != null) {
          oprot.writeFieldBegin(METADATA_ID_FIELD_DESC);
          oprot.writeString(struct.metadataId);
          oprot.writeFieldEnd();
        }
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHotelCategory_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getHotelCategory_argsTupleScheme getScheme() {
        return new getHotelCategory_argsTupleScheme();
      }
    }

    private static class getHotelCategory_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getHotelCategory_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHotelCategory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMetadataId()) {
          optionals.set(0);
        }
        if (struct.isSetLocale()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMetadataId()) {
          oprot.writeString(struct.metadataId);
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHotelCategory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.metadataId = iprot.readString();
          struct.setMetadataIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getHotelCategory_result implements org.apache.thrift.TBase<getHotelCategory_result, getHotelCategory_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHotelCategory_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHotelCategory_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getHotelCategory_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getHotelCategory_resultTupleSchemeFactory();

    private THotelCategoryResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THotelCategoryResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHotelCategory_result.class, metaDataMap);
    }

    public getHotelCategory_result() {
    }

    public getHotelCategory_result(
      THotelCategoryResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHotelCategory_result(getHotelCategory_result other) {
      if (other.isSetSuccess()) {
        this.success = new THotelCategoryResponse(other.success);
      }
    }

    public getHotelCategory_result deepCopy() {
      return new getHotelCategory_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public THotelCategoryResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(THotelCategoryResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((THotelCategoryResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getHotelCategory_result)
        return this.equals((getHotelCategory_result)that);
      return false;
    }

    public boolean equals(getHotelCategory_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getHotelCategory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getHotelCategory_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHotelCategory_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getHotelCategory_resultStandardScheme getScheme() {
        return new getHotelCategory_resultStandardScheme();
      }
    }

    private static class getHotelCategory_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getHotelCategory_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHotelCategory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new THotelCategoryResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHotelCategory_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHotelCategory_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getHotelCategory_resultTupleScheme getScheme() {
        return new getHotelCategory_resultTupleScheme();
      }
    }

    private static class getHotelCategory_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getHotelCategory_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHotelCategory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHotelCategory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new THotelCategoryResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listHotelCategories_args implements org.apache.thrift.TBase<listHotelCategories_args, listHotelCategories_args._Fields>, java.io.Serializable, Cloneable, Comparable<listHotelCategories_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listHotelCategories_args");

    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listHotelCategories_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listHotelCategories_argsTupleSchemeFactory();

    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCALE((short)1, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listHotelCategories_args.class, metaDataMap);
    }

    public listHotelCategories_args() {
    }

    public listHotelCategories_args(
      java.lang.String locale)
    {
      this();
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listHotelCategories_args(listHotelCategories_args other) {
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public listHotelCategories_args deepCopy() {
      return new listHotelCategories_args(this);
    }

    @Override
    public void clear() {
      this.locale = null;
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listHotelCategories_args)
        return this.equals((listHotelCategories_args)that);
      return false;
    }

    public boolean equals(listHotelCategories_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listHotelCategories_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listHotelCategories_args(");
      boolean first = true;

      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listHotelCategories_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listHotelCategories_argsStandardScheme getScheme() {
        return new listHotelCategories_argsStandardScheme();
      }
    }

    private static class listHotelCategories_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listHotelCategories_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listHotelCategories_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listHotelCategories_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listHotelCategories_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listHotelCategories_argsTupleScheme getScheme() {
        return new listHotelCategories_argsTupleScheme();
      }
    }

    private static class listHotelCategories_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listHotelCategories_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listHotelCategories_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetLocale()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listHotelCategories_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listHotelCategories_result implements org.apache.thrift.TBase<listHotelCategories_result, listHotelCategories_result._Fields>, java.io.Serializable, Cloneable, Comparable<listHotelCategories_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listHotelCategories_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listHotelCategories_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listHotelCategories_resultTupleSchemeFactory();

    private java.util.List<THotelCategoryResponse> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THotelCategoryResponse.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listHotelCategories_result.class, metaDataMap);
    }

    public listHotelCategories_result() {
    }

    public listHotelCategories_result(
      java.util.List<THotelCategoryResponse> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listHotelCategories_result(listHotelCategories_result other) {
      if (other.isSetSuccess()) {
        java.util.List<THotelCategoryResponse> __this__success = new java.util.ArrayList<THotelCategoryResponse>(other.success.size());
        for (THotelCategoryResponse other_element : other.success) {
          __this__success.add(new THotelCategoryResponse(other_element));
        }
        this.success = __this__success;
      }
    }

    public listHotelCategories_result deepCopy() {
      return new listHotelCategories_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<THotelCategoryResponse> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(THotelCategoryResponse elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<THotelCategoryResponse>();
      }
      this.success.add(elem);
    }

    public java.util.List<THotelCategoryResponse> getSuccess() {
      return this.success;
    }

    public void setSuccess(java.util.List<THotelCategoryResponse> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<THotelCategoryResponse>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listHotelCategories_result)
        return this.equals((listHotelCategories_result)that);
      return false;
    }

    public boolean equals(listHotelCategories_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listHotelCategories_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listHotelCategories_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listHotelCategories_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listHotelCategories_resultStandardScheme getScheme() {
        return new listHotelCategories_resultStandardScheme();
      }
    }

    private static class listHotelCategories_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listHotelCategories_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listHotelCategories_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list480 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<THotelCategoryResponse>(_list480.size);
                  THotelCategoryResponse _elem481;
                  for (int _i482 = 0; _i482 < _list480.size; ++_i482)
                  {
                    _elem481 = new THotelCategoryResponse();
                    _elem481.read(iprot);
                    struct.success.add(_elem481);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listHotelCategories_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (THotelCategoryResponse _iter483 : struct.success)
            {
              _iter483.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listHotelCategories_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listHotelCategories_resultTupleScheme getScheme() {
        return new listHotelCategories_resultTupleScheme();
      }
    }

    private static class listHotelCategories_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listHotelCategories_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listHotelCategories_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (THotelCategoryResponse _iter484 : struct.success)
            {
              _iter484.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listHotelCategories_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list485 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<THotelCategoryResponse>(_list485.size);
            THotelCategoryResponse _elem486;
            for (int _i487 = 0; _i487 < _list485.size; ++_i487)
            {
              _elem486 = new THotelCategoryResponse();
              _elem486.read(iprot);
              struct.success.add(_elem486);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createHotelCategory_args implements org.apache.thrift.TBase<createHotelCategory_args, createHotelCategory_args._Fields>, java.io.Serializable, Cloneable, Comparable<createHotelCategory_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createHotelCategory_args");

    private static final org.apache.thrift.protocol.TField HOTEL_CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("hotelCategory", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createHotelCategory_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createHotelCategory_argsTupleSchemeFactory();

    private java.lang.String hotelCategory; // required
    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOTEL_CATEGORY((short)1, "hotelCategory"),
      LOCALE((short)2, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOTEL_CATEGORY
            return HOTEL_CATEGORY;
          case 2: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOTEL_CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("hotelCategory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createHotelCategory_args.class, metaDataMap);
    }

    public createHotelCategory_args() {
    }

    public createHotelCategory_args(
      java.lang.String hotelCategory,
      java.lang.String locale)
    {
      this();
      this.hotelCategory = hotelCategory;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createHotelCategory_args(createHotelCategory_args other) {
      if (other.isSetHotelCategory()) {
        this.hotelCategory = other.hotelCategory;
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public createHotelCategory_args deepCopy() {
      return new createHotelCategory_args(this);
    }

    @Override
    public void clear() {
      this.hotelCategory = null;
      this.locale = null;
    }

    public java.lang.String getHotelCategory() {
      return this.hotelCategory;
    }

    public void setHotelCategory(java.lang.String hotelCategory) {
      this.hotelCategory = hotelCategory;
    }

    public void unsetHotelCategory() {
      this.hotelCategory = null;
    }

    /** Returns true if field hotelCategory is set (has been assigned a value) and false otherwise */
    public boolean isSetHotelCategory() {
      return this.hotelCategory != null;
    }

    public void setHotelCategoryIsSet(boolean value) {
      if (!value) {
        this.hotelCategory = null;
      }
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case HOTEL_CATEGORY:
        if (value == null) {
          unsetHotelCategory();
        } else {
          setHotelCategory((java.lang.String)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case HOTEL_CATEGORY:
        return getHotelCategory();

      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case HOTEL_CATEGORY:
        return isSetHotelCategory();
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createHotelCategory_args)
        return this.equals((createHotelCategory_args)that);
      return false;
    }

    public boolean equals(createHotelCategory_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hotelCategory = true && this.isSetHotelCategory();
      boolean that_present_hotelCategory = true && that.isSetHotelCategory();
      if (this_present_hotelCategory || that_present_hotelCategory) {
        if (!(this_present_hotelCategory && that_present_hotelCategory))
          return false;
        if (!this.hotelCategory.equals(that.hotelCategory))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetHotelCategory()) ? 131071 : 524287);
      if (isSetHotelCategory())
        hashCode = hashCode * 8191 + hotelCategory.hashCode();

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createHotelCategory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHotelCategory()).compareTo(other.isSetHotelCategory());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHotelCategory()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hotelCategory, other.hotelCategory);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createHotelCategory_args(");
      boolean first = true;

      sb.append("hotelCategory:");
      if (this.hotelCategory == null) {
        sb.append("null");
      } else {
        sb.append(this.hotelCategory);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createHotelCategory_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createHotelCategory_argsStandardScheme getScheme() {
        return new createHotelCategory_argsStandardScheme();
      }
    }

    private static class createHotelCategory_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createHotelCategory_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createHotelCategory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HOTEL_CATEGORY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hotelCategory = iprot.readString();
                struct.setHotelCategoryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createHotelCategory_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hotelCategory != null) {
          oprot.writeFieldBegin(HOTEL_CATEGORY_FIELD_DESC);
          oprot.writeString(struct.hotelCategory);
          oprot.writeFieldEnd();
        }
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createHotelCategory_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createHotelCategory_argsTupleScheme getScheme() {
        return new createHotelCategory_argsTupleScheme();
      }
    }

    private static class createHotelCategory_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createHotelCategory_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createHotelCategory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHotelCategory()) {
          optionals.set(0);
        }
        if (struct.isSetLocale()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetHotelCategory()) {
          oprot.writeString(struct.hotelCategory);
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createHotelCategory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.hotelCategory = iprot.readString();
          struct.setHotelCategoryIsSet(true);
        }
        if (incoming.get(1)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createHotelCategory_result implements org.apache.thrift.TBase<createHotelCategory_result, createHotelCategory_result._Fields>, java.io.Serializable, Cloneable, Comparable<createHotelCategory_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createHotelCategory_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createHotelCategory_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createHotelCategory_resultTupleSchemeFactory();

    private THotelCategoryCUDResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THotelCategoryCUDResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createHotelCategory_result.class, metaDataMap);
    }

    public createHotelCategory_result() {
    }

    public createHotelCategory_result(
      THotelCategoryCUDResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createHotelCategory_result(createHotelCategory_result other) {
      if (other.isSetSuccess()) {
        this.success = new THotelCategoryCUDResponse(other.success);
      }
    }

    public createHotelCategory_result deepCopy() {
      return new createHotelCategory_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public THotelCategoryCUDResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(THotelCategoryCUDResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((THotelCategoryCUDResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createHotelCategory_result)
        return this.equals((createHotelCategory_result)that);
      return false;
    }

    public boolean equals(createHotelCategory_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createHotelCategory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createHotelCategory_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createHotelCategory_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createHotelCategory_resultStandardScheme getScheme() {
        return new createHotelCategory_resultStandardScheme();
      }
    }

    private static class createHotelCategory_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createHotelCategory_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createHotelCategory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new THotelCategoryCUDResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createHotelCategory_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createHotelCategory_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createHotelCategory_resultTupleScheme getScheme() {
        return new createHotelCategory_resultTupleScheme();
      }
    }

    private static class createHotelCategory_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createHotelCategory_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createHotelCategory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createHotelCategory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new THotelCategoryCUDResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getRoomCategory_args implements org.apache.thrift.TBase<getRoomCategory_args, getRoomCategory_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRoomCategory_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRoomCategory_args");

    private static final org.apache.thrift.protocol.TField METADATA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("metadataId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRoomCategory_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRoomCategory_argsTupleSchemeFactory();

    private java.lang.String metadataId; // required
    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      METADATA_ID((short)1, "metadataId"),
      LOCALE((short)2, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // METADATA_ID
            return METADATA_ID;
          case 2: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.METADATA_ID, new org.apache.thrift.meta_data.FieldMetaData("metadataId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRoomCategory_args.class, metaDataMap);
    }

    public getRoomCategory_args() {
    }

    public getRoomCategory_args(
      java.lang.String metadataId,
      java.lang.String locale)
    {
      this();
      this.metadataId = metadataId;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRoomCategory_args(getRoomCategory_args other) {
      if (other.isSetMetadataId()) {
        this.metadataId = other.metadataId;
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public getRoomCategory_args deepCopy() {
      return new getRoomCategory_args(this);
    }

    @Override
    public void clear() {
      this.metadataId = null;
      this.locale = null;
    }

    public java.lang.String getMetadataId() {
      return this.metadataId;
    }

    public void setMetadataId(java.lang.String metadataId) {
      this.metadataId = metadataId;
    }

    public void unsetMetadataId() {
      this.metadataId = null;
    }

    /** Returns true if field metadataId is set (has been assigned a value) and false otherwise */
    public boolean isSetMetadataId() {
      return this.metadataId != null;
    }

    public void setMetadataIdIsSet(boolean value) {
      if (!value) {
        this.metadataId = null;
      }
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case METADATA_ID:
        if (value == null) {
          unsetMetadataId();
        } else {
          setMetadataId((java.lang.String)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case METADATA_ID:
        return getMetadataId();

      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case METADATA_ID:
        return isSetMetadataId();
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getRoomCategory_args)
        return this.equals((getRoomCategory_args)that);
      return false;
    }

    public boolean equals(getRoomCategory_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_metadataId = true && this.isSetMetadataId();
      boolean that_present_metadataId = true && that.isSetMetadataId();
      if (this_present_metadataId || that_present_metadataId) {
        if (!(this_present_metadataId && that_present_metadataId))
          return false;
        if (!this.metadataId.equals(that.metadataId))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMetadataId()) ? 131071 : 524287);
      if (isSetMetadataId())
        hashCode = hashCode * 8191 + metadataId.hashCode();

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getRoomCategory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMetadataId()).compareTo(other.isSetMetadataId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMetadataId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadataId, other.metadataId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getRoomCategory_args(");
      boolean first = true;

      sb.append("metadataId:");
      if (this.metadataId == null) {
        sb.append("null");
      } else {
        sb.append(this.metadataId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRoomCategory_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRoomCategory_argsStandardScheme getScheme() {
        return new getRoomCategory_argsStandardScheme();
      }
    }

    private static class getRoomCategory_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRoomCategory_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRoomCategory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // METADATA_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.metadataId = iprot.readString();
                struct.setMetadataIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRoomCategory_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.metadataId != null) {
          oprot.writeFieldBegin(METADATA_ID_FIELD_DESC);
          oprot.writeString(struct.metadataId);
          oprot.writeFieldEnd();
        }
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRoomCategory_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRoomCategory_argsTupleScheme getScheme() {
        return new getRoomCategory_argsTupleScheme();
      }
    }

    private static class getRoomCategory_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRoomCategory_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRoomCategory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMetadataId()) {
          optionals.set(0);
        }
        if (struct.isSetLocale()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMetadataId()) {
          oprot.writeString(struct.metadataId);
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRoomCategory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.metadataId = iprot.readString();
          struct.setMetadataIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getRoomCategory_result implements org.apache.thrift.TBase<getRoomCategory_result, getRoomCategory_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRoomCategory_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRoomCategory_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRoomCategory_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRoomCategory_resultTupleSchemeFactory();

    private TRoomCategoryResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRoomCategoryResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRoomCategory_result.class, metaDataMap);
    }

    public getRoomCategory_result() {
    }

    public getRoomCategory_result(
      TRoomCategoryResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRoomCategory_result(getRoomCategory_result other) {
      if (other.isSetSuccess()) {
        this.success = new TRoomCategoryResponse(other.success);
      }
    }

    public getRoomCategory_result deepCopy() {
      return new getRoomCategory_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TRoomCategoryResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TRoomCategoryResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TRoomCategoryResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getRoomCategory_result)
        return this.equals((getRoomCategory_result)that);
      return false;
    }

    public boolean equals(getRoomCategory_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getRoomCategory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getRoomCategory_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRoomCategory_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRoomCategory_resultStandardScheme getScheme() {
        return new getRoomCategory_resultStandardScheme();
      }
    }

    private static class getRoomCategory_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRoomCategory_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRoomCategory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TRoomCategoryResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRoomCategory_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRoomCategory_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRoomCategory_resultTupleScheme getScheme() {
        return new getRoomCategory_resultTupleScheme();
      }
    }

    private static class getRoomCategory_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRoomCategory_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRoomCategory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRoomCategory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TRoomCategoryResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listRoomCategories_args implements org.apache.thrift.TBase<listRoomCategories_args, listRoomCategories_args._Fields>, java.io.Serializable, Cloneable, Comparable<listRoomCategories_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listRoomCategories_args");

    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listRoomCategories_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listRoomCategories_argsTupleSchemeFactory();

    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCALE((short)1, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listRoomCategories_args.class, metaDataMap);
    }

    public listRoomCategories_args() {
    }

    public listRoomCategories_args(
      java.lang.String locale)
    {
      this();
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listRoomCategories_args(listRoomCategories_args other) {
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public listRoomCategories_args deepCopy() {
      return new listRoomCategories_args(this);
    }

    @Override
    public void clear() {
      this.locale = null;
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listRoomCategories_args)
        return this.equals((listRoomCategories_args)that);
      return false;
    }

    public boolean equals(listRoomCategories_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listRoomCategories_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listRoomCategories_args(");
      boolean first = true;

      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listRoomCategories_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listRoomCategories_argsStandardScheme getScheme() {
        return new listRoomCategories_argsStandardScheme();
      }
    }

    private static class listRoomCategories_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listRoomCategories_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listRoomCategories_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listRoomCategories_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listRoomCategories_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listRoomCategories_argsTupleScheme getScheme() {
        return new listRoomCategories_argsTupleScheme();
      }
    }

    private static class listRoomCategories_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listRoomCategories_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listRoomCategories_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetLocale()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listRoomCategories_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listRoomCategories_result implements org.apache.thrift.TBase<listRoomCategories_result, listRoomCategories_result._Fields>, java.io.Serializable, Cloneable, Comparable<listRoomCategories_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listRoomCategories_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listRoomCategories_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listRoomCategories_resultTupleSchemeFactory();

    private java.util.List<TRoomCategoryResponse> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRoomCategoryResponse.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listRoomCategories_result.class, metaDataMap);
    }

    public listRoomCategories_result() {
    }

    public listRoomCategories_result(
      java.util.List<TRoomCategoryResponse> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listRoomCategories_result(listRoomCategories_result other) {
      if (other.isSetSuccess()) {
        java.util.List<TRoomCategoryResponse> __this__success = new java.util.ArrayList<TRoomCategoryResponse>(other.success.size());
        for (TRoomCategoryResponse other_element : other.success) {
          __this__success.add(new TRoomCategoryResponse(other_element));
        }
        this.success = __this__success;
      }
    }

    public listRoomCategories_result deepCopy() {
      return new listRoomCategories_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TRoomCategoryResponse> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TRoomCategoryResponse elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<TRoomCategoryResponse>();
      }
      this.success.add(elem);
    }

    public java.util.List<TRoomCategoryResponse> getSuccess() {
      return this.success;
    }

    public void setSuccess(java.util.List<TRoomCategoryResponse> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<TRoomCategoryResponse>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listRoomCategories_result)
        return this.equals((listRoomCategories_result)that);
      return false;
    }

    public boolean equals(listRoomCategories_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listRoomCategories_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listRoomCategories_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listRoomCategories_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listRoomCategories_resultStandardScheme getScheme() {
        return new listRoomCategories_resultStandardScheme();
      }
    }

    private static class listRoomCategories_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listRoomCategories_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listRoomCategories_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list488 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<TRoomCategoryResponse>(_list488.size);
                  TRoomCategoryResponse _elem489;
                  for (int _i490 = 0; _i490 < _list488.size; ++_i490)
                  {
                    _elem489 = new TRoomCategoryResponse();
                    _elem489.read(iprot);
                    struct.success.add(_elem489);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listRoomCategories_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TRoomCategoryResponse _iter491 : struct.success)
            {
              _iter491.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listRoomCategories_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listRoomCategories_resultTupleScheme getScheme() {
        return new listRoomCategories_resultTupleScheme();
      }
    }

    private static class listRoomCategories_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listRoomCategories_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listRoomCategories_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TRoomCategoryResponse _iter492 : struct.success)
            {
              _iter492.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listRoomCategories_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list493 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<TRoomCategoryResponse>(_list493.size);
            TRoomCategoryResponse _elem494;
            for (int _i495 = 0; _i495 < _list493.size; ++_i495)
            {
              _elem494 = new TRoomCategoryResponse();
              _elem494.read(iprot);
              struct.success.add(_elem494);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createRoomCategory_args implements org.apache.thrift.TBase<createRoomCategory_args, createRoomCategory_args._Fields>, java.io.Serializable, Cloneable, Comparable<createRoomCategory_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createRoomCategory_args");

    private static final org.apache.thrift.protocol.TField ROOM_CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("roomCategory", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createRoomCategory_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createRoomCategory_argsTupleSchemeFactory();

    private java.lang.String roomCategory; // required
    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROOM_CATEGORY((short)1, "roomCategory"),
      LOCALE((short)2, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROOM_CATEGORY
            return ROOM_CATEGORY;
          case 2: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROOM_CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("roomCategory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createRoomCategory_args.class, metaDataMap);
    }

    public createRoomCategory_args() {
    }

    public createRoomCategory_args(
      java.lang.String roomCategory,
      java.lang.String locale)
    {
      this();
      this.roomCategory = roomCategory;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createRoomCategory_args(createRoomCategory_args other) {
      if (other.isSetRoomCategory()) {
        this.roomCategory = other.roomCategory;
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public createRoomCategory_args deepCopy() {
      return new createRoomCategory_args(this);
    }

    @Override
    public void clear() {
      this.roomCategory = null;
      this.locale = null;
    }

    public java.lang.String getRoomCategory() {
      return this.roomCategory;
    }

    public void setRoomCategory(java.lang.String roomCategory) {
      this.roomCategory = roomCategory;
    }

    public void unsetRoomCategory() {
      this.roomCategory = null;
    }

    /** Returns true if field roomCategory is set (has been assigned a value) and false otherwise */
    public boolean isSetRoomCategory() {
      return this.roomCategory != null;
    }

    public void setRoomCategoryIsSet(boolean value) {
      if (!value) {
        this.roomCategory = null;
      }
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ROOM_CATEGORY:
        if (value == null) {
          unsetRoomCategory();
        } else {
          setRoomCategory((java.lang.String)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ROOM_CATEGORY:
        return getRoomCategory();

      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ROOM_CATEGORY:
        return isSetRoomCategory();
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createRoomCategory_args)
        return this.equals((createRoomCategory_args)that);
      return false;
    }

    public boolean equals(createRoomCategory_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_roomCategory = true && this.isSetRoomCategory();
      boolean that_present_roomCategory = true && that.isSetRoomCategory();
      if (this_present_roomCategory || that_present_roomCategory) {
        if (!(this_present_roomCategory && that_present_roomCategory))
          return false;
        if (!this.roomCategory.equals(that.roomCategory))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRoomCategory()) ? 131071 : 524287);
      if (isSetRoomCategory())
        hashCode = hashCode * 8191 + roomCategory.hashCode();

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createRoomCategory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRoomCategory()).compareTo(other.isSetRoomCategory());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoomCategory()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomCategory, other.roomCategory);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createRoomCategory_args(");
      boolean first = true;

      sb.append("roomCategory:");
      if (this.roomCategory == null) {
        sb.append("null");
      } else {
        sb.append(this.roomCategory);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createRoomCategory_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createRoomCategory_argsStandardScheme getScheme() {
        return new createRoomCategory_argsStandardScheme();
      }
    }

    private static class createRoomCategory_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createRoomCategory_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createRoomCategory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROOM_CATEGORY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.roomCategory = iprot.readString();
                struct.setRoomCategoryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createRoomCategory_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.roomCategory != null) {
          oprot.writeFieldBegin(ROOM_CATEGORY_FIELD_DESC);
          oprot.writeString(struct.roomCategory);
          oprot.writeFieldEnd();
        }
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createRoomCategory_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createRoomCategory_argsTupleScheme getScheme() {
        return new createRoomCategory_argsTupleScheme();
      }
    }

    private static class createRoomCategory_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createRoomCategory_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createRoomCategory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRoomCategory()) {
          optionals.set(0);
        }
        if (struct.isSetLocale()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRoomCategory()) {
          oprot.writeString(struct.roomCategory);
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createRoomCategory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.roomCategory = iprot.readString();
          struct.setRoomCategoryIsSet(true);
        }
        if (incoming.get(1)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createRoomCategory_result implements org.apache.thrift.TBase<createRoomCategory_result, createRoomCategory_result._Fields>, java.io.Serializable, Cloneable, Comparable<createRoomCategory_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createRoomCategory_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createRoomCategory_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createRoomCategory_resultTupleSchemeFactory();

    private TRoomCategoryCUDResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRoomCategoryCUDResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createRoomCategory_result.class, metaDataMap);
    }

    public createRoomCategory_result() {
    }

    public createRoomCategory_result(
      TRoomCategoryCUDResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createRoomCategory_result(createRoomCategory_result other) {
      if (other.isSetSuccess()) {
        this.success = new TRoomCategoryCUDResponse(other.success);
      }
    }

    public createRoomCategory_result deepCopy() {
      return new createRoomCategory_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TRoomCategoryCUDResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TRoomCategoryCUDResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TRoomCategoryCUDResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createRoomCategory_result)
        return this.equals((createRoomCategory_result)that);
      return false;
    }

    public boolean equals(createRoomCategory_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createRoomCategory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createRoomCategory_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createRoomCategory_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createRoomCategory_resultStandardScheme getScheme() {
        return new createRoomCategory_resultStandardScheme();
      }
    }

    private static class createRoomCategory_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createRoomCategory_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createRoomCategory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TRoomCategoryCUDResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createRoomCategory_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createRoomCategory_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createRoomCategory_resultTupleScheme getScheme() {
        return new createRoomCategory_resultTupleScheme();
      }
    }

    private static class createRoomCategory_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createRoomCategory_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createRoomCategory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createRoomCategory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TRoomCategoryCUDResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMiceTag_args implements org.apache.thrift.TBase<getMiceTag_args, getMiceTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMiceTag_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMiceTag_args");

    private static final org.apache.thrift.protocol.TField METADATA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("metadataId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMiceTag_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMiceTag_argsTupleSchemeFactory();

    private java.lang.String metadataId; // required
    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      METADATA_ID((short)1, "metadataId"),
      LOCALE((short)2, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // METADATA_ID
            return METADATA_ID;
          case 2: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.METADATA_ID, new org.apache.thrift.meta_data.FieldMetaData("metadataId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMiceTag_args.class, metaDataMap);
    }

    public getMiceTag_args() {
    }

    public getMiceTag_args(
      java.lang.String metadataId,
      java.lang.String locale)
    {
      this();
      this.metadataId = metadataId;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMiceTag_args(getMiceTag_args other) {
      if (other.isSetMetadataId()) {
        this.metadataId = other.metadataId;
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public getMiceTag_args deepCopy() {
      return new getMiceTag_args(this);
    }

    @Override
    public void clear() {
      this.metadataId = null;
      this.locale = null;
    }

    public java.lang.String getMetadataId() {
      return this.metadataId;
    }

    public void setMetadataId(java.lang.String metadataId) {
      this.metadataId = metadataId;
    }

    public void unsetMetadataId() {
      this.metadataId = null;
    }

    /** Returns true if field metadataId is set (has been assigned a value) and false otherwise */
    public boolean isSetMetadataId() {
      return this.metadataId != null;
    }

    public void setMetadataIdIsSet(boolean value) {
      if (!value) {
        this.metadataId = null;
      }
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case METADATA_ID:
        if (value == null) {
          unsetMetadataId();
        } else {
          setMetadataId((java.lang.String)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case METADATA_ID:
        return getMetadataId();

      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case METADATA_ID:
        return isSetMetadataId();
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMiceTag_args)
        return this.equals((getMiceTag_args)that);
      return false;
    }

    public boolean equals(getMiceTag_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_metadataId = true && this.isSetMetadataId();
      boolean that_present_metadataId = true && that.isSetMetadataId();
      if (this_present_metadataId || that_present_metadataId) {
        if (!(this_present_metadataId && that_present_metadataId))
          return false;
        if (!this.metadataId.equals(that.metadataId))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMetadataId()) ? 131071 : 524287);
      if (isSetMetadataId())
        hashCode = hashCode * 8191 + metadataId.hashCode();

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getMiceTag_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMetadataId()).compareTo(other.isSetMetadataId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMetadataId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadataId, other.metadataId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMiceTag_args(");
      boolean first = true;

      sb.append("metadataId:");
      if (this.metadataId == null) {
        sb.append("null");
      } else {
        sb.append(this.metadataId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMiceTag_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMiceTag_argsStandardScheme getScheme() {
        return new getMiceTag_argsStandardScheme();
      }
    }

    private static class getMiceTag_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMiceTag_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMiceTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // METADATA_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.metadataId = iprot.readString();
                struct.setMetadataIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMiceTag_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.metadataId != null) {
          oprot.writeFieldBegin(METADATA_ID_FIELD_DESC);
          oprot.writeString(struct.metadataId);
          oprot.writeFieldEnd();
        }
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMiceTag_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMiceTag_argsTupleScheme getScheme() {
        return new getMiceTag_argsTupleScheme();
      }
    }

    private static class getMiceTag_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMiceTag_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMiceTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMetadataId()) {
          optionals.set(0);
        }
        if (struct.isSetLocale()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMetadataId()) {
          oprot.writeString(struct.metadataId);
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMiceTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.metadataId = iprot.readString();
          struct.setMetadataIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMiceTag_result implements org.apache.thrift.TBase<getMiceTag_result, getMiceTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMiceTag_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMiceTag_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMiceTag_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMiceTag_resultTupleSchemeFactory();

    private TMiceTagResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMiceTagResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMiceTag_result.class, metaDataMap);
    }

    public getMiceTag_result() {
    }

    public getMiceTag_result(
      TMiceTagResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMiceTag_result(getMiceTag_result other) {
      if (other.isSetSuccess()) {
        this.success = new TMiceTagResponse(other.success);
      }
    }

    public getMiceTag_result deepCopy() {
      return new getMiceTag_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TMiceTagResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TMiceTagResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TMiceTagResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMiceTag_result)
        return this.equals((getMiceTag_result)that);
      return false;
    }

    public boolean equals(getMiceTag_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getMiceTag_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMiceTag_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMiceTag_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMiceTag_resultStandardScheme getScheme() {
        return new getMiceTag_resultStandardScheme();
      }
    }

    private static class getMiceTag_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMiceTag_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMiceTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TMiceTagResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMiceTag_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMiceTag_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMiceTag_resultTupleScheme getScheme() {
        return new getMiceTag_resultTupleScheme();
      }
    }

    private static class getMiceTag_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMiceTag_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMiceTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMiceTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TMiceTagResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listMiceTags_args implements org.apache.thrift.TBase<listMiceTags_args, listMiceTags_args._Fields>, java.io.Serializable, Cloneable, Comparable<listMiceTags_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listMiceTags_args");

    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listMiceTags_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listMiceTags_argsTupleSchemeFactory();

    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCALE((short)1, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listMiceTags_args.class, metaDataMap);
    }

    public listMiceTags_args() {
    }

    public listMiceTags_args(
      java.lang.String locale)
    {
      this();
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listMiceTags_args(listMiceTags_args other) {
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public listMiceTags_args deepCopy() {
      return new listMiceTags_args(this);
    }

    @Override
    public void clear() {
      this.locale = null;
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listMiceTags_args)
        return this.equals((listMiceTags_args)that);
      return false;
    }

    public boolean equals(listMiceTags_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listMiceTags_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listMiceTags_args(");
      boolean first = true;

      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listMiceTags_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listMiceTags_argsStandardScheme getScheme() {
        return new listMiceTags_argsStandardScheme();
      }
    }

    private static class listMiceTags_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listMiceTags_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listMiceTags_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listMiceTags_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listMiceTags_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listMiceTags_argsTupleScheme getScheme() {
        return new listMiceTags_argsTupleScheme();
      }
    }

    private static class listMiceTags_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listMiceTags_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listMiceTags_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetLocale()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listMiceTags_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listMiceTags_result implements org.apache.thrift.TBase<listMiceTags_result, listMiceTags_result._Fields>, java.io.Serializable, Cloneable, Comparable<listMiceTags_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listMiceTags_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listMiceTags_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listMiceTags_resultTupleSchemeFactory();

    private java.util.List<TMiceTagResponse> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMiceTagResponse.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listMiceTags_result.class, metaDataMap);
    }

    public listMiceTags_result() {
    }

    public listMiceTags_result(
      java.util.List<TMiceTagResponse> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listMiceTags_result(listMiceTags_result other) {
      if (other.isSetSuccess()) {
        java.util.List<TMiceTagResponse> __this__success = new java.util.ArrayList<TMiceTagResponse>(other.success.size());
        for (TMiceTagResponse other_element : other.success) {
          __this__success.add(new TMiceTagResponse(other_element));
        }
        this.success = __this__success;
      }
    }

    public listMiceTags_result deepCopy() {
      return new listMiceTags_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TMiceTagResponse> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TMiceTagResponse elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<TMiceTagResponse>();
      }
      this.success.add(elem);
    }

    public java.util.List<TMiceTagResponse> getSuccess() {
      return this.success;
    }

    public void setSuccess(java.util.List<TMiceTagResponse> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<TMiceTagResponse>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listMiceTags_result)
        return this.equals((listMiceTags_result)that);
      return false;
    }

    public boolean equals(listMiceTags_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listMiceTags_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listMiceTags_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listMiceTags_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listMiceTags_resultStandardScheme getScheme() {
        return new listMiceTags_resultStandardScheme();
      }
    }

    private static class listMiceTags_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listMiceTags_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listMiceTags_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list496 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<TMiceTagResponse>(_list496.size);
                  TMiceTagResponse _elem497;
                  for (int _i498 = 0; _i498 < _list496.size; ++_i498)
                  {
                    _elem497 = new TMiceTagResponse();
                    _elem497.read(iprot);
                    struct.success.add(_elem497);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listMiceTags_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TMiceTagResponse _iter499 : struct.success)
            {
              _iter499.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listMiceTags_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listMiceTags_resultTupleScheme getScheme() {
        return new listMiceTags_resultTupleScheme();
      }
    }

    private static class listMiceTags_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listMiceTags_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listMiceTags_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TMiceTagResponse _iter500 : struct.success)
            {
              _iter500.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listMiceTags_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list501 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<TMiceTagResponse>(_list501.size);
            TMiceTagResponse _elem502;
            for (int _i503 = 0; _i503 < _list501.size; ++_i503)
            {
              _elem502 = new TMiceTagResponse();
              _elem502.read(iprot);
              struct.success.add(_elem502);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createMiceTag_args implements org.apache.thrift.TBase<createMiceTag_args, createMiceTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<createMiceTag_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createMiceTag_args");

    private static final org.apache.thrift.protocol.TField MICE_TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("miceTag", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createMiceTag_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createMiceTag_argsTupleSchemeFactory();

    private java.lang.String miceTag; // required
    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MICE_TAG((short)1, "miceTag"),
      LOCALE((short)2, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MICE_TAG
            return MICE_TAG;
          case 2: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MICE_TAG, new org.apache.thrift.meta_data.FieldMetaData("miceTag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createMiceTag_args.class, metaDataMap);
    }

    public createMiceTag_args() {
    }

    public createMiceTag_args(
      java.lang.String miceTag,
      java.lang.String locale)
    {
      this();
      this.miceTag = miceTag;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createMiceTag_args(createMiceTag_args other) {
      if (other.isSetMiceTag()) {
        this.miceTag = other.miceTag;
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public createMiceTag_args deepCopy() {
      return new createMiceTag_args(this);
    }

    @Override
    public void clear() {
      this.miceTag = null;
      this.locale = null;
    }

    public java.lang.String getMiceTag() {
      return this.miceTag;
    }

    public void setMiceTag(java.lang.String miceTag) {
      this.miceTag = miceTag;
    }

    public void unsetMiceTag() {
      this.miceTag = null;
    }

    /** Returns true if field miceTag is set (has been assigned a value) and false otherwise */
    public boolean isSetMiceTag() {
      return this.miceTag != null;
    }

    public void setMiceTagIsSet(boolean value) {
      if (!value) {
        this.miceTag = null;
      }
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MICE_TAG:
        if (value == null) {
          unsetMiceTag();
        } else {
          setMiceTag((java.lang.String)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MICE_TAG:
        return getMiceTag();

      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MICE_TAG:
        return isSetMiceTag();
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createMiceTag_args)
        return this.equals((createMiceTag_args)that);
      return false;
    }

    public boolean equals(createMiceTag_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_miceTag = true && this.isSetMiceTag();
      boolean that_present_miceTag = true && that.isSetMiceTag();
      if (this_present_miceTag || that_present_miceTag) {
        if (!(this_present_miceTag && that_present_miceTag))
          return false;
        if (!this.miceTag.equals(that.miceTag))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMiceTag()) ? 131071 : 524287);
      if (isSetMiceTag())
        hashCode = hashCode * 8191 + miceTag.hashCode();

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createMiceTag_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMiceTag()).compareTo(other.isSetMiceTag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMiceTag()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.miceTag, other.miceTag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createMiceTag_args(");
      boolean first = true;

      sb.append("miceTag:");
      if (this.miceTag == null) {
        sb.append("null");
      } else {
        sb.append(this.miceTag);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createMiceTag_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createMiceTag_argsStandardScheme getScheme() {
        return new createMiceTag_argsStandardScheme();
      }
    }

    private static class createMiceTag_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createMiceTag_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createMiceTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MICE_TAG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.miceTag = iprot.readString();
                struct.setMiceTagIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createMiceTag_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.miceTag != null) {
          oprot.writeFieldBegin(MICE_TAG_FIELD_DESC);
          oprot.writeString(struct.miceTag);
          oprot.writeFieldEnd();
        }
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createMiceTag_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createMiceTag_argsTupleScheme getScheme() {
        return new createMiceTag_argsTupleScheme();
      }
    }

    private static class createMiceTag_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createMiceTag_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createMiceTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMiceTag()) {
          optionals.set(0);
        }
        if (struct.isSetLocale()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMiceTag()) {
          oprot.writeString(struct.miceTag);
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createMiceTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.miceTag = iprot.readString();
          struct.setMiceTagIsSet(true);
        }
        if (incoming.get(1)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createMiceTag_result implements org.apache.thrift.TBase<createMiceTag_result, createMiceTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<createMiceTag_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createMiceTag_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createMiceTag_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createMiceTag_resultTupleSchemeFactory();

    private TMiceTagCUDResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMiceTagCUDResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createMiceTag_result.class, metaDataMap);
    }

    public createMiceTag_result() {
    }

    public createMiceTag_result(
      TMiceTagCUDResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createMiceTag_result(createMiceTag_result other) {
      if (other.isSetSuccess()) {
        this.success = new TMiceTagCUDResponse(other.success);
      }
    }

    public createMiceTag_result deepCopy() {
      return new createMiceTag_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TMiceTagCUDResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TMiceTagCUDResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TMiceTagCUDResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createMiceTag_result)
        return this.equals((createMiceTag_result)that);
      return false;
    }

    public boolean equals(createMiceTag_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createMiceTag_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createMiceTag_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createMiceTag_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createMiceTag_resultStandardScheme getScheme() {
        return new createMiceTag_resultStandardScheme();
      }
    }

    private static class createMiceTag_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createMiceTag_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createMiceTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TMiceTagCUDResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createMiceTag_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createMiceTag_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createMiceTag_resultTupleScheme getScheme() {
        return new createMiceTag_resultTupleScheme();
      }
    }

    private static class createMiceTag_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createMiceTag_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createMiceTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createMiceTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TMiceTagCUDResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMiceEvent_args implements org.apache.thrift.TBase<getMiceEvent_args, getMiceEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMiceEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMiceEvent_args");

    private static final org.apache.thrift.protocol.TField METADATA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("metadataId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMiceEvent_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMiceEvent_argsTupleSchemeFactory();

    private java.lang.String metadataId; // required
    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      METADATA_ID((short)1, "metadataId"),
      LOCALE((short)2, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // METADATA_ID
            return METADATA_ID;
          case 2: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.METADATA_ID, new org.apache.thrift.meta_data.FieldMetaData("metadataId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMiceEvent_args.class, metaDataMap);
    }

    public getMiceEvent_args() {
    }

    public getMiceEvent_args(
      java.lang.String metadataId,
      java.lang.String locale)
    {
      this();
      this.metadataId = metadataId;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMiceEvent_args(getMiceEvent_args other) {
      if (other.isSetMetadataId()) {
        this.metadataId = other.metadataId;
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public getMiceEvent_args deepCopy() {
      return new getMiceEvent_args(this);
    }

    @Override
    public void clear() {
      this.metadataId = null;
      this.locale = null;
    }

    public java.lang.String getMetadataId() {
      return this.metadataId;
    }

    public void setMetadataId(java.lang.String metadataId) {
      this.metadataId = metadataId;
    }

    public void unsetMetadataId() {
      this.metadataId = null;
    }

    /** Returns true if field metadataId is set (has been assigned a value) and false otherwise */
    public boolean isSetMetadataId() {
      return this.metadataId != null;
    }

    public void setMetadataIdIsSet(boolean value) {
      if (!value) {
        this.metadataId = null;
      }
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case METADATA_ID:
        if (value == null) {
          unsetMetadataId();
        } else {
          setMetadataId((java.lang.String)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case METADATA_ID:
        return getMetadataId();

      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case METADATA_ID:
        return isSetMetadataId();
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMiceEvent_args)
        return this.equals((getMiceEvent_args)that);
      return false;
    }

    public boolean equals(getMiceEvent_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_metadataId = true && this.isSetMetadataId();
      boolean that_present_metadataId = true && that.isSetMetadataId();
      if (this_present_metadataId || that_present_metadataId) {
        if (!(this_present_metadataId && that_present_metadataId))
          return false;
        if (!this.metadataId.equals(that.metadataId))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMetadataId()) ? 131071 : 524287);
      if (isSetMetadataId())
        hashCode = hashCode * 8191 + metadataId.hashCode();

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getMiceEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMetadataId()).compareTo(other.isSetMetadataId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMetadataId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadataId, other.metadataId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMiceEvent_args(");
      boolean first = true;

      sb.append("metadataId:");
      if (this.metadataId == null) {
        sb.append("null");
      } else {
        sb.append(this.metadataId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMiceEvent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMiceEvent_argsStandardScheme getScheme() {
        return new getMiceEvent_argsStandardScheme();
      }
    }

    private static class getMiceEvent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMiceEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMiceEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // METADATA_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.metadataId = iprot.readString();
                struct.setMetadataIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMiceEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.metadataId != null) {
          oprot.writeFieldBegin(METADATA_ID_FIELD_DESC);
          oprot.writeString(struct.metadataId);
          oprot.writeFieldEnd();
        }
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMiceEvent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMiceEvent_argsTupleScheme getScheme() {
        return new getMiceEvent_argsTupleScheme();
      }
    }

    private static class getMiceEvent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMiceEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMiceEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMetadataId()) {
          optionals.set(0);
        }
        if (struct.isSetLocale()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMetadataId()) {
          oprot.writeString(struct.metadataId);
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMiceEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.metadataId = iprot.readString();
          struct.setMetadataIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMiceEvent_result implements org.apache.thrift.TBase<getMiceEvent_result, getMiceEvent_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMiceEvent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMiceEvent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMiceEvent_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMiceEvent_resultTupleSchemeFactory();

    private TMiceEventResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMiceEventResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMiceEvent_result.class, metaDataMap);
    }

    public getMiceEvent_result() {
    }

    public getMiceEvent_result(
      TMiceEventResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMiceEvent_result(getMiceEvent_result other) {
      if (other.isSetSuccess()) {
        this.success = new TMiceEventResponse(other.success);
      }
    }

    public getMiceEvent_result deepCopy() {
      return new getMiceEvent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TMiceEventResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TMiceEventResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TMiceEventResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMiceEvent_result)
        return this.equals((getMiceEvent_result)that);
      return false;
    }

    public boolean equals(getMiceEvent_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getMiceEvent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMiceEvent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMiceEvent_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMiceEvent_resultStandardScheme getScheme() {
        return new getMiceEvent_resultStandardScheme();
      }
    }

    private static class getMiceEvent_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMiceEvent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMiceEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TMiceEventResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMiceEvent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMiceEvent_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMiceEvent_resultTupleScheme getScheme() {
        return new getMiceEvent_resultTupleScheme();
      }
    }

    private static class getMiceEvent_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMiceEvent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMiceEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMiceEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TMiceEventResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listMiceEvents_args implements org.apache.thrift.TBase<listMiceEvents_args, listMiceEvents_args._Fields>, java.io.Serializable, Cloneable, Comparable<listMiceEvents_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listMiceEvents_args");

    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listMiceEvents_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listMiceEvents_argsTupleSchemeFactory();

    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCALE((short)1, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listMiceEvents_args.class, metaDataMap);
    }

    public listMiceEvents_args() {
    }

    public listMiceEvents_args(
      java.lang.String locale)
    {
      this();
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listMiceEvents_args(listMiceEvents_args other) {
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public listMiceEvents_args deepCopy() {
      return new listMiceEvents_args(this);
    }

    @Override
    public void clear() {
      this.locale = null;
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listMiceEvents_args)
        return this.equals((listMiceEvents_args)that);
      return false;
    }

    public boolean equals(listMiceEvents_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listMiceEvents_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listMiceEvents_args(");
      boolean first = true;

      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listMiceEvents_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listMiceEvents_argsStandardScheme getScheme() {
        return new listMiceEvents_argsStandardScheme();
      }
    }

    private static class listMiceEvents_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listMiceEvents_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listMiceEvents_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listMiceEvents_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listMiceEvents_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listMiceEvents_argsTupleScheme getScheme() {
        return new listMiceEvents_argsTupleScheme();
      }
    }

    private static class listMiceEvents_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listMiceEvents_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listMiceEvents_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetLocale()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listMiceEvents_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listMiceEvents_result implements org.apache.thrift.TBase<listMiceEvents_result, listMiceEvents_result._Fields>, java.io.Serializable, Cloneable, Comparable<listMiceEvents_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listMiceEvents_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listMiceEvents_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listMiceEvents_resultTupleSchemeFactory();

    private java.util.List<TMiceEventResponse> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMiceEventResponse.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listMiceEvents_result.class, metaDataMap);
    }

    public listMiceEvents_result() {
    }

    public listMiceEvents_result(
      java.util.List<TMiceEventResponse> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listMiceEvents_result(listMiceEvents_result other) {
      if (other.isSetSuccess()) {
        java.util.List<TMiceEventResponse> __this__success = new java.util.ArrayList<TMiceEventResponse>(other.success.size());
        for (TMiceEventResponse other_element : other.success) {
          __this__success.add(new TMiceEventResponse(other_element));
        }
        this.success = __this__success;
      }
    }

    public listMiceEvents_result deepCopy() {
      return new listMiceEvents_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TMiceEventResponse> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TMiceEventResponse elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<TMiceEventResponse>();
      }
      this.success.add(elem);
    }

    public java.util.List<TMiceEventResponse> getSuccess() {
      return this.success;
    }

    public void setSuccess(java.util.List<TMiceEventResponse> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<TMiceEventResponse>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listMiceEvents_result)
        return this.equals((listMiceEvents_result)that);
      return false;
    }

    public boolean equals(listMiceEvents_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listMiceEvents_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listMiceEvents_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listMiceEvents_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listMiceEvents_resultStandardScheme getScheme() {
        return new listMiceEvents_resultStandardScheme();
      }
    }

    private static class listMiceEvents_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listMiceEvents_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listMiceEvents_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list504 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<TMiceEventResponse>(_list504.size);
                  TMiceEventResponse _elem505;
                  for (int _i506 = 0; _i506 < _list504.size; ++_i506)
                  {
                    _elem505 = new TMiceEventResponse();
                    _elem505.read(iprot);
                    struct.success.add(_elem505);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listMiceEvents_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TMiceEventResponse _iter507 : struct.success)
            {
              _iter507.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listMiceEvents_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listMiceEvents_resultTupleScheme getScheme() {
        return new listMiceEvents_resultTupleScheme();
      }
    }

    private static class listMiceEvents_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listMiceEvents_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listMiceEvents_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TMiceEventResponse _iter508 : struct.success)
            {
              _iter508.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listMiceEvents_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list509 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<TMiceEventResponse>(_list509.size);
            TMiceEventResponse _elem510;
            for (int _i511 = 0; _i511 < _list509.size; ++_i511)
            {
              _elem510 = new TMiceEventResponse();
              _elem510.read(iprot);
              struct.success.add(_elem510);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createMiceEvent_args implements org.apache.thrift.TBase<createMiceEvent_args, createMiceEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<createMiceEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createMiceEvent_args");

    private static final org.apache.thrift.protocol.TField MICE_EVENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("miceEventName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createMiceEvent_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createMiceEvent_argsTupleSchemeFactory();

    private java.lang.String miceEventName; // required
    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MICE_EVENT_NAME((short)1, "miceEventName"),
      LOCALE((short)2, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MICE_EVENT_NAME
            return MICE_EVENT_NAME;
          case 2: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MICE_EVENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("miceEventName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createMiceEvent_args.class, metaDataMap);
    }

    public createMiceEvent_args() {
    }

    public createMiceEvent_args(
      java.lang.String miceEventName,
      java.lang.String locale)
    {
      this();
      this.miceEventName = miceEventName;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createMiceEvent_args(createMiceEvent_args other) {
      if (other.isSetMiceEventName()) {
        this.miceEventName = other.miceEventName;
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public createMiceEvent_args deepCopy() {
      return new createMiceEvent_args(this);
    }

    @Override
    public void clear() {
      this.miceEventName = null;
      this.locale = null;
    }

    public java.lang.String getMiceEventName() {
      return this.miceEventName;
    }

    public void setMiceEventName(java.lang.String miceEventName) {
      this.miceEventName = miceEventName;
    }

    public void unsetMiceEventName() {
      this.miceEventName = null;
    }

    /** Returns true if field miceEventName is set (has been assigned a value) and false otherwise */
    public boolean isSetMiceEventName() {
      return this.miceEventName != null;
    }

    public void setMiceEventNameIsSet(boolean value) {
      if (!value) {
        this.miceEventName = null;
      }
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MICE_EVENT_NAME:
        if (value == null) {
          unsetMiceEventName();
        } else {
          setMiceEventName((java.lang.String)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MICE_EVENT_NAME:
        return getMiceEventName();

      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MICE_EVENT_NAME:
        return isSetMiceEventName();
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createMiceEvent_args)
        return this.equals((createMiceEvent_args)that);
      return false;
    }

    public boolean equals(createMiceEvent_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_miceEventName = true && this.isSetMiceEventName();
      boolean that_present_miceEventName = true && that.isSetMiceEventName();
      if (this_present_miceEventName || that_present_miceEventName) {
        if (!(this_present_miceEventName && that_present_miceEventName))
          return false;
        if (!this.miceEventName.equals(that.miceEventName))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMiceEventName()) ? 131071 : 524287);
      if (isSetMiceEventName())
        hashCode = hashCode * 8191 + miceEventName.hashCode();

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createMiceEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMiceEventName()).compareTo(other.isSetMiceEventName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMiceEventName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.miceEventName, other.miceEventName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createMiceEvent_args(");
      boolean first = true;

      sb.append("miceEventName:");
      if (this.miceEventName == null) {
        sb.append("null");
      } else {
        sb.append(this.miceEventName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createMiceEvent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createMiceEvent_argsStandardScheme getScheme() {
        return new createMiceEvent_argsStandardScheme();
      }
    }

    private static class createMiceEvent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createMiceEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createMiceEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MICE_EVENT_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.miceEventName = iprot.readString();
                struct.setMiceEventNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createMiceEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.miceEventName != null) {
          oprot.writeFieldBegin(MICE_EVENT_NAME_FIELD_DESC);
          oprot.writeString(struct.miceEventName);
          oprot.writeFieldEnd();
        }
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createMiceEvent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createMiceEvent_argsTupleScheme getScheme() {
        return new createMiceEvent_argsTupleScheme();
      }
    }

    private static class createMiceEvent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createMiceEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createMiceEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMiceEventName()) {
          optionals.set(0);
        }
        if (struct.isSetLocale()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMiceEventName()) {
          oprot.writeString(struct.miceEventName);
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createMiceEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.miceEventName = iprot.readString();
          struct.setMiceEventNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createMiceEvent_result implements org.apache.thrift.TBase<createMiceEvent_result, createMiceEvent_result._Fields>, java.io.Serializable, Cloneable, Comparable<createMiceEvent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createMiceEvent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createMiceEvent_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createMiceEvent_resultTupleSchemeFactory();

    private TMiceEventCUDResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMiceEventCUDResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createMiceEvent_result.class, metaDataMap);
    }

    public createMiceEvent_result() {
    }

    public createMiceEvent_result(
      TMiceEventCUDResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createMiceEvent_result(createMiceEvent_result other) {
      if (other.isSetSuccess()) {
        this.success = new TMiceEventCUDResponse(other.success);
      }
    }

    public createMiceEvent_result deepCopy() {
      return new createMiceEvent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TMiceEventCUDResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TMiceEventCUDResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TMiceEventCUDResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createMiceEvent_result)
        return this.equals((createMiceEvent_result)that);
      return false;
    }

    public boolean equals(createMiceEvent_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createMiceEvent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createMiceEvent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createMiceEvent_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createMiceEvent_resultStandardScheme getScheme() {
        return new createMiceEvent_resultStandardScheme();
      }
    }

    private static class createMiceEvent_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createMiceEvent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createMiceEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TMiceEventCUDResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createMiceEvent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createMiceEvent_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createMiceEvent_resultTupleScheme getScheme() {
        return new createMiceEvent_resultTupleScheme();
      }
    }

    private static class createMiceEvent_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createMiceEvent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createMiceEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createMiceEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TMiceEventCUDResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMiceCity_args implements org.apache.thrift.TBase<getMiceCity_args, getMiceCity_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMiceCity_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMiceCity_args");

    private static final org.apache.thrift.protocol.TField METADATA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("metadataId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMiceCity_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMiceCity_argsTupleSchemeFactory();

    private java.lang.String metadataId; // required
    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      METADATA_ID((short)1, "metadataId"),
      LOCALE((short)2, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // METADATA_ID
            return METADATA_ID;
          case 2: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.METADATA_ID, new org.apache.thrift.meta_data.FieldMetaData("metadataId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMiceCity_args.class, metaDataMap);
    }

    public getMiceCity_args() {
    }

    public getMiceCity_args(
      java.lang.String metadataId,
      java.lang.String locale)
    {
      this();
      this.metadataId = metadataId;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMiceCity_args(getMiceCity_args other) {
      if (other.isSetMetadataId()) {
        this.metadataId = other.metadataId;
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public getMiceCity_args deepCopy() {
      return new getMiceCity_args(this);
    }

    @Override
    public void clear() {
      this.metadataId = null;
      this.locale = null;
    }

    public java.lang.String getMetadataId() {
      return this.metadataId;
    }

    public void setMetadataId(java.lang.String metadataId) {
      this.metadataId = metadataId;
    }

    public void unsetMetadataId() {
      this.metadataId = null;
    }

    /** Returns true if field metadataId is set (has been assigned a value) and false otherwise */
    public boolean isSetMetadataId() {
      return this.metadataId != null;
    }

    public void setMetadataIdIsSet(boolean value) {
      if (!value) {
        this.metadataId = null;
      }
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case METADATA_ID:
        if (value == null) {
          unsetMetadataId();
        } else {
          setMetadataId((java.lang.String)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case METADATA_ID:
        return getMetadataId();

      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case METADATA_ID:
        return isSetMetadataId();
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMiceCity_args)
        return this.equals((getMiceCity_args)that);
      return false;
    }

    public boolean equals(getMiceCity_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_metadataId = true && this.isSetMetadataId();
      boolean that_present_metadataId = true && that.isSetMetadataId();
      if (this_present_metadataId || that_present_metadataId) {
        if (!(this_present_metadataId && that_present_metadataId))
          return false;
        if (!this.metadataId.equals(that.metadataId))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMetadataId()) ? 131071 : 524287);
      if (isSetMetadataId())
        hashCode = hashCode * 8191 + metadataId.hashCode();

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getMiceCity_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMetadataId()).compareTo(other.isSetMetadataId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMetadataId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadataId, other.metadataId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMiceCity_args(");
      boolean first = true;

      sb.append("metadataId:");
      if (this.metadataId == null) {
        sb.append("null");
      } else {
        sb.append(this.metadataId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMiceCity_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMiceCity_argsStandardScheme getScheme() {
        return new getMiceCity_argsStandardScheme();
      }
    }

    private static class getMiceCity_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMiceCity_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMiceCity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // METADATA_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.metadataId = iprot.readString();
                struct.setMetadataIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMiceCity_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.metadataId != null) {
          oprot.writeFieldBegin(METADATA_ID_FIELD_DESC);
          oprot.writeString(struct.metadataId);
          oprot.writeFieldEnd();
        }
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMiceCity_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMiceCity_argsTupleScheme getScheme() {
        return new getMiceCity_argsTupleScheme();
      }
    }

    private static class getMiceCity_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMiceCity_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMiceCity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMetadataId()) {
          optionals.set(0);
        }
        if (struct.isSetLocale()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMetadataId()) {
          oprot.writeString(struct.metadataId);
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMiceCity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.metadataId = iprot.readString();
          struct.setMetadataIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMiceCity_result implements org.apache.thrift.TBase<getMiceCity_result, getMiceCity_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMiceCity_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMiceCity_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMiceCity_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMiceCity_resultTupleSchemeFactory();

    private TMiceCityResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMiceCityResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMiceCity_result.class, metaDataMap);
    }

    public getMiceCity_result() {
    }

    public getMiceCity_result(
      TMiceCityResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMiceCity_result(getMiceCity_result other) {
      if (other.isSetSuccess()) {
        this.success = new TMiceCityResponse(other.success);
      }
    }

    public getMiceCity_result deepCopy() {
      return new getMiceCity_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TMiceCityResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TMiceCityResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TMiceCityResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMiceCity_result)
        return this.equals((getMiceCity_result)that);
      return false;
    }

    public boolean equals(getMiceCity_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getMiceCity_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMiceCity_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMiceCity_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMiceCity_resultStandardScheme getScheme() {
        return new getMiceCity_resultStandardScheme();
      }
    }

    private static class getMiceCity_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMiceCity_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMiceCity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TMiceCityResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMiceCity_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMiceCity_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMiceCity_resultTupleScheme getScheme() {
        return new getMiceCity_resultTupleScheme();
      }
    }

    private static class getMiceCity_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMiceCity_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMiceCity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMiceCity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TMiceCityResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listMiceCities_args implements org.apache.thrift.TBase<listMiceCities_args, listMiceCities_args._Fields>, java.io.Serializable, Cloneable, Comparable<listMiceCities_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listMiceCities_args");

    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listMiceCities_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listMiceCities_argsTupleSchemeFactory();

    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCALE((short)1, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listMiceCities_args.class, metaDataMap);
    }

    public listMiceCities_args() {
    }

    public listMiceCities_args(
      java.lang.String locale)
    {
      this();
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listMiceCities_args(listMiceCities_args other) {
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public listMiceCities_args deepCopy() {
      return new listMiceCities_args(this);
    }

    @Override
    public void clear() {
      this.locale = null;
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listMiceCities_args)
        return this.equals((listMiceCities_args)that);
      return false;
    }

    public boolean equals(listMiceCities_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listMiceCities_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listMiceCities_args(");
      boolean first = true;

      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listMiceCities_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listMiceCities_argsStandardScheme getScheme() {
        return new listMiceCities_argsStandardScheme();
      }
    }

    private static class listMiceCities_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listMiceCities_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listMiceCities_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listMiceCities_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listMiceCities_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listMiceCities_argsTupleScheme getScheme() {
        return new listMiceCities_argsTupleScheme();
      }
    }

    private static class listMiceCities_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listMiceCities_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listMiceCities_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetLocale()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listMiceCities_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listMiceCities_result implements org.apache.thrift.TBase<listMiceCities_result, listMiceCities_result._Fields>, java.io.Serializable, Cloneable, Comparable<listMiceCities_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listMiceCities_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listMiceCities_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listMiceCities_resultTupleSchemeFactory();

    private java.util.List<TMiceCityResponse> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMiceCityResponse.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listMiceCities_result.class, metaDataMap);
    }

    public listMiceCities_result() {
    }

    public listMiceCities_result(
      java.util.List<TMiceCityResponse> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listMiceCities_result(listMiceCities_result other) {
      if (other.isSetSuccess()) {
        java.util.List<TMiceCityResponse> __this__success = new java.util.ArrayList<TMiceCityResponse>(other.success.size());
        for (TMiceCityResponse other_element : other.success) {
          __this__success.add(new TMiceCityResponse(other_element));
        }
        this.success = __this__success;
      }
    }

    public listMiceCities_result deepCopy() {
      return new listMiceCities_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TMiceCityResponse> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TMiceCityResponse elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<TMiceCityResponse>();
      }
      this.success.add(elem);
    }

    public java.util.List<TMiceCityResponse> getSuccess() {
      return this.success;
    }

    public void setSuccess(java.util.List<TMiceCityResponse> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<TMiceCityResponse>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listMiceCities_result)
        return this.equals((listMiceCities_result)that);
      return false;
    }

    public boolean equals(listMiceCities_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listMiceCities_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listMiceCities_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listMiceCities_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listMiceCities_resultStandardScheme getScheme() {
        return new listMiceCities_resultStandardScheme();
      }
    }

    private static class listMiceCities_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listMiceCities_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listMiceCities_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list512 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<TMiceCityResponse>(_list512.size);
                  TMiceCityResponse _elem513;
                  for (int _i514 = 0; _i514 < _list512.size; ++_i514)
                  {
                    _elem513 = new TMiceCityResponse();
                    _elem513.read(iprot);
                    struct.success.add(_elem513);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listMiceCities_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TMiceCityResponse _iter515 : struct.success)
            {
              _iter515.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listMiceCities_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listMiceCities_resultTupleScheme getScheme() {
        return new listMiceCities_resultTupleScheme();
      }
    }

    private static class listMiceCities_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listMiceCities_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listMiceCities_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TMiceCityResponse _iter516 : struct.success)
            {
              _iter516.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listMiceCities_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list517 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<TMiceCityResponse>(_list517.size);
            TMiceCityResponse _elem518;
            for (int _i519 = 0; _i519 < _list517.size; ++_i519)
            {
              _elem518 = new TMiceCityResponse();
              _elem518.read(iprot);
              struct.success.add(_elem518);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createMiceCity_args implements org.apache.thrift.TBase<createMiceCity_args, createMiceCity_args._Fields>, java.io.Serializable, Cloneable, Comparable<createMiceCity_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createMiceCity_args");

    private static final org.apache.thrift.protocol.TField MICE_CITY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("miceCityName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createMiceCity_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createMiceCity_argsTupleSchemeFactory();

    private java.lang.String miceCityName; // required
    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MICE_CITY_NAME((short)1, "miceCityName"),
      LOCALE((short)2, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MICE_CITY_NAME
            return MICE_CITY_NAME;
          case 2: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MICE_CITY_NAME, new org.apache.thrift.meta_data.FieldMetaData("miceCityName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createMiceCity_args.class, metaDataMap);
    }

    public createMiceCity_args() {
    }

    public createMiceCity_args(
      java.lang.String miceCityName,
      java.lang.String locale)
    {
      this();
      this.miceCityName = miceCityName;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createMiceCity_args(createMiceCity_args other) {
      if (other.isSetMiceCityName()) {
        this.miceCityName = other.miceCityName;
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public createMiceCity_args deepCopy() {
      return new createMiceCity_args(this);
    }

    @Override
    public void clear() {
      this.miceCityName = null;
      this.locale = null;
    }

    public java.lang.String getMiceCityName() {
      return this.miceCityName;
    }

    public void setMiceCityName(java.lang.String miceCityName) {
      this.miceCityName = miceCityName;
    }

    public void unsetMiceCityName() {
      this.miceCityName = null;
    }

    /** Returns true if field miceCityName is set (has been assigned a value) and false otherwise */
    public boolean isSetMiceCityName() {
      return this.miceCityName != null;
    }

    public void setMiceCityNameIsSet(boolean value) {
      if (!value) {
        this.miceCityName = null;
      }
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MICE_CITY_NAME:
        if (value == null) {
          unsetMiceCityName();
        } else {
          setMiceCityName((java.lang.String)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MICE_CITY_NAME:
        return getMiceCityName();

      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MICE_CITY_NAME:
        return isSetMiceCityName();
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createMiceCity_args)
        return this.equals((createMiceCity_args)that);
      return false;
    }

    public boolean equals(createMiceCity_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_miceCityName = true && this.isSetMiceCityName();
      boolean that_present_miceCityName = true && that.isSetMiceCityName();
      if (this_present_miceCityName || that_present_miceCityName) {
        if (!(this_present_miceCityName && that_present_miceCityName))
          return false;
        if (!this.miceCityName.equals(that.miceCityName))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMiceCityName()) ? 131071 : 524287);
      if (isSetMiceCityName())
        hashCode = hashCode * 8191 + miceCityName.hashCode();

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createMiceCity_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMiceCityName()).compareTo(other.isSetMiceCityName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMiceCityName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.miceCityName, other.miceCityName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createMiceCity_args(");
      boolean first = true;

      sb.append("miceCityName:");
      if (this.miceCityName == null) {
        sb.append("null");
      } else {
        sb.append(this.miceCityName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createMiceCity_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createMiceCity_argsStandardScheme getScheme() {
        return new createMiceCity_argsStandardScheme();
      }
    }

    private static class createMiceCity_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createMiceCity_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createMiceCity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MICE_CITY_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.miceCityName = iprot.readString();
                struct.setMiceCityNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createMiceCity_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.miceCityName != null) {
          oprot.writeFieldBegin(MICE_CITY_NAME_FIELD_DESC);
          oprot.writeString(struct.miceCityName);
          oprot.writeFieldEnd();
        }
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createMiceCity_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createMiceCity_argsTupleScheme getScheme() {
        return new createMiceCity_argsTupleScheme();
      }
    }

    private static class createMiceCity_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createMiceCity_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createMiceCity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMiceCityName()) {
          optionals.set(0);
        }
        if (struct.isSetLocale()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMiceCityName()) {
          oprot.writeString(struct.miceCityName);
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createMiceCity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.miceCityName = iprot.readString();
          struct.setMiceCityNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createMiceCity_result implements org.apache.thrift.TBase<createMiceCity_result, createMiceCity_result._Fields>, java.io.Serializable, Cloneable, Comparable<createMiceCity_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createMiceCity_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createMiceCity_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createMiceCity_resultTupleSchemeFactory();

    private TMiceCityCUDResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMiceCityCUDResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createMiceCity_result.class, metaDataMap);
    }

    public createMiceCity_result() {
    }

    public createMiceCity_result(
      TMiceCityCUDResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createMiceCity_result(createMiceCity_result other) {
      if (other.isSetSuccess()) {
        this.success = new TMiceCityCUDResponse(other.success);
      }
    }

    public createMiceCity_result deepCopy() {
      return new createMiceCity_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TMiceCityCUDResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TMiceCityCUDResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TMiceCityCUDResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createMiceCity_result)
        return this.equals((createMiceCity_result)that);
      return false;
    }

    public boolean equals(createMiceCity_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createMiceCity_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createMiceCity_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createMiceCity_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createMiceCity_resultStandardScheme getScheme() {
        return new createMiceCity_resultStandardScheme();
      }
    }

    private static class createMiceCity_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createMiceCity_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createMiceCity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TMiceCityCUDResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createMiceCity_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createMiceCity_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createMiceCity_resultTupleScheme getScheme() {
        return new createMiceCity_resultTupleScheme();
      }
    }

    private static class createMiceCity_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createMiceCity_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createMiceCity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createMiceCity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TMiceCityCUDResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getPropertyLevel_args implements org.apache.thrift.TBase<getPropertyLevel_args, getPropertyLevel_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPropertyLevel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPropertyLevel_args");

    private static final org.apache.thrift.protocol.TField METADATA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("metadataId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPropertyLevel_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPropertyLevel_argsTupleSchemeFactory();

    private java.lang.String metadataId; // required
    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      METADATA_ID((short)1, "metadataId"),
      LOCALE((short)2, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // METADATA_ID
            return METADATA_ID;
          case 2: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.METADATA_ID, new org.apache.thrift.meta_data.FieldMetaData("metadataId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPropertyLevel_args.class, metaDataMap);
    }

    public getPropertyLevel_args() {
    }

    public getPropertyLevel_args(
      java.lang.String metadataId,
      java.lang.String locale)
    {
      this();
      this.metadataId = metadataId;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPropertyLevel_args(getPropertyLevel_args other) {
      if (other.isSetMetadataId()) {
        this.metadataId = other.metadataId;
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public getPropertyLevel_args deepCopy() {
      return new getPropertyLevel_args(this);
    }

    @Override
    public void clear() {
      this.metadataId = null;
      this.locale = null;
    }

    public java.lang.String getMetadataId() {
      return this.metadataId;
    }

    public void setMetadataId(java.lang.String metadataId) {
      this.metadataId = metadataId;
    }

    public void unsetMetadataId() {
      this.metadataId = null;
    }

    /** Returns true if field metadataId is set (has been assigned a value) and false otherwise */
    public boolean isSetMetadataId() {
      return this.metadataId != null;
    }

    public void setMetadataIdIsSet(boolean value) {
      if (!value) {
        this.metadataId = null;
      }
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case METADATA_ID:
        if (value == null) {
          unsetMetadataId();
        } else {
          setMetadataId((java.lang.String)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case METADATA_ID:
        return getMetadataId();

      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case METADATA_ID:
        return isSetMetadataId();
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getPropertyLevel_args)
        return this.equals((getPropertyLevel_args)that);
      return false;
    }

    public boolean equals(getPropertyLevel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_metadataId = true && this.isSetMetadataId();
      boolean that_present_metadataId = true && that.isSetMetadataId();
      if (this_present_metadataId || that_present_metadataId) {
        if (!(this_present_metadataId && that_present_metadataId))
          return false;
        if (!this.metadataId.equals(that.metadataId))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMetadataId()) ? 131071 : 524287);
      if (isSetMetadataId())
        hashCode = hashCode * 8191 + metadataId.hashCode();

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getPropertyLevel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMetadataId()).compareTo(other.isSetMetadataId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMetadataId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadataId, other.metadataId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getPropertyLevel_args(");
      boolean first = true;

      sb.append("metadataId:");
      if (this.metadataId == null) {
        sb.append("null");
      } else {
        sb.append(this.metadataId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPropertyLevel_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPropertyLevel_argsStandardScheme getScheme() {
        return new getPropertyLevel_argsStandardScheme();
      }
    }

    private static class getPropertyLevel_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPropertyLevel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPropertyLevel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // METADATA_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.metadataId = iprot.readString();
                struct.setMetadataIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPropertyLevel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.metadataId != null) {
          oprot.writeFieldBegin(METADATA_ID_FIELD_DESC);
          oprot.writeString(struct.metadataId);
          oprot.writeFieldEnd();
        }
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPropertyLevel_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPropertyLevel_argsTupleScheme getScheme() {
        return new getPropertyLevel_argsTupleScheme();
      }
    }

    private static class getPropertyLevel_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPropertyLevel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPropertyLevel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMetadataId()) {
          optionals.set(0);
        }
        if (struct.isSetLocale()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMetadataId()) {
          oprot.writeString(struct.metadataId);
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPropertyLevel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.metadataId = iprot.readString();
          struct.setMetadataIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getPropertyLevel_result implements org.apache.thrift.TBase<getPropertyLevel_result, getPropertyLevel_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPropertyLevel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPropertyLevel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPropertyLevel_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPropertyLevel_resultTupleSchemeFactory();

    private TPropertyLevelResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPropertyLevelResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPropertyLevel_result.class, metaDataMap);
    }

    public getPropertyLevel_result() {
    }

    public getPropertyLevel_result(
      TPropertyLevelResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPropertyLevel_result(getPropertyLevel_result other) {
      if (other.isSetSuccess()) {
        this.success = new TPropertyLevelResponse(other.success);
      }
    }

    public getPropertyLevel_result deepCopy() {
      return new getPropertyLevel_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TPropertyLevelResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TPropertyLevelResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TPropertyLevelResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getPropertyLevel_result)
        return this.equals((getPropertyLevel_result)that);
      return false;
    }

    public boolean equals(getPropertyLevel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getPropertyLevel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getPropertyLevel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPropertyLevel_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPropertyLevel_resultStandardScheme getScheme() {
        return new getPropertyLevel_resultStandardScheme();
      }
    }

    private static class getPropertyLevel_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPropertyLevel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPropertyLevel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TPropertyLevelResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPropertyLevel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPropertyLevel_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPropertyLevel_resultTupleScheme getScheme() {
        return new getPropertyLevel_resultTupleScheme();
      }
    }

    private static class getPropertyLevel_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPropertyLevel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPropertyLevel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPropertyLevel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TPropertyLevelResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listPropertyLevel_args implements org.apache.thrift.TBase<listPropertyLevel_args, listPropertyLevel_args._Fields>, java.io.Serializable, Cloneable, Comparable<listPropertyLevel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listPropertyLevel_args");

    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listPropertyLevel_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listPropertyLevel_argsTupleSchemeFactory();

    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCALE((short)1, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listPropertyLevel_args.class, metaDataMap);
    }

    public listPropertyLevel_args() {
    }

    public listPropertyLevel_args(
      java.lang.String locale)
    {
      this();
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listPropertyLevel_args(listPropertyLevel_args other) {
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public listPropertyLevel_args deepCopy() {
      return new listPropertyLevel_args(this);
    }

    @Override
    public void clear() {
      this.locale = null;
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listPropertyLevel_args)
        return this.equals((listPropertyLevel_args)that);
      return false;
    }

    public boolean equals(listPropertyLevel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listPropertyLevel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listPropertyLevel_args(");
      boolean first = true;

      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listPropertyLevel_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listPropertyLevel_argsStandardScheme getScheme() {
        return new listPropertyLevel_argsStandardScheme();
      }
    }

    private static class listPropertyLevel_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listPropertyLevel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listPropertyLevel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listPropertyLevel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listPropertyLevel_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listPropertyLevel_argsTupleScheme getScheme() {
        return new listPropertyLevel_argsTupleScheme();
      }
    }

    private static class listPropertyLevel_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listPropertyLevel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listPropertyLevel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetLocale()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listPropertyLevel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listPropertyLevel_result implements org.apache.thrift.TBase<listPropertyLevel_result, listPropertyLevel_result._Fields>, java.io.Serializable, Cloneable, Comparable<listPropertyLevel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listPropertyLevel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listPropertyLevel_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listPropertyLevel_resultTupleSchemeFactory();

    private java.util.List<TPropertyLevelResponse> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPropertyLevelResponse.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listPropertyLevel_result.class, metaDataMap);
    }

    public listPropertyLevel_result() {
    }

    public listPropertyLevel_result(
      java.util.List<TPropertyLevelResponse> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listPropertyLevel_result(listPropertyLevel_result other) {
      if (other.isSetSuccess()) {
        java.util.List<TPropertyLevelResponse> __this__success = new java.util.ArrayList<TPropertyLevelResponse>(other.success.size());
        for (TPropertyLevelResponse other_element : other.success) {
          __this__success.add(new TPropertyLevelResponse(other_element));
        }
        this.success = __this__success;
      }
    }

    public listPropertyLevel_result deepCopy() {
      return new listPropertyLevel_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TPropertyLevelResponse> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TPropertyLevelResponse elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<TPropertyLevelResponse>();
      }
      this.success.add(elem);
    }

    public java.util.List<TPropertyLevelResponse> getSuccess() {
      return this.success;
    }

    public void setSuccess(java.util.List<TPropertyLevelResponse> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<TPropertyLevelResponse>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listPropertyLevel_result)
        return this.equals((listPropertyLevel_result)that);
      return false;
    }

    public boolean equals(listPropertyLevel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listPropertyLevel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listPropertyLevel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listPropertyLevel_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listPropertyLevel_resultStandardScheme getScheme() {
        return new listPropertyLevel_resultStandardScheme();
      }
    }

    private static class listPropertyLevel_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listPropertyLevel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listPropertyLevel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list520 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<TPropertyLevelResponse>(_list520.size);
                  TPropertyLevelResponse _elem521;
                  for (int _i522 = 0; _i522 < _list520.size; ++_i522)
                  {
                    _elem521 = new TPropertyLevelResponse();
                    _elem521.read(iprot);
                    struct.success.add(_elem521);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listPropertyLevel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TPropertyLevelResponse _iter523 : struct.success)
            {
              _iter523.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listPropertyLevel_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listPropertyLevel_resultTupleScheme getScheme() {
        return new listPropertyLevel_resultTupleScheme();
      }
    }

    private static class listPropertyLevel_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listPropertyLevel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listPropertyLevel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TPropertyLevelResponse _iter524 : struct.success)
            {
              _iter524.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listPropertyLevel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list525 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<TPropertyLevelResponse>(_list525.size);
            TPropertyLevelResponse _elem526;
            for (int _i527 = 0; _i527 < _list525.size; ++_i527)
            {
              _elem526 = new TPropertyLevelResponse();
              _elem526.read(iprot);
              struct.success.add(_elem526);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createPropertyLevel_args implements org.apache.thrift.TBase<createPropertyLevel_args, createPropertyLevel_args._Fields>, java.io.Serializable, Cloneable, Comparable<createPropertyLevel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createPropertyLevel_args");

    private static final org.apache.thrift.protocol.TField PROPERTY_LEVEL_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("propertyLevelData", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createPropertyLevel_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createPropertyLevel_argsTupleSchemeFactory();

    private TPropertyLevel propertyLevelData; // required
    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROPERTY_LEVEL_DATA((short)1, "propertyLevelData"),
      LOCALE((short)2, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROPERTY_LEVEL_DATA
            return PROPERTY_LEVEL_DATA;
          case 2: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROPERTY_LEVEL_DATA, new org.apache.thrift.meta_data.FieldMetaData("propertyLevelData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPropertyLevel.class)));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createPropertyLevel_args.class, metaDataMap);
    }

    public createPropertyLevel_args() {
    }

    public createPropertyLevel_args(
      TPropertyLevel propertyLevelData,
      java.lang.String locale)
    {
      this();
      this.propertyLevelData = propertyLevelData;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createPropertyLevel_args(createPropertyLevel_args other) {
      if (other.isSetPropertyLevelData()) {
        this.propertyLevelData = new TPropertyLevel(other.propertyLevelData);
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public createPropertyLevel_args deepCopy() {
      return new createPropertyLevel_args(this);
    }

    @Override
    public void clear() {
      this.propertyLevelData = null;
      this.locale = null;
    }

    public TPropertyLevel getPropertyLevelData() {
      return this.propertyLevelData;
    }

    public void setPropertyLevelData(TPropertyLevel propertyLevelData) {
      this.propertyLevelData = propertyLevelData;
    }

    public void unsetPropertyLevelData() {
      this.propertyLevelData = null;
    }

    /** Returns true if field propertyLevelData is set (has been assigned a value) and false otherwise */
    public boolean isSetPropertyLevelData() {
      return this.propertyLevelData != null;
    }

    public void setPropertyLevelDataIsSet(boolean value) {
      if (!value) {
        this.propertyLevelData = null;
      }
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PROPERTY_LEVEL_DATA:
        if (value == null) {
          unsetPropertyLevelData();
        } else {
          setPropertyLevelData((TPropertyLevel)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PROPERTY_LEVEL_DATA:
        return getPropertyLevelData();

      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PROPERTY_LEVEL_DATA:
        return isSetPropertyLevelData();
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createPropertyLevel_args)
        return this.equals((createPropertyLevel_args)that);
      return false;
    }

    public boolean equals(createPropertyLevel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_propertyLevelData = true && this.isSetPropertyLevelData();
      boolean that_present_propertyLevelData = true && that.isSetPropertyLevelData();
      if (this_present_propertyLevelData || that_present_propertyLevelData) {
        if (!(this_present_propertyLevelData && that_present_propertyLevelData))
          return false;
        if (!this.propertyLevelData.equals(that.propertyLevelData))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPropertyLevelData()) ? 131071 : 524287);
      if (isSetPropertyLevelData())
        hashCode = hashCode * 8191 + propertyLevelData.hashCode();

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createPropertyLevel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPropertyLevelData()).compareTo(other.isSetPropertyLevelData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPropertyLevelData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propertyLevelData, other.propertyLevelData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createPropertyLevel_args(");
      boolean first = true;

      sb.append("propertyLevelData:");
      if (this.propertyLevelData == null) {
        sb.append("null");
      } else {
        sb.append(this.propertyLevelData);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (propertyLevelData != null) {
        propertyLevelData.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createPropertyLevel_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createPropertyLevel_argsStandardScheme getScheme() {
        return new createPropertyLevel_argsStandardScheme();
      }
    }

    private static class createPropertyLevel_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createPropertyLevel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createPropertyLevel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROPERTY_LEVEL_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.propertyLevelData = new TPropertyLevel();
                struct.propertyLevelData.read(iprot);
                struct.setPropertyLevelDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createPropertyLevel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.propertyLevelData != null) {
          oprot.writeFieldBegin(PROPERTY_LEVEL_DATA_FIELD_DESC);
          struct.propertyLevelData.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createPropertyLevel_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createPropertyLevel_argsTupleScheme getScheme() {
        return new createPropertyLevel_argsTupleScheme();
      }
    }

    private static class createPropertyLevel_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createPropertyLevel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createPropertyLevel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPropertyLevelData()) {
          optionals.set(0);
        }
        if (struct.isSetLocale()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPropertyLevelData()) {
          struct.propertyLevelData.write(oprot);
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createPropertyLevel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.propertyLevelData = new TPropertyLevel();
          struct.propertyLevelData.read(iprot);
          struct.setPropertyLevelDataIsSet(true);
        }
        if (incoming.get(1)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createPropertyLevel_result implements org.apache.thrift.TBase<createPropertyLevel_result, createPropertyLevel_result._Fields>, java.io.Serializable, Cloneable, Comparable<createPropertyLevel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createPropertyLevel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createPropertyLevel_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createPropertyLevel_resultTupleSchemeFactory();

    private TPropertyLevelResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPropertyLevelResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createPropertyLevel_result.class, metaDataMap);
    }

    public createPropertyLevel_result() {
    }

    public createPropertyLevel_result(
      TPropertyLevelResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createPropertyLevel_result(createPropertyLevel_result other) {
      if (other.isSetSuccess()) {
        this.success = new TPropertyLevelResponse(other.success);
      }
    }

    public createPropertyLevel_result deepCopy() {
      return new createPropertyLevel_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TPropertyLevelResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TPropertyLevelResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TPropertyLevelResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createPropertyLevel_result)
        return this.equals((createPropertyLevel_result)that);
      return false;
    }

    public boolean equals(createPropertyLevel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createPropertyLevel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createPropertyLevel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createPropertyLevel_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createPropertyLevel_resultStandardScheme getScheme() {
        return new createPropertyLevel_resultStandardScheme();
      }
    }

    private static class createPropertyLevel_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createPropertyLevel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createPropertyLevel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TPropertyLevelResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createPropertyLevel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createPropertyLevel_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createPropertyLevel_resultTupleScheme getScheme() {
        return new createPropertyLevel_resultTupleScheme();
      }
    }

    private static class createPropertyLevel_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createPropertyLevel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createPropertyLevel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createPropertyLevel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TPropertyLevelResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getToiletConfiguration_args implements org.apache.thrift.TBase<getToiletConfiguration_args, getToiletConfiguration_args._Fields>, java.io.Serializable, Cloneable, Comparable<getToiletConfiguration_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getToiletConfiguration_args");

    private static final org.apache.thrift.protocol.TField METADATA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("metadataId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getToiletConfiguration_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getToiletConfiguration_argsTupleSchemeFactory();

    private java.lang.String metadataId; // required
    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      METADATA_ID((short)1, "metadataId"),
      LOCALE((short)2, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // METADATA_ID
            return METADATA_ID;
          case 2: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.METADATA_ID, new org.apache.thrift.meta_data.FieldMetaData("metadataId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getToiletConfiguration_args.class, metaDataMap);
    }

    public getToiletConfiguration_args() {
    }

    public getToiletConfiguration_args(
      java.lang.String metadataId,
      java.lang.String locale)
    {
      this();
      this.metadataId = metadataId;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getToiletConfiguration_args(getToiletConfiguration_args other) {
      if (other.isSetMetadataId()) {
        this.metadataId = other.metadataId;
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public getToiletConfiguration_args deepCopy() {
      return new getToiletConfiguration_args(this);
    }

    @Override
    public void clear() {
      this.metadataId = null;
      this.locale = null;
    }

    public java.lang.String getMetadataId() {
      return this.metadataId;
    }

    public void setMetadataId(java.lang.String metadataId) {
      this.metadataId = metadataId;
    }

    public void unsetMetadataId() {
      this.metadataId = null;
    }

    /** Returns true if field metadataId is set (has been assigned a value) and false otherwise */
    public boolean isSetMetadataId() {
      return this.metadataId != null;
    }

    public void setMetadataIdIsSet(boolean value) {
      if (!value) {
        this.metadataId = null;
      }
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case METADATA_ID:
        if (value == null) {
          unsetMetadataId();
        } else {
          setMetadataId((java.lang.String)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case METADATA_ID:
        return getMetadataId();

      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case METADATA_ID:
        return isSetMetadataId();
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getToiletConfiguration_args)
        return this.equals((getToiletConfiguration_args)that);
      return false;
    }

    public boolean equals(getToiletConfiguration_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_metadataId = true && this.isSetMetadataId();
      boolean that_present_metadataId = true && that.isSetMetadataId();
      if (this_present_metadataId || that_present_metadataId) {
        if (!(this_present_metadataId && that_present_metadataId))
          return false;
        if (!this.metadataId.equals(that.metadataId))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMetadataId()) ? 131071 : 524287);
      if (isSetMetadataId())
        hashCode = hashCode * 8191 + metadataId.hashCode();

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getToiletConfiguration_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMetadataId()).compareTo(other.isSetMetadataId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMetadataId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadataId, other.metadataId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getToiletConfiguration_args(");
      boolean first = true;

      sb.append("metadataId:");
      if (this.metadataId == null) {
        sb.append("null");
      } else {
        sb.append(this.metadataId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getToiletConfiguration_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getToiletConfiguration_argsStandardScheme getScheme() {
        return new getToiletConfiguration_argsStandardScheme();
      }
    }

    private static class getToiletConfiguration_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getToiletConfiguration_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getToiletConfiguration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // METADATA_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.metadataId = iprot.readString();
                struct.setMetadataIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getToiletConfiguration_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.metadataId != null) {
          oprot.writeFieldBegin(METADATA_ID_FIELD_DESC);
          oprot.writeString(struct.metadataId);
          oprot.writeFieldEnd();
        }
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getToiletConfiguration_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getToiletConfiguration_argsTupleScheme getScheme() {
        return new getToiletConfiguration_argsTupleScheme();
      }
    }

    private static class getToiletConfiguration_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getToiletConfiguration_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getToiletConfiguration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMetadataId()) {
          optionals.set(0);
        }
        if (struct.isSetLocale()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMetadataId()) {
          oprot.writeString(struct.metadataId);
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getToiletConfiguration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.metadataId = iprot.readString();
          struct.setMetadataIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getToiletConfiguration_result implements org.apache.thrift.TBase<getToiletConfiguration_result, getToiletConfiguration_result._Fields>, java.io.Serializable, Cloneable, Comparable<getToiletConfiguration_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getToiletConfiguration_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getToiletConfiguration_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getToiletConfiguration_resultTupleSchemeFactory();

    private TToiletConfigurationResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TToiletConfigurationResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getToiletConfiguration_result.class, metaDataMap);
    }

    public getToiletConfiguration_result() {
    }

    public getToiletConfiguration_result(
      TToiletConfigurationResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getToiletConfiguration_result(getToiletConfiguration_result other) {
      if (other.isSetSuccess()) {
        this.success = new TToiletConfigurationResponse(other.success);
      }
    }

    public getToiletConfiguration_result deepCopy() {
      return new getToiletConfiguration_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TToiletConfigurationResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TToiletConfigurationResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TToiletConfigurationResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getToiletConfiguration_result)
        return this.equals((getToiletConfiguration_result)that);
      return false;
    }

    public boolean equals(getToiletConfiguration_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getToiletConfiguration_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getToiletConfiguration_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getToiletConfiguration_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getToiletConfiguration_resultStandardScheme getScheme() {
        return new getToiletConfiguration_resultStandardScheme();
      }
    }

    private static class getToiletConfiguration_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getToiletConfiguration_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getToiletConfiguration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TToiletConfigurationResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getToiletConfiguration_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getToiletConfiguration_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getToiletConfiguration_resultTupleScheme getScheme() {
        return new getToiletConfiguration_resultTupleScheme();
      }
    }

    private static class getToiletConfiguration_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getToiletConfiguration_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getToiletConfiguration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getToiletConfiguration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TToiletConfigurationResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listToiletConfiguration_args implements org.apache.thrift.TBase<listToiletConfiguration_args, listToiletConfiguration_args._Fields>, java.io.Serializable, Cloneable, Comparable<listToiletConfiguration_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listToiletConfiguration_args");

    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listToiletConfiguration_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listToiletConfiguration_argsTupleSchemeFactory();

    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCALE((short)1, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listToiletConfiguration_args.class, metaDataMap);
    }

    public listToiletConfiguration_args() {
    }

    public listToiletConfiguration_args(
      java.lang.String locale)
    {
      this();
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listToiletConfiguration_args(listToiletConfiguration_args other) {
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public listToiletConfiguration_args deepCopy() {
      return new listToiletConfiguration_args(this);
    }

    @Override
    public void clear() {
      this.locale = null;
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listToiletConfiguration_args)
        return this.equals((listToiletConfiguration_args)that);
      return false;
    }

    public boolean equals(listToiletConfiguration_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listToiletConfiguration_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listToiletConfiguration_args(");
      boolean first = true;

      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listToiletConfiguration_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listToiletConfiguration_argsStandardScheme getScheme() {
        return new listToiletConfiguration_argsStandardScheme();
      }
    }

    private static class listToiletConfiguration_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listToiletConfiguration_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listToiletConfiguration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listToiletConfiguration_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listToiletConfiguration_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listToiletConfiguration_argsTupleScheme getScheme() {
        return new listToiletConfiguration_argsTupleScheme();
      }
    }

    private static class listToiletConfiguration_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listToiletConfiguration_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listToiletConfiguration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetLocale()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listToiletConfiguration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listToiletConfiguration_result implements org.apache.thrift.TBase<listToiletConfiguration_result, listToiletConfiguration_result._Fields>, java.io.Serializable, Cloneable, Comparable<listToiletConfiguration_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listToiletConfiguration_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listToiletConfiguration_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listToiletConfiguration_resultTupleSchemeFactory();

    private java.util.List<TToiletConfigurationResponse> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TToiletConfigurationResponse.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listToiletConfiguration_result.class, metaDataMap);
    }

    public listToiletConfiguration_result() {
    }

    public listToiletConfiguration_result(
      java.util.List<TToiletConfigurationResponse> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listToiletConfiguration_result(listToiletConfiguration_result other) {
      if (other.isSetSuccess()) {
        java.util.List<TToiletConfigurationResponse> __this__success = new java.util.ArrayList<TToiletConfigurationResponse>(other.success.size());
        for (TToiletConfigurationResponse other_element : other.success) {
          __this__success.add(new TToiletConfigurationResponse(other_element));
        }
        this.success = __this__success;
      }
    }

    public listToiletConfiguration_result deepCopy() {
      return new listToiletConfiguration_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TToiletConfigurationResponse> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TToiletConfigurationResponse elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<TToiletConfigurationResponse>();
      }
      this.success.add(elem);
    }

    public java.util.List<TToiletConfigurationResponse> getSuccess() {
      return this.success;
    }

    public void setSuccess(java.util.List<TToiletConfigurationResponse> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<TToiletConfigurationResponse>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listToiletConfiguration_result)
        return this.equals((listToiletConfiguration_result)that);
      return false;
    }

    public boolean equals(listToiletConfiguration_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listToiletConfiguration_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listToiletConfiguration_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listToiletConfiguration_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listToiletConfiguration_resultStandardScheme getScheme() {
        return new listToiletConfiguration_resultStandardScheme();
      }
    }

    private static class listToiletConfiguration_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listToiletConfiguration_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listToiletConfiguration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list528 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<TToiletConfigurationResponse>(_list528.size);
                  TToiletConfigurationResponse _elem529;
                  for (int _i530 = 0; _i530 < _list528.size; ++_i530)
                  {
                    _elem529 = new TToiletConfigurationResponse();
                    _elem529.read(iprot);
                    struct.success.add(_elem529);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listToiletConfiguration_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TToiletConfigurationResponse _iter531 : struct.success)
            {
              _iter531.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listToiletConfiguration_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listToiletConfiguration_resultTupleScheme getScheme() {
        return new listToiletConfiguration_resultTupleScheme();
      }
    }

    private static class listToiletConfiguration_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listToiletConfiguration_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listToiletConfiguration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TToiletConfigurationResponse _iter532 : struct.success)
            {
              _iter532.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listToiletConfiguration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list533 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<TToiletConfigurationResponse>(_list533.size);
            TToiletConfigurationResponse _elem534;
            for (int _i535 = 0; _i535 < _list533.size; ++_i535)
            {
              _elem534 = new TToiletConfigurationResponse();
              _elem534.read(iprot);
              struct.success.add(_elem534);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createToilet_args implements org.apache.thrift.TBase<createToilet_args, createToilet_args._Fields>, java.io.Serializable, Cloneable, Comparable<createToilet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createToilet_args");

    private static final org.apache.thrift.protocol.TField TOILET_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("toiletData", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createToilet_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createToilet_argsTupleSchemeFactory();

    private TToiletConfigurationResponse toiletData; // required
    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOILET_DATA((short)1, "toiletData"),
      LOCALE((short)2, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOILET_DATA
            return TOILET_DATA;
          case 2: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOILET_DATA, new org.apache.thrift.meta_data.FieldMetaData("toiletData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TToiletConfigurationResponse.class)));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createToilet_args.class, metaDataMap);
    }

    public createToilet_args() {
    }

    public createToilet_args(
      TToiletConfigurationResponse toiletData,
      java.lang.String locale)
    {
      this();
      this.toiletData = toiletData;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createToilet_args(createToilet_args other) {
      if (other.isSetToiletData()) {
        this.toiletData = new TToiletConfigurationResponse(other.toiletData);
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public createToilet_args deepCopy() {
      return new createToilet_args(this);
    }

    @Override
    public void clear() {
      this.toiletData = null;
      this.locale = null;
    }

    public TToiletConfigurationResponse getToiletData() {
      return this.toiletData;
    }

    public void setToiletData(TToiletConfigurationResponse toiletData) {
      this.toiletData = toiletData;
    }

    public void unsetToiletData() {
      this.toiletData = null;
    }

    /** Returns true if field toiletData is set (has been assigned a value) and false otherwise */
    public boolean isSetToiletData() {
      return this.toiletData != null;
    }

    public void setToiletDataIsSet(boolean value) {
      if (!value) {
        this.toiletData = null;
      }
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TOILET_DATA:
        if (value == null) {
          unsetToiletData();
        } else {
          setToiletData((TToiletConfigurationResponse)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOILET_DATA:
        return getToiletData();

      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOILET_DATA:
        return isSetToiletData();
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createToilet_args)
        return this.equals((createToilet_args)that);
      return false;
    }

    public boolean equals(createToilet_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_toiletData = true && this.isSetToiletData();
      boolean that_present_toiletData = true && that.isSetToiletData();
      if (this_present_toiletData || that_present_toiletData) {
        if (!(this_present_toiletData && that_present_toiletData))
          return false;
        if (!this.toiletData.equals(that.toiletData))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetToiletData()) ? 131071 : 524287);
      if (isSetToiletData())
        hashCode = hashCode * 8191 + toiletData.hashCode();

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createToilet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetToiletData()).compareTo(other.isSetToiletData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToiletData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toiletData, other.toiletData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createToilet_args(");
      boolean first = true;

      sb.append("toiletData:");
      if (this.toiletData == null) {
        sb.append("null");
      } else {
        sb.append(this.toiletData);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (toiletData != null) {
        toiletData.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createToilet_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createToilet_argsStandardScheme getScheme() {
        return new createToilet_argsStandardScheme();
      }
    }

    private static class createToilet_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createToilet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createToilet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOILET_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.toiletData = new TToiletConfigurationResponse();
                struct.toiletData.read(iprot);
                struct.setToiletDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createToilet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.toiletData != null) {
          oprot.writeFieldBegin(TOILET_DATA_FIELD_DESC);
          struct.toiletData.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createToilet_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createToilet_argsTupleScheme getScheme() {
        return new createToilet_argsTupleScheme();
      }
    }

    private static class createToilet_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createToilet_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createToilet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetToiletData()) {
          optionals.set(0);
        }
        if (struct.isSetLocale()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetToiletData()) {
          struct.toiletData.write(oprot);
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createToilet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.toiletData = new TToiletConfigurationResponse();
          struct.toiletData.read(iprot);
          struct.setToiletDataIsSet(true);
        }
        if (incoming.get(1)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createToilet_result implements org.apache.thrift.TBase<createToilet_result, createToilet_result._Fields>, java.io.Serializable, Cloneable, Comparable<createToilet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createToilet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createToilet_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createToilet_resultTupleSchemeFactory();

    private TToiletConfigurationResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TToiletConfigurationResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createToilet_result.class, metaDataMap);
    }

    public createToilet_result() {
    }

    public createToilet_result(
      TToiletConfigurationResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createToilet_result(createToilet_result other) {
      if (other.isSetSuccess()) {
        this.success = new TToiletConfigurationResponse(other.success);
      }
    }

    public createToilet_result deepCopy() {
      return new createToilet_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TToiletConfigurationResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TToiletConfigurationResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TToiletConfigurationResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createToilet_result)
        return this.equals((createToilet_result)that);
      return false;
    }

    public boolean equals(createToilet_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createToilet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createToilet_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createToilet_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createToilet_resultStandardScheme getScheme() {
        return new createToilet_resultStandardScheme();
      }
    }

    private static class createToilet_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createToilet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createToilet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TToiletConfigurationResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createToilet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createToilet_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createToilet_resultTupleScheme getScheme() {
        return new createToilet_resultTupleScheme();
      }
    }

    private static class createToilet_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createToilet_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createToilet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createToilet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TToiletConfigurationResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getPaymentPolicy_args implements org.apache.thrift.TBase<getPaymentPolicy_args, getPaymentPolicy_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPaymentPolicy_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPaymentPolicy_args");

    private static final org.apache.thrift.protocol.TField METADATA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("metadataId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPaymentPolicy_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPaymentPolicy_argsTupleSchemeFactory();

    private java.lang.String metadataId; // required
    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      METADATA_ID((short)1, "metadataId"),
      LOCALE((short)2, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // METADATA_ID
            return METADATA_ID;
          case 2: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.METADATA_ID, new org.apache.thrift.meta_data.FieldMetaData("metadataId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPaymentPolicy_args.class, metaDataMap);
    }

    public getPaymentPolicy_args() {
    }

    public getPaymentPolicy_args(
      java.lang.String metadataId,
      java.lang.String locale)
    {
      this();
      this.metadataId = metadataId;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPaymentPolicy_args(getPaymentPolicy_args other) {
      if (other.isSetMetadataId()) {
        this.metadataId = other.metadataId;
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public getPaymentPolicy_args deepCopy() {
      return new getPaymentPolicy_args(this);
    }

    @Override
    public void clear() {
      this.metadataId = null;
      this.locale = null;
    }

    public java.lang.String getMetadataId() {
      return this.metadataId;
    }

    public void setMetadataId(java.lang.String metadataId) {
      this.metadataId = metadataId;
    }

    public void unsetMetadataId() {
      this.metadataId = null;
    }

    /** Returns true if field metadataId is set (has been assigned a value) and false otherwise */
    public boolean isSetMetadataId() {
      return this.metadataId != null;
    }

    public void setMetadataIdIsSet(boolean value) {
      if (!value) {
        this.metadataId = null;
      }
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case METADATA_ID:
        if (value == null) {
          unsetMetadataId();
        } else {
          setMetadataId((java.lang.String)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case METADATA_ID:
        return getMetadataId();

      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case METADATA_ID:
        return isSetMetadataId();
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getPaymentPolicy_args)
        return this.equals((getPaymentPolicy_args)that);
      return false;
    }

    public boolean equals(getPaymentPolicy_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_metadataId = true && this.isSetMetadataId();
      boolean that_present_metadataId = true && that.isSetMetadataId();
      if (this_present_metadataId || that_present_metadataId) {
        if (!(this_present_metadataId && that_present_metadataId))
          return false;
        if (!this.metadataId.equals(that.metadataId))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMetadataId()) ? 131071 : 524287);
      if (isSetMetadataId())
        hashCode = hashCode * 8191 + metadataId.hashCode();

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getPaymentPolicy_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMetadataId()).compareTo(other.isSetMetadataId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMetadataId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadataId, other.metadataId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getPaymentPolicy_args(");
      boolean first = true;

      sb.append("metadataId:");
      if (this.metadataId == null) {
        sb.append("null");
      } else {
        sb.append(this.metadataId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPaymentPolicy_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPaymentPolicy_argsStandardScheme getScheme() {
        return new getPaymentPolicy_argsStandardScheme();
      }
    }

    private static class getPaymentPolicy_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPaymentPolicy_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPaymentPolicy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // METADATA_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.metadataId = iprot.readString();
                struct.setMetadataIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPaymentPolicy_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.metadataId != null) {
          oprot.writeFieldBegin(METADATA_ID_FIELD_DESC);
          oprot.writeString(struct.metadataId);
          oprot.writeFieldEnd();
        }
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPaymentPolicy_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPaymentPolicy_argsTupleScheme getScheme() {
        return new getPaymentPolicy_argsTupleScheme();
      }
    }

    private static class getPaymentPolicy_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPaymentPolicy_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPaymentPolicy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMetadataId()) {
          optionals.set(0);
        }
        if (struct.isSetLocale()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMetadataId()) {
          oprot.writeString(struct.metadataId);
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPaymentPolicy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.metadataId = iprot.readString();
          struct.setMetadataIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getPaymentPolicy_result implements org.apache.thrift.TBase<getPaymentPolicy_result, getPaymentPolicy_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPaymentPolicy_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPaymentPolicy_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPaymentPolicy_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPaymentPolicy_resultTupleSchemeFactory();

    private TPaymentPolicyResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPaymentPolicyResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPaymentPolicy_result.class, metaDataMap);
    }

    public getPaymentPolicy_result() {
    }

    public getPaymentPolicy_result(
      TPaymentPolicyResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPaymentPolicy_result(getPaymentPolicy_result other) {
      if (other.isSetSuccess()) {
        this.success = new TPaymentPolicyResponse(other.success);
      }
    }

    public getPaymentPolicy_result deepCopy() {
      return new getPaymentPolicy_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TPaymentPolicyResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TPaymentPolicyResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TPaymentPolicyResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getPaymentPolicy_result)
        return this.equals((getPaymentPolicy_result)that);
      return false;
    }

    public boolean equals(getPaymentPolicy_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getPaymentPolicy_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getPaymentPolicy_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPaymentPolicy_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPaymentPolicy_resultStandardScheme getScheme() {
        return new getPaymentPolicy_resultStandardScheme();
      }
    }

    private static class getPaymentPolicy_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPaymentPolicy_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPaymentPolicy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TPaymentPolicyResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPaymentPolicy_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPaymentPolicy_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPaymentPolicy_resultTupleScheme getScheme() {
        return new getPaymentPolicy_resultTupleScheme();
      }
    }

    private static class getPaymentPolicy_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPaymentPolicy_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPaymentPolicy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPaymentPolicy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TPaymentPolicyResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listPaymentPolicies_args implements org.apache.thrift.TBase<listPaymentPolicies_args, listPaymentPolicies_args._Fields>, java.io.Serializable, Cloneable, Comparable<listPaymentPolicies_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listPaymentPolicies_args");

    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listPaymentPolicies_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listPaymentPolicies_argsTupleSchemeFactory();

    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCALE((short)1, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listPaymentPolicies_args.class, metaDataMap);
    }

    public listPaymentPolicies_args() {
    }

    public listPaymentPolicies_args(
      java.lang.String locale)
    {
      this();
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listPaymentPolicies_args(listPaymentPolicies_args other) {
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public listPaymentPolicies_args deepCopy() {
      return new listPaymentPolicies_args(this);
    }

    @Override
    public void clear() {
      this.locale = null;
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listPaymentPolicies_args)
        return this.equals((listPaymentPolicies_args)that);
      return false;
    }

    public boolean equals(listPaymentPolicies_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listPaymentPolicies_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listPaymentPolicies_args(");
      boolean first = true;

      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listPaymentPolicies_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listPaymentPolicies_argsStandardScheme getScheme() {
        return new listPaymentPolicies_argsStandardScheme();
      }
    }

    private static class listPaymentPolicies_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listPaymentPolicies_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listPaymentPolicies_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listPaymentPolicies_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listPaymentPolicies_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listPaymentPolicies_argsTupleScheme getScheme() {
        return new listPaymentPolicies_argsTupleScheme();
      }
    }

    private static class listPaymentPolicies_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listPaymentPolicies_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listPaymentPolicies_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetLocale()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listPaymentPolicies_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listPaymentPolicies_result implements org.apache.thrift.TBase<listPaymentPolicies_result, listPaymentPolicies_result._Fields>, java.io.Serializable, Cloneable, Comparable<listPaymentPolicies_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listPaymentPolicies_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listPaymentPolicies_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listPaymentPolicies_resultTupleSchemeFactory();

    private java.util.List<TPaymentPolicyResponse> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPaymentPolicyResponse.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listPaymentPolicies_result.class, metaDataMap);
    }

    public listPaymentPolicies_result() {
    }

    public listPaymentPolicies_result(
      java.util.List<TPaymentPolicyResponse> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listPaymentPolicies_result(listPaymentPolicies_result other) {
      if (other.isSetSuccess()) {
        java.util.List<TPaymentPolicyResponse> __this__success = new java.util.ArrayList<TPaymentPolicyResponse>(other.success.size());
        for (TPaymentPolicyResponse other_element : other.success) {
          __this__success.add(new TPaymentPolicyResponse(other_element));
        }
        this.success = __this__success;
      }
    }

    public listPaymentPolicies_result deepCopy() {
      return new listPaymentPolicies_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TPaymentPolicyResponse> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TPaymentPolicyResponse elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<TPaymentPolicyResponse>();
      }
      this.success.add(elem);
    }

    public java.util.List<TPaymentPolicyResponse> getSuccess() {
      return this.success;
    }

    public void setSuccess(java.util.List<TPaymentPolicyResponse> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<TPaymentPolicyResponse>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listPaymentPolicies_result)
        return this.equals((listPaymentPolicies_result)that);
      return false;
    }

    public boolean equals(listPaymentPolicies_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listPaymentPolicies_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listPaymentPolicies_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listPaymentPolicies_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listPaymentPolicies_resultStandardScheme getScheme() {
        return new listPaymentPolicies_resultStandardScheme();
      }
    }

    private static class listPaymentPolicies_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listPaymentPolicies_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listPaymentPolicies_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list536 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<TPaymentPolicyResponse>(_list536.size);
                  TPaymentPolicyResponse _elem537;
                  for (int _i538 = 0; _i538 < _list536.size; ++_i538)
                  {
                    _elem537 = new TPaymentPolicyResponse();
                    _elem537.read(iprot);
                    struct.success.add(_elem537);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listPaymentPolicies_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TPaymentPolicyResponse _iter539 : struct.success)
            {
              _iter539.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listPaymentPolicies_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listPaymentPolicies_resultTupleScheme getScheme() {
        return new listPaymentPolicies_resultTupleScheme();
      }
    }

    private static class listPaymentPolicies_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listPaymentPolicies_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listPaymentPolicies_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TPaymentPolicyResponse _iter540 : struct.success)
            {
              _iter540.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listPaymentPolicies_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list541 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<TPaymentPolicyResponse>(_list541.size);
            TPaymentPolicyResponse _elem542;
            for (int _i543 = 0; _i543 < _list541.size; ++_i543)
            {
              _elem542 = new TPaymentPolicyResponse();
              _elem542.read(iprot);
              struct.success.add(_elem542);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createPaymentPolicy_args implements org.apache.thrift.TBase<createPaymentPolicy_args, createPaymentPolicy_args._Fields>, java.io.Serializable, Cloneable, Comparable<createPaymentPolicy_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createPaymentPolicy_args");

    private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField RULE_FIELD_DESC = new org.apache.thrift.protocol.TField("rule", org.apache.thrift.protocol.TType.MAP, (short)2);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createPaymentPolicy_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createPaymentPolicy_argsTupleSchemeFactory();

    private java.lang.String description; // required
    private java.util.Map<java.lang.String,java.lang.String> rule; // required
    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DESCRIPTION((short)1, "description"),
      RULE((short)2, "rule"),
      LOCALE((short)3, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DESCRIPTION
            return DESCRIPTION;
          case 2: // RULE
            return RULE;
          case 3: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RULE, new org.apache.thrift.meta_data.FieldMetaData("rule", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createPaymentPolicy_args.class, metaDataMap);
    }

    public createPaymentPolicy_args() {
    }

    public createPaymentPolicy_args(
      java.lang.String description,
      java.util.Map<java.lang.String,java.lang.String> rule,
      java.lang.String locale)
    {
      this();
      this.description = description;
      this.rule = rule;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createPaymentPolicy_args(createPaymentPolicy_args other) {
      if (other.isSetDescription()) {
        this.description = other.description;
      }
      if (other.isSetRule()) {
        java.util.Map<java.lang.String,java.lang.String> __this__rule = new java.util.HashMap<java.lang.String,java.lang.String>(other.rule);
        this.rule = __this__rule;
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public createPaymentPolicy_args deepCopy() {
      return new createPaymentPolicy_args(this);
    }

    @Override
    public void clear() {
      this.description = null;
      this.rule = null;
      this.locale = null;
    }

    public java.lang.String getDescription() {
      return this.description;
    }

    public void setDescription(java.lang.String description) {
      this.description = description;
    }

    public void unsetDescription() {
      this.description = null;
    }

    /** Returns true if field description is set (has been assigned a value) and false otherwise */
    public boolean isSetDescription() {
      return this.description != null;
    }

    public void setDescriptionIsSet(boolean value) {
      if (!value) {
        this.description = null;
      }
    }

    public int getRuleSize() {
      return (this.rule == null) ? 0 : this.rule.size();
    }

    public void putToRule(java.lang.String key, java.lang.String val) {
      if (this.rule == null) {
        this.rule = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.rule.put(key, val);
    }

    public java.util.Map<java.lang.String,java.lang.String> getRule() {
      return this.rule;
    }

    public void setRule(java.util.Map<java.lang.String,java.lang.String> rule) {
      this.rule = rule;
    }

    public void unsetRule() {
      this.rule = null;
    }

    /** Returns true if field rule is set (has been assigned a value) and false otherwise */
    public boolean isSetRule() {
      return this.rule != null;
    }

    public void setRuleIsSet(boolean value) {
      if (!value) {
        this.rule = null;
      }
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case DESCRIPTION:
        if (value == null) {
          unsetDescription();
        } else {
          setDescription((java.lang.String)value);
        }
        break;

      case RULE:
        if (value == null) {
          unsetRule();
        } else {
          setRule((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DESCRIPTION:
        return getDescription();

      case RULE:
        return getRule();

      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DESCRIPTION:
        return isSetDescription();
      case RULE:
        return isSetRule();
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createPaymentPolicy_args)
        return this.equals((createPaymentPolicy_args)that);
      return false;
    }

    public boolean equals(createPaymentPolicy_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_description = true && this.isSetDescription();
      boolean that_present_description = true && that.isSetDescription();
      if (this_present_description || that_present_description) {
        if (!(this_present_description && that_present_description))
          return false;
        if (!this.description.equals(that.description))
          return false;
      }

      boolean this_present_rule = true && this.isSetRule();
      boolean that_present_rule = true && that.isSetRule();
      if (this_present_rule || that_present_rule) {
        if (!(this_present_rule && that_present_rule))
          return false;
        if (!this.rule.equals(that.rule))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
      if (isSetDescription())
        hashCode = hashCode * 8191 + description.hashCode();

      hashCode = hashCode * 8191 + ((isSetRule()) ? 131071 : 524287);
      if (isSetRule())
        hashCode = hashCode * 8191 + rule.hashCode();

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createPaymentPolicy_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescription()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRule()).compareTo(other.isSetRule());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRule()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rule, other.rule);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createPaymentPolicy_args(");
      boolean first = true;

      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rule:");
      if (this.rule == null) {
        sb.append("null");
      } else {
        sb.append(this.rule);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createPaymentPolicy_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createPaymentPolicy_argsStandardScheme getScheme() {
        return new createPaymentPolicy_argsStandardScheme();
      }
    }

    private static class createPaymentPolicy_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createPaymentPolicy_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createPaymentPolicy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DESCRIPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.description = iprot.readString();
                struct.setDescriptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RULE
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map544 = iprot.readMapBegin();
                  struct.rule = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map544.size);
                  java.lang.String _key545;
                  java.lang.String _val546;
                  for (int _i547 = 0; _i547 < _map544.size; ++_i547)
                  {
                    _key545 = iprot.readString();
                    _val546 = iprot.readString();
                    struct.rule.put(_key545, _val546);
                  }
                  iprot.readMapEnd();
                }
                struct.setRuleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createPaymentPolicy_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.description != null) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
        if (struct.rule != null) {
          oprot.writeFieldBegin(RULE_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.rule.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter548 : struct.rule.entrySet())
            {
              oprot.writeString(_iter548.getKey());
              oprot.writeString(_iter548.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createPaymentPolicy_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createPaymentPolicy_argsTupleScheme getScheme() {
        return new createPaymentPolicy_argsTupleScheme();
      }
    }

    private static class createPaymentPolicy_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createPaymentPolicy_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createPaymentPolicy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDescription()) {
          optionals.set(0);
        }
        if (struct.isSetRule()) {
          optionals.set(1);
        }
        if (struct.isSetLocale()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDescription()) {
          oprot.writeString(struct.description);
        }
        if (struct.isSetRule()) {
          {
            oprot.writeI32(struct.rule.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter549 : struct.rule.entrySet())
            {
              oprot.writeString(_iter549.getKey());
              oprot.writeString(_iter549.getValue());
            }
          }
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createPaymentPolicy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.description = iprot.readString();
          struct.setDescriptionIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map550 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.rule = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map550.size);
            java.lang.String _key551;
            java.lang.String _val552;
            for (int _i553 = 0; _i553 < _map550.size; ++_i553)
            {
              _key551 = iprot.readString();
              _val552 = iprot.readString();
              struct.rule.put(_key551, _val552);
            }
          }
          struct.setRuleIsSet(true);
        }
        if (incoming.get(2)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createPaymentPolicy_result implements org.apache.thrift.TBase<createPaymentPolicy_result, createPaymentPolicy_result._Fields>, java.io.Serializable, Cloneable, Comparable<createPaymentPolicy_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createPaymentPolicy_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createPaymentPolicy_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createPaymentPolicy_resultTupleSchemeFactory();

    private TPaymentPolicyCUDResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPaymentPolicyCUDResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createPaymentPolicy_result.class, metaDataMap);
    }

    public createPaymentPolicy_result() {
    }

    public createPaymentPolicy_result(
      TPaymentPolicyCUDResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createPaymentPolicy_result(createPaymentPolicy_result other) {
      if (other.isSetSuccess()) {
        this.success = new TPaymentPolicyCUDResponse(other.success);
      }
    }

    public createPaymentPolicy_result deepCopy() {
      return new createPaymentPolicy_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TPaymentPolicyCUDResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TPaymentPolicyCUDResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TPaymentPolicyCUDResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createPaymentPolicy_result)
        return this.equals((createPaymentPolicy_result)that);
      return false;
    }

    public boolean equals(createPaymentPolicy_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createPaymentPolicy_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createPaymentPolicy_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createPaymentPolicy_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createPaymentPolicy_resultStandardScheme getScheme() {
        return new createPaymentPolicy_resultStandardScheme();
      }
    }

    private static class createPaymentPolicy_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createPaymentPolicy_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createPaymentPolicy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TPaymentPolicyCUDResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createPaymentPolicy_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createPaymentPolicy_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createPaymentPolicy_resultTupleScheme getScheme() {
        return new createPaymentPolicy_resultTupleScheme();
      }
    }

    private static class createPaymentPolicy_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createPaymentPolicy_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createPaymentPolicy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createPaymentPolicy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TPaymentPolicyCUDResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCancellationPolicy_args implements org.apache.thrift.TBase<getCancellationPolicy_args, getCancellationPolicy_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCancellationPolicy_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCancellationPolicy_args");

    private static final org.apache.thrift.protocol.TField METADATA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("metadataId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCancellationPolicy_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCancellationPolicy_argsTupleSchemeFactory();

    private java.lang.String metadataId; // required
    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      METADATA_ID((short)1, "metadataId"),
      LOCALE((short)2, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // METADATA_ID
            return METADATA_ID;
          case 2: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.METADATA_ID, new org.apache.thrift.meta_data.FieldMetaData("metadataId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCancellationPolicy_args.class, metaDataMap);
    }

    public getCancellationPolicy_args() {
    }

    public getCancellationPolicy_args(
      java.lang.String metadataId,
      java.lang.String locale)
    {
      this();
      this.metadataId = metadataId;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCancellationPolicy_args(getCancellationPolicy_args other) {
      if (other.isSetMetadataId()) {
        this.metadataId = other.metadataId;
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public getCancellationPolicy_args deepCopy() {
      return new getCancellationPolicy_args(this);
    }

    @Override
    public void clear() {
      this.metadataId = null;
      this.locale = null;
    }

    public java.lang.String getMetadataId() {
      return this.metadataId;
    }

    public void setMetadataId(java.lang.String metadataId) {
      this.metadataId = metadataId;
    }

    public void unsetMetadataId() {
      this.metadataId = null;
    }

    /** Returns true if field metadataId is set (has been assigned a value) and false otherwise */
    public boolean isSetMetadataId() {
      return this.metadataId != null;
    }

    public void setMetadataIdIsSet(boolean value) {
      if (!value) {
        this.metadataId = null;
      }
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case METADATA_ID:
        if (value == null) {
          unsetMetadataId();
        } else {
          setMetadataId((java.lang.String)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case METADATA_ID:
        return getMetadataId();

      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case METADATA_ID:
        return isSetMetadataId();
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getCancellationPolicy_args)
        return this.equals((getCancellationPolicy_args)that);
      return false;
    }

    public boolean equals(getCancellationPolicy_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_metadataId = true && this.isSetMetadataId();
      boolean that_present_metadataId = true && that.isSetMetadataId();
      if (this_present_metadataId || that_present_metadataId) {
        if (!(this_present_metadataId && that_present_metadataId))
          return false;
        if (!this.metadataId.equals(that.metadataId))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMetadataId()) ? 131071 : 524287);
      if (isSetMetadataId())
        hashCode = hashCode * 8191 + metadataId.hashCode();

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getCancellationPolicy_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMetadataId()).compareTo(other.isSetMetadataId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMetadataId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadataId, other.metadataId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCancellationPolicy_args(");
      boolean first = true;

      sb.append("metadataId:");
      if (this.metadataId == null) {
        sb.append("null");
      } else {
        sb.append(this.metadataId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCancellationPolicy_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCancellationPolicy_argsStandardScheme getScheme() {
        return new getCancellationPolicy_argsStandardScheme();
      }
    }

    private static class getCancellationPolicy_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCancellationPolicy_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCancellationPolicy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // METADATA_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.metadataId = iprot.readString();
                struct.setMetadataIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCancellationPolicy_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.metadataId != null) {
          oprot.writeFieldBegin(METADATA_ID_FIELD_DESC);
          oprot.writeString(struct.metadataId);
          oprot.writeFieldEnd();
        }
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCancellationPolicy_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCancellationPolicy_argsTupleScheme getScheme() {
        return new getCancellationPolicy_argsTupleScheme();
      }
    }

    private static class getCancellationPolicy_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCancellationPolicy_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCancellationPolicy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMetadataId()) {
          optionals.set(0);
        }
        if (struct.isSetLocale()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMetadataId()) {
          oprot.writeString(struct.metadataId);
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCancellationPolicy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.metadataId = iprot.readString();
          struct.setMetadataIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCancellationPolicy_result implements org.apache.thrift.TBase<getCancellationPolicy_result, getCancellationPolicy_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCancellationPolicy_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCancellationPolicy_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCancellationPolicy_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCancellationPolicy_resultTupleSchemeFactory();

    private TCancellationPolicyResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCancellationPolicyResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCancellationPolicy_result.class, metaDataMap);
    }

    public getCancellationPolicy_result() {
    }

    public getCancellationPolicy_result(
      TCancellationPolicyResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCancellationPolicy_result(getCancellationPolicy_result other) {
      if (other.isSetSuccess()) {
        this.success = new TCancellationPolicyResponse(other.success);
      }
    }

    public getCancellationPolicy_result deepCopy() {
      return new getCancellationPolicy_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TCancellationPolicyResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TCancellationPolicyResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TCancellationPolicyResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getCancellationPolicy_result)
        return this.equals((getCancellationPolicy_result)that);
      return false;
    }

    public boolean equals(getCancellationPolicy_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getCancellationPolicy_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCancellationPolicy_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCancellationPolicy_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCancellationPolicy_resultStandardScheme getScheme() {
        return new getCancellationPolicy_resultStandardScheme();
      }
    }

    private static class getCancellationPolicy_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCancellationPolicy_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCancellationPolicy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TCancellationPolicyResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCancellationPolicy_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCancellationPolicy_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCancellationPolicy_resultTupleScheme getScheme() {
        return new getCancellationPolicy_resultTupleScheme();
      }
    }

    private static class getCancellationPolicy_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCancellationPolicy_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCancellationPolicy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCancellationPolicy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TCancellationPolicyResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listCancellationPolicies_args implements org.apache.thrift.TBase<listCancellationPolicies_args, listCancellationPolicies_args._Fields>, java.io.Serializable, Cloneable, Comparable<listCancellationPolicies_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listCancellationPolicies_args");

    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listCancellationPolicies_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listCancellationPolicies_argsTupleSchemeFactory();

    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCALE((short)1, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listCancellationPolicies_args.class, metaDataMap);
    }

    public listCancellationPolicies_args() {
    }

    public listCancellationPolicies_args(
      java.lang.String locale)
    {
      this();
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listCancellationPolicies_args(listCancellationPolicies_args other) {
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public listCancellationPolicies_args deepCopy() {
      return new listCancellationPolicies_args(this);
    }

    @Override
    public void clear() {
      this.locale = null;
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listCancellationPolicies_args)
        return this.equals((listCancellationPolicies_args)that);
      return false;
    }

    public boolean equals(listCancellationPolicies_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listCancellationPolicies_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listCancellationPolicies_args(");
      boolean first = true;

      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listCancellationPolicies_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCancellationPolicies_argsStandardScheme getScheme() {
        return new listCancellationPolicies_argsStandardScheme();
      }
    }

    private static class listCancellationPolicies_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listCancellationPolicies_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listCancellationPolicies_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listCancellationPolicies_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listCancellationPolicies_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCancellationPolicies_argsTupleScheme getScheme() {
        return new listCancellationPolicies_argsTupleScheme();
      }
    }

    private static class listCancellationPolicies_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listCancellationPolicies_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listCancellationPolicies_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetLocale()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listCancellationPolicies_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listCancellationPolicies_result implements org.apache.thrift.TBase<listCancellationPolicies_result, listCancellationPolicies_result._Fields>, java.io.Serializable, Cloneable, Comparable<listCancellationPolicies_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listCancellationPolicies_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listCancellationPolicies_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listCancellationPolicies_resultTupleSchemeFactory();

    private java.util.List<TCancellationPolicyResponse> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCancellationPolicyResponse.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listCancellationPolicies_result.class, metaDataMap);
    }

    public listCancellationPolicies_result() {
    }

    public listCancellationPolicies_result(
      java.util.List<TCancellationPolicyResponse> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listCancellationPolicies_result(listCancellationPolicies_result other) {
      if (other.isSetSuccess()) {
        java.util.List<TCancellationPolicyResponse> __this__success = new java.util.ArrayList<TCancellationPolicyResponse>(other.success.size());
        for (TCancellationPolicyResponse other_element : other.success) {
          __this__success.add(new TCancellationPolicyResponse(other_element));
        }
        this.success = __this__success;
      }
    }

    public listCancellationPolicies_result deepCopy() {
      return new listCancellationPolicies_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TCancellationPolicyResponse> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TCancellationPolicyResponse elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<TCancellationPolicyResponse>();
      }
      this.success.add(elem);
    }

    public java.util.List<TCancellationPolicyResponse> getSuccess() {
      return this.success;
    }

    public void setSuccess(java.util.List<TCancellationPolicyResponse> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<TCancellationPolicyResponse>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listCancellationPolicies_result)
        return this.equals((listCancellationPolicies_result)that);
      return false;
    }

    public boolean equals(listCancellationPolicies_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listCancellationPolicies_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listCancellationPolicies_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listCancellationPolicies_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCancellationPolicies_resultStandardScheme getScheme() {
        return new listCancellationPolicies_resultStandardScheme();
      }
    }

    private static class listCancellationPolicies_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listCancellationPolicies_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listCancellationPolicies_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list554 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<TCancellationPolicyResponse>(_list554.size);
                  TCancellationPolicyResponse _elem555;
                  for (int _i556 = 0; _i556 < _list554.size; ++_i556)
                  {
                    _elem555 = new TCancellationPolicyResponse();
                    _elem555.read(iprot);
                    struct.success.add(_elem555);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listCancellationPolicies_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TCancellationPolicyResponse _iter557 : struct.success)
            {
              _iter557.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listCancellationPolicies_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCancellationPolicies_resultTupleScheme getScheme() {
        return new listCancellationPolicies_resultTupleScheme();
      }
    }

    private static class listCancellationPolicies_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listCancellationPolicies_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listCancellationPolicies_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TCancellationPolicyResponse _iter558 : struct.success)
            {
              _iter558.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listCancellationPolicies_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list559 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<TCancellationPolicyResponse>(_list559.size);
            TCancellationPolicyResponse _elem560;
            for (int _i561 = 0; _i561 < _list559.size; ++_i561)
            {
              _elem560 = new TCancellationPolicyResponse();
              _elem560.read(iprot);
              struct.success.add(_elem560);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createCancellationPolicy_args implements org.apache.thrift.TBase<createCancellationPolicy_args, createCancellationPolicy_args._Fields>, java.io.Serializable, Cloneable, Comparable<createCancellationPolicy_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createCancellationPolicy_args");

    private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField RULE_FIELD_DESC = new org.apache.thrift.protocol.TField("rule", org.apache.thrift.protocol.TType.MAP, (short)2);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createCancellationPolicy_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createCancellationPolicy_argsTupleSchemeFactory();

    private java.lang.String description; // required
    private java.util.Map<java.lang.String,java.lang.String> rule; // required
    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DESCRIPTION((short)1, "description"),
      RULE((short)2, "rule"),
      LOCALE((short)3, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DESCRIPTION
            return DESCRIPTION;
          case 2: // RULE
            return RULE;
          case 3: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RULE, new org.apache.thrift.meta_data.FieldMetaData("rule", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createCancellationPolicy_args.class, metaDataMap);
    }

    public createCancellationPolicy_args() {
    }

    public createCancellationPolicy_args(
      java.lang.String description,
      java.util.Map<java.lang.String,java.lang.String> rule,
      java.lang.String locale)
    {
      this();
      this.description = description;
      this.rule = rule;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createCancellationPolicy_args(createCancellationPolicy_args other) {
      if (other.isSetDescription()) {
        this.description = other.description;
      }
      if (other.isSetRule()) {
        java.util.Map<java.lang.String,java.lang.String> __this__rule = new java.util.HashMap<java.lang.String,java.lang.String>(other.rule);
        this.rule = __this__rule;
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public createCancellationPolicy_args deepCopy() {
      return new createCancellationPolicy_args(this);
    }

    @Override
    public void clear() {
      this.description = null;
      this.rule = null;
      this.locale = null;
    }

    public java.lang.String getDescription() {
      return this.description;
    }

    public void setDescription(java.lang.String description) {
      this.description = description;
    }

    public void unsetDescription() {
      this.description = null;
    }

    /** Returns true if field description is set (has been assigned a value) and false otherwise */
    public boolean isSetDescription() {
      return this.description != null;
    }

    public void setDescriptionIsSet(boolean value) {
      if (!value) {
        this.description = null;
      }
    }

    public int getRuleSize() {
      return (this.rule == null) ? 0 : this.rule.size();
    }

    public void putToRule(java.lang.String key, java.lang.String val) {
      if (this.rule == null) {
        this.rule = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.rule.put(key, val);
    }

    public java.util.Map<java.lang.String,java.lang.String> getRule() {
      return this.rule;
    }

    public void setRule(java.util.Map<java.lang.String,java.lang.String> rule) {
      this.rule = rule;
    }

    public void unsetRule() {
      this.rule = null;
    }

    /** Returns true if field rule is set (has been assigned a value) and false otherwise */
    public boolean isSetRule() {
      return this.rule != null;
    }

    public void setRuleIsSet(boolean value) {
      if (!value) {
        this.rule = null;
      }
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case DESCRIPTION:
        if (value == null) {
          unsetDescription();
        } else {
          setDescription((java.lang.String)value);
        }
        break;

      case RULE:
        if (value == null) {
          unsetRule();
        } else {
          setRule((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DESCRIPTION:
        return getDescription();

      case RULE:
        return getRule();

      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DESCRIPTION:
        return isSetDescription();
      case RULE:
        return isSetRule();
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createCancellationPolicy_args)
        return this.equals((createCancellationPolicy_args)that);
      return false;
    }

    public boolean equals(createCancellationPolicy_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_description = true && this.isSetDescription();
      boolean that_present_description = true && that.isSetDescription();
      if (this_present_description || that_present_description) {
        if (!(this_present_description && that_present_description))
          return false;
        if (!this.description.equals(that.description))
          return false;
      }

      boolean this_present_rule = true && this.isSetRule();
      boolean that_present_rule = true && that.isSetRule();
      if (this_present_rule || that_present_rule) {
        if (!(this_present_rule && that_present_rule))
          return false;
        if (!this.rule.equals(that.rule))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
      if (isSetDescription())
        hashCode = hashCode * 8191 + description.hashCode();

      hashCode = hashCode * 8191 + ((isSetRule()) ? 131071 : 524287);
      if (isSetRule())
        hashCode = hashCode * 8191 + rule.hashCode();

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createCancellationPolicy_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescription()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRule()).compareTo(other.isSetRule());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRule()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rule, other.rule);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createCancellationPolicy_args(");
      boolean first = true;

      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rule:");
      if (this.rule == null) {
        sb.append("null");
      } else {
        sb.append(this.rule);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createCancellationPolicy_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createCancellationPolicy_argsStandardScheme getScheme() {
        return new createCancellationPolicy_argsStandardScheme();
      }
    }

    private static class createCancellationPolicy_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createCancellationPolicy_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createCancellationPolicy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DESCRIPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.description = iprot.readString();
                struct.setDescriptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RULE
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map562 = iprot.readMapBegin();
                  struct.rule = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map562.size);
                  java.lang.String _key563;
                  java.lang.String _val564;
                  for (int _i565 = 0; _i565 < _map562.size; ++_i565)
                  {
                    _key563 = iprot.readString();
                    _val564 = iprot.readString();
                    struct.rule.put(_key563, _val564);
                  }
                  iprot.readMapEnd();
                }
                struct.setRuleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createCancellationPolicy_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.description != null) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
        if (struct.rule != null) {
          oprot.writeFieldBegin(RULE_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.rule.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter566 : struct.rule.entrySet())
            {
              oprot.writeString(_iter566.getKey());
              oprot.writeString(_iter566.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createCancellationPolicy_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createCancellationPolicy_argsTupleScheme getScheme() {
        return new createCancellationPolicy_argsTupleScheme();
      }
    }

    private static class createCancellationPolicy_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createCancellationPolicy_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createCancellationPolicy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDescription()) {
          optionals.set(0);
        }
        if (struct.isSetRule()) {
          optionals.set(1);
        }
        if (struct.isSetLocale()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDescription()) {
          oprot.writeString(struct.description);
        }
        if (struct.isSetRule()) {
          {
            oprot.writeI32(struct.rule.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter567 : struct.rule.entrySet())
            {
              oprot.writeString(_iter567.getKey());
              oprot.writeString(_iter567.getValue());
            }
          }
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createCancellationPolicy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.description = iprot.readString();
          struct.setDescriptionIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map568 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.rule = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map568.size);
            java.lang.String _key569;
            java.lang.String _val570;
            for (int _i571 = 0; _i571 < _map568.size; ++_i571)
            {
              _key569 = iprot.readString();
              _val570 = iprot.readString();
              struct.rule.put(_key569, _val570);
            }
          }
          struct.setRuleIsSet(true);
        }
        if (incoming.get(2)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createCancellationPolicy_result implements org.apache.thrift.TBase<createCancellationPolicy_result, createCancellationPolicy_result._Fields>, java.io.Serializable, Cloneable, Comparable<createCancellationPolicy_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createCancellationPolicy_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createCancellationPolicy_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createCancellationPolicy_resultTupleSchemeFactory();

    private TCancellationPolicyCUDResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCancellationPolicyCUDResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createCancellationPolicy_result.class, metaDataMap);
    }

    public createCancellationPolicy_result() {
    }

    public createCancellationPolicy_result(
      TCancellationPolicyCUDResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createCancellationPolicy_result(createCancellationPolicy_result other) {
      if (other.isSetSuccess()) {
        this.success = new TCancellationPolicyCUDResponse(other.success);
      }
    }

    public createCancellationPolicy_result deepCopy() {
      return new createCancellationPolicy_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TCancellationPolicyCUDResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TCancellationPolicyCUDResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TCancellationPolicyCUDResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createCancellationPolicy_result)
        return this.equals((createCancellationPolicy_result)that);
      return false;
    }

    public boolean equals(createCancellationPolicy_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createCancellationPolicy_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createCancellationPolicy_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createCancellationPolicy_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createCancellationPolicy_resultStandardScheme getScheme() {
        return new createCancellationPolicy_resultStandardScheme();
      }
    }

    private static class createCancellationPolicy_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createCancellationPolicy_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createCancellationPolicy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TCancellationPolicyCUDResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createCancellationPolicy_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createCancellationPolicy_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createCancellationPolicy_resultTupleScheme getScheme() {
        return new createCancellationPolicy_resultTupleScheme();
      }
    }

    private static class createCancellationPolicy_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createCancellationPolicy_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createCancellationPolicy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createCancellationPolicy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TCancellationPolicyCUDResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listHotSellingPackage_args implements org.apache.thrift.TBase<listHotSellingPackage_args, listHotSellingPackage_args._Fields>, java.io.Serializable, Cloneable, Comparable<listHotSellingPackage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listHotSellingPackage_args");

    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listHotSellingPackage_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listHotSellingPackage_argsTupleSchemeFactory();

    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCALE((short)1, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listHotSellingPackage_args.class, metaDataMap);
    }

    public listHotSellingPackage_args() {
    }

    public listHotSellingPackage_args(
      java.lang.String locale)
    {
      this();
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listHotSellingPackage_args(listHotSellingPackage_args other) {
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public listHotSellingPackage_args deepCopy() {
      return new listHotSellingPackage_args(this);
    }

    @Override
    public void clear() {
      this.locale = null;
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listHotSellingPackage_args)
        return this.equals((listHotSellingPackage_args)that);
      return false;
    }

    public boolean equals(listHotSellingPackage_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listHotSellingPackage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listHotSellingPackage_args(");
      boolean first = true;

      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listHotSellingPackage_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listHotSellingPackage_argsStandardScheme getScheme() {
        return new listHotSellingPackage_argsStandardScheme();
      }
    }

    private static class listHotSellingPackage_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listHotSellingPackage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listHotSellingPackage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listHotSellingPackage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listHotSellingPackage_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listHotSellingPackage_argsTupleScheme getScheme() {
        return new listHotSellingPackage_argsTupleScheme();
      }
    }

    private static class listHotSellingPackage_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listHotSellingPackage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listHotSellingPackage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetLocale()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listHotSellingPackage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listHotSellingPackage_result implements org.apache.thrift.TBase<listHotSellingPackage_result, listHotSellingPackage_result._Fields>, java.io.Serializable, Cloneable, Comparable<listHotSellingPackage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listHotSellingPackage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listHotSellingPackage_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listHotSellingPackage_resultTupleSchemeFactory();

    private java.util.List<THotSellingPackageResponse> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THotSellingPackageResponse.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listHotSellingPackage_result.class, metaDataMap);
    }

    public listHotSellingPackage_result() {
    }

    public listHotSellingPackage_result(
      java.util.List<THotSellingPackageResponse> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listHotSellingPackage_result(listHotSellingPackage_result other) {
      if (other.isSetSuccess()) {
        java.util.List<THotSellingPackageResponse> __this__success = new java.util.ArrayList<THotSellingPackageResponse>(other.success.size());
        for (THotSellingPackageResponse other_element : other.success) {
          __this__success.add(new THotSellingPackageResponse(other_element));
        }
        this.success = __this__success;
      }
    }

    public listHotSellingPackage_result deepCopy() {
      return new listHotSellingPackage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<THotSellingPackageResponse> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(THotSellingPackageResponse elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<THotSellingPackageResponse>();
      }
      this.success.add(elem);
    }

    public java.util.List<THotSellingPackageResponse> getSuccess() {
      return this.success;
    }

    public void setSuccess(java.util.List<THotSellingPackageResponse> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<THotSellingPackageResponse>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listHotSellingPackage_result)
        return this.equals((listHotSellingPackage_result)that);
      return false;
    }

    public boolean equals(listHotSellingPackage_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listHotSellingPackage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listHotSellingPackage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listHotSellingPackage_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listHotSellingPackage_resultStandardScheme getScheme() {
        return new listHotSellingPackage_resultStandardScheme();
      }
    }

    private static class listHotSellingPackage_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listHotSellingPackage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listHotSellingPackage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list572 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<THotSellingPackageResponse>(_list572.size);
                  THotSellingPackageResponse _elem573;
                  for (int _i574 = 0; _i574 < _list572.size; ++_i574)
                  {
                    _elem573 = new THotSellingPackageResponse();
                    _elem573.read(iprot);
                    struct.success.add(_elem573);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listHotSellingPackage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (THotSellingPackageResponse _iter575 : struct.success)
            {
              _iter575.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listHotSellingPackage_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listHotSellingPackage_resultTupleScheme getScheme() {
        return new listHotSellingPackage_resultTupleScheme();
      }
    }

    private static class listHotSellingPackage_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listHotSellingPackage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listHotSellingPackage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (THotSellingPackageResponse _iter576 : struct.success)
            {
              _iter576.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listHotSellingPackage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list577 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<THotSellingPackageResponse>(_list577.size);
            THotSellingPackageResponse _elem578;
            for (int _i579 = 0; _i579 < _list577.size; ++_i579)
            {
              _elem578 = new THotSellingPackageResponse();
              _elem578.read(iprot);
              struct.success.add(_elem578);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createHotSellingPackage_args implements org.apache.thrift.TBase<createHotSellingPackage_args, createHotSellingPackage_args._Fields>, java.io.Serializable, Cloneable, Comparable<createHotSellingPackage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createHotSellingPackage_args");

    private static final org.apache.thrift.protocol.TField CATALOG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("catalogId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createHotSellingPackage_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createHotSellingPackage_argsTupleSchemeFactory();

    private java.lang.String catalogId; // required
    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CATALOG_ID((short)1, "catalogId"),
      LOCALE((short)2, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CATALOG_ID
            return CATALOG_ID;
          case 2: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CATALOG_ID, new org.apache.thrift.meta_data.FieldMetaData("catalogId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createHotSellingPackage_args.class, metaDataMap);
    }

    public createHotSellingPackage_args() {
    }

    public createHotSellingPackage_args(
      java.lang.String catalogId,
      java.lang.String locale)
    {
      this();
      this.catalogId = catalogId;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createHotSellingPackage_args(createHotSellingPackage_args other) {
      if (other.isSetCatalogId()) {
        this.catalogId = other.catalogId;
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public createHotSellingPackage_args deepCopy() {
      return new createHotSellingPackage_args(this);
    }

    @Override
    public void clear() {
      this.catalogId = null;
      this.locale = null;
    }

    public java.lang.String getCatalogId() {
      return this.catalogId;
    }

    public void setCatalogId(java.lang.String catalogId) {
      this.catalogId = catalogId;
    }

    public void unsetCatalogId() {
      this.catalogId = null;
    }

    /** Returns true if field catalogId is set (has been assigned a value) and false otherwise */
    public boolean isSetCatalogId() {
      return this.catalogId != null;
    }

    public void setCatalogIdIsSet(boolean value) {
      if (!value) {
        this.catalogId = null;
      }
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CATALOG_ID:
        if (value == null) {
          unsetCatalogId();
        } else {
          setCatalogId((java.lang.String)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CATALOG_ID:
        return getCatalogId();

      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CATALOG_ID:
        return isSetCatalogId();
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createHotSellingPackage_args)
        return this.equals((createHotSellingPackage_args)that);
      return false;
    }

    public boolean equals(createHotSellingPackage_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_catalogId = true && this.isSetCatalogId();
      boolean that_present_catalogId = true && that.isSetCatalogId();
      if (this_present_catalogId || that_present_catalogId) {
        if (!(this_present_catalogId && that_present_catalogId))
          return false;
        if (!this.catalogId.equals(that.catalogId))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCatalogId()) ? 131071 : 524287);
      if (isSetCatalogId())
        hashCode = hashCode * 8191 + catalogId.hashCode();

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createHotSellingPackage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCatalogId()).compareTo(other.isSetCatalogId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCatalogId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalogId, other.catalogId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createHotSellingPackage_args(");
      boolean first = true;

      sb.append("catalogId:");
      if (this.catalogId == null) {
        sb.append("null");
      } else {
        sb.append(this.catalogId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createHotSellingPackage_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createHotSellingPackage_argsStandardScheme getScheme() {
        return new createHotSellingPackage_argsStandardScheme();
      }
    }

    private static class createHotSellingPackage_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createHotSellingPackage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createHotSellingPackage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CATALOG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.catalogId = iprot.readString();
                struct.setCatalogIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createHotSellingPackage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.catalogId != null) {
          oprot.writeFieldBegin(CATALOG_ID_FIELD_DESC);
          oprot.writeString(struct.catalogId);
          oprot.writeFieldEnd();
        }
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createHotSellingPackage_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createHotSellingPackage_argsTupleScheme getScheme() {
        return new createHotSellingPackage_argsTupleScheme();
      }
    }

    private static class createHotSellingPackage_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createHotSellingPackage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createHotSellingPackage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCatalogId()) {
          optionals.set(0);
        }
        if (struct.isSetLocale()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCatalogId()) {
          oprot.writeString(struct.catalogId);
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createHotSellingPackage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.catalogId = iprot.readString();
          struct.setCatalogIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createHotSellingPackage_result implements org.apache.thrift.TBase<createHotSellingPackage_result, createHotSellingPackage_result._Fields>, java.io.Serializable, Cloneable, Comparable<createHotSellingPackage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createHotSellingPackage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createHotSellingPackage_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createHotSellingPackage_resultTupleSchemeFactory();

    private THotSellingPackageResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THotSellingPackageResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createHotSellingPackage_result.class, metaDataMap);
    }

    public createHotSellingPackage_result() {
    }

    public createHotSellingPackage_result(
      THotSellingPackageResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createHotSellingPackage_result(createHotSellingPackage_result other) {
      if (other.isSetSuccess()) {
        this.success = new THotSellingPackageResponse(other.success);
      }
    }

    public createHotSellingPackage_result deepCopy() {
      return new createHotSellingPackage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public THotSellingPackageResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(THotSellingPackageResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((THotSellingPackageResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createHotSellingPackage_result)
        return this.equals((createHotSellingPackage_result)that);
      return false;
    }

    public boolean equals(createHotSellingPackage_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createHotSellingPackage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createHotSellingPackage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createHotSellingPackage_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createHotSellingPackage_resultStandardScheme getScheme() {
        return new createHotSellingPackage_resultStandardScheme();
      }
    }

    private static class createHotSellingPackage_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createHotSellingPackage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createHotSellingPackage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new THotSellingPackageResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createHotSellingPackage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createHotSellingPackage_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createHotSellingPackage_resultTupleScheme getScheme() {
        return new createHotSellingPackage_resultTupleScheme();
      }
    }

    private static class createHotSellingPackage_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createHotSellingPackage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createHotSellingPackage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createHotSellingPackage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new THotSellingPackageResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listPopularPackages_args implements org.apache.thrift.TBase<listPopularPackages_args, listPopularPackages_args._Fields>, java.io.Serializable, Cloneable, Comparable<listPopularPackages_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listPopularPackages_args");

    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listPopularPackages_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listPopularPackages_argsTupleSchemeFactory();

    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCALE((short)1, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listPopularPackages_args.class, metaDataMap);
    }

    public listPopularPackages_args() {
    }

    public listPopularPackages_args(
      java.lang.String locale)
    {
      this();
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listPopularPackages_args(listPopularPackages_args other) {
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public listPopularPackages_args deepCopy() {
      return new listPopularPackages_args(this);
    }

    @Override
    public void clear() {
      this.locale = null;
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listPopularPackages_args)
        return this.equals((listPopularPackages_args)that);
      return false;
    }

    public boolean equals(listPopularPackages_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listPopularPackages_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listPopularPackages_args(");
      boolean first = true;

      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listPopularPackages_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listPopularPackages_argsStandardScheme getScheme() {
        return new listPopularPackages_argsStandardScheme();
      }
    }

    private static class listPopularPackages_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listPopularPackages_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listPopularPackages_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listPopularPackages_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listPopularPackages_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listPopularPackages_argsTupleScheme getScheme() {
        return new listPopularPackages_argsTupleScheme();
      }
    }

    private static class listPopularPackages_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listPopularPackages_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listPopularPackages_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetLocale()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listPopularPackages_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listPopularPackages_result implements org.apache.thrift.TBase<listPopularPackages_result, listPopularPackages_result._Fields>, java.io.Serializable, Cloneable, Comparable<listPopularPackages_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listPopularPackages_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listPopularPackages_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listPopularPackages_resultTupleSchemeFactory();

    private java.util.List<TPopularPackageResponse> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPopularPackageResponse.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listPopularPackages_result.class, metaDataMap);
    }

    public listPopularPackages_result() {
    }

    public listPopularPackages_result(
      java.util.List<TPopularPackageResponse> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listPopularPackages_result(listPopularPackages_result other) {
      if (other.isSetSuccess()) {
        java.util.List<TPopularPackageResponse> __this__success = new java.util.ArrayList<TPopularPackageResponse>(other.success.size());
        for (TPopularPackageResponse other_element : other.success) {
          __this__success.add(new TPopularPackageResponse(other_element));
        }
        this.success = __this__success;
      }
    }

    public listPopularPackages_result deepCopy() {
      return new listPopularPackages_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TPopularPackageResponse> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TPopularPackageResponse elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<TPopularPackageResponse>();
      }
      this.success.add(elem);
    }

    public java.util.List<TPopularPackageResponse> getSuccess() {
      return this.success;
    }

    public void setSuccess(java.util.List<TPopularPackageResponse> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<TPopularPackageResponse>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listPopularPackages_result)
        return this.equals((listPopularPackages_result)that);
      return false;
    }

    public boolean equals(listPopularPackages_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listPopularPackages_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listPopularPackages_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listPopularPackages_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listPopularPackages_resultStandardScheme getScheme() {
        return new listPopularPackages_resultStandardScheme();
      }
    }

    private static class listPopularPackages_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listPopularPackages_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listPopularPackages_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list580 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<TPopularPackageResponse>(_list580.size);
                  TPopularPackageResponse _elem581;
                  for (int _i582 = 0; _i582 < _list580.size; ++_i582)
                  {
                    _elem581 = new TPopularPackageResponse();
                    _elem581.read(iprot);
                    struct.success.add(_elem581);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listPopularPackages_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TPopularPackageResponse _iter583 : struct.success)
            {
              _iter583.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listPopularPackages_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listPopularPackages_resultTupleScheme getScheme() {
        return new listPopularPackages_resultTupleScheme();
      }
    }

    private static class listPopularPackages_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listPopularPackages_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listPopularPackages_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TPopularPackageResponse _iter584 : struct.success)
            {
              _iter584.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listPopularPackages_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list585 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<TPopularPackageResponse>(_list585.size);
            TPopularPackageResponse _elem586;
            for (int _i587 = 0; _i587 < _list585.size; ++_i587)
            {
              _elem586 = new TPopularPackageResponse();
              _elem586.read(iprot);
              struct.success.add(_elem586);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createPopularPackage_args implements org.apache.thrift.TBase<createPopularPackage_args, createPopularPackage_args._Fields>, java.io.Serializable, Cloneable, Comparable<createPopularPackage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createPopularPackage_args");

    private static final org.apache.thrift.protocol.TField CATALOG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("catalogId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createPopularPackage_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createPopularPackage_argsTupleSchemeFactory();

    private java.lang.String catalogId; // required
    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CATALOG_ID((short)1, "catalogId"),
      LOCALE((short)2, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CATALOG_ID
            return CATALOG_ID;
          case 2: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CATALOG_ID, new org.apache.thrift.meta_data.FieldMetaData("catalogId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createPopularPackage_args.class, metaDataMap);
    }

    public createPopularPackage_args() {
    }

    public createPopularPackage_args(
      java.lang.String catalogId,
      java.lang.String locale)
    {
      this();
      this.catalogId = catalogId;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createPopularPackage_args(createPopularPackage_args other) {
      if (other.isSetCatalogId()) {
        this.catalogId = other.catalogId;
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public createPopularPackage_args deepCopy() {
      return new createPopularPackage_args(this);
    }

    @Override
    public void clear() {
      this.catalogId = null;
      this.locale = null;
    }

    public java.lang.String getCatalogId() {
      return this.catalogId;
    }

    public void setCatalogId(java.lang.String catalogId) {
      this.catalogId = catalogId;
    }

    public void unsetCatalogId() {
      this.catalogId = null;
    }

    /** Returns true if field catalogId is set (has been assigned a value) and false otherwise */
    public boolean isSetCatalogId() {
      return this.catalogId != null;
    }

    public void setCatalogIdIsSet(boolean value) {
      if (!value) {
        this.catalogId = null;
      }
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CATALOG_ID:
        if (value == null) {
          unsetCatalogId();
        } else {
          setCatalogId((java.lang.String)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CATALOG_ID:
        return getCatalogId();

      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CATALOG_ID:
        return isSetCatalogId();
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createPopularPackage_args)
        return this.equals((createPopularPackage_args)that);
      return false;
    }

    public boolean equals(createPopularPackage_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_catalogId = true && this.isSetCatalogId();
      boolean that_present_catalogId = true && that.isSetCatalogId();
      if (this_present_catalogId || that_present_catalogId) {
        if (!(this_present_catalogId && that_present_catalogId))
          return false;
        if (!this.catalogId.equals(that.catalogId))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCatalogId()) ? 131071 : 524287);
      if (isSetCatalogId())
        hashCode = hashCode * 8191 + catalogId.hashCode();

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createPopularPackage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCatalogId()).compareTo(other.isSetCatalogId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCatalogId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalogId, other.catalogId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createPopularPackage_args(");
      boolean first = true;

      sb.append("catalogId:");
      if (this.catalogId == null) {
        sb.append("null");
      } else {
        sb.append(this.catalogId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createPopularPackage_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createPopularPackage_argsStandardScheme getScheme() {
        return new createPopularPackage_argsStandardScheme();
      }
    }

    private static class createPopularPackage_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createPopularPackage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createPopularPackage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CATALOG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.catalogId = iprot.readString();
                struct.setCatalogIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createPopularPackage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.catalogId != null) {
          oprot.writeFieldBegin(CATALOG_ID_FIELD_DESC);
          oprot.writeString(struct.catalogId);
          oprot.writeFieldEnd();
        }
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createPopularPackage_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createPopularPackage_argsTupleScheme getScheme() {
        return new createPopularPackage_argsTupleScheme();
      }
    }

    private static class createPopularPackage_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createPopularPackage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createPopularPackage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCatalogId()) {
          optionals.set(0);
        }
        if (struct.isSetLocale()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCatalogId()) {
          oprot.writeString(struct.catalogId);
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createPopularPackage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.catalogId = iprot.readString();
          struct.setCatalogIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createPopularPackage_result implements org.apache.thrift.TBase<createPopularPackage_result, createPopularPackage_result._Fields>, java.io.Serializable, Cloneable, Comparable<createPopularPackage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createPopularPackage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createPopularPackage_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createPopularPackage_resultTupleSchemeFactory();

    private TPopularPackageResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPopularPackageResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createPopularPackage_result.class, metaDataMap);
    }

    public createPopularPackage_result() {
    }

    public createPopularPackage_result(
      TPopularPackageResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createPopularPackage_result(createPopularPackage_result other) {
      if (other.isSetSuccess()) {
        this.success = new TPopularPackageResponse(other.success);
      }
    }

    public createPopularPackage_result deepCopy() {
      return new createPopularPackage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TPopularPackageResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TPopularPackageResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TPopularPackageResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createPopularPackage_result)
        return this.equals((createPopularPackage_result)that);
      return false;
    }

    public boolean equals(createPopularPackage_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createPopularPackage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createPopularPackage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createPopularPackage_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createPopularPackage_resultStandardScheme getScheme() {
        return new createPopularPackage_resultStandardScheme();
      }
    }

    private static class createPopularPackage_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createPopularPackage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createPopularPackage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TPopularPackageResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createPopularPackage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createPopularPackage_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createPopularPackage_resultTupleScheme getScheme() {
        return new createPopularPackage_resultTupleScheme();
      }
    }

    private static class createPopularPackage_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createPopularPackage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createPopularPackage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createPopularPackage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TPopularPackageResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listOtherRecommendedPackages_args implements org.apache.thrift.TBase<listOtherRecommendedPackages_args, listOtherRecommendedPackages_args._Fields>, java.io.Serializable, Cloneable, Comparable<listOtherRecommendedPackages_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listOtherRecommendedPackages_args");

    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listOtherRecommendedPackages_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listOtherRecommendedPackages_argsTupleSchemeFactory();

    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCALE((short)1, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listOtherRecommendedPackages_args.class, metaDataMap);
    }

    public listOtherRecommendedPackages_args() {
    }

    public listOtherRecommendedPackages_args(
      java.lang.String locale)
    {
      this();
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listOtherRecommendedPackages_args(listOtherRecommendedPackages_args other) {
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public listOtherRecommendedPackages_args deepCopy() {
      return new listOtherRecommendedPackages_args(this);
    }

    @Override
    public void clear() {
      this.locale = null;
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listOtherRecommendedPackages_args)
        return this.equals((listOtherRecommendedPackages_args)that);
      return false;
    }

    public boolean equals(listOtherRecommendedPackages_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listOtherRecommendedPackages_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listOtherRecommendedPackages_args(");
      boolean first = true;

      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listOtherRecommendedPackages_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listOtherRecommendedPackages_argsStandardScheme getScheme() {
        return new listOtherRecommendedPackages_argsStandardScheme();
      }
    }

    private static class listOtherRecommendedPackages_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listOtherRecommendedPackages_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listOtherRecommendedPackages_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listOtherRecommendedPackages_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listOtherRecommendedPackages_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listOtherRecommendedPackages_argsTupleScheme getScheme() {
        return new listOtherRecommendedPackages_argsTupleScheme();
      }
    }

    private static class listOtherRecommendedPackages_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listOtherRecommendedPackages_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listOtherRecommendedPackages_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetLocale()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listOtherRecommendedPackages_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listOtherRecommendedPackages_result implements org.apache.thrift.TBase<listOtherRecommendedPackages_result, listOtherRecommendedPackages_result._Fields>, java.io.Serializable, Cloneable, Comparable<listOtherRecommendedPackages_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listOtherRecommendedPackages_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listOtherRecommendedPackages_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listOtherRecommendedPackages_resultTupleSchemeFactory();

    private java.util.List<TOtherRecommendedPackageResponse> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TOtherRecommendedPackageResponse.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listOtherRecommendedPackages_result.class, metaDataMap);
    }

    public listOtherRecommendedPackages_result() {
    }

    public listOtherRecommendedPackages_result(
      java.util.List<TOtherRecommendedPackageResponse> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listOtherRecommendedPackages_result(listOtherRecommendedPackages_result other) {
      if (other.isSetSuccess()) {
        java.util.List<TOtherRecommendedPackageResponse> __this__success = new java.util.ArrayList<TOtherRecommendedPackageResponse>(other.success.size());
        for (TOtherRecommendedPackageResponse other_element : other.success) {
          __this__success.add(new TOtherRecommendedPackageResponse(other_element));
        }
        this.success = __this__success;
      }
    }

    public listOtherRecommendedPackages_result deepCopy() {
      return new listOtherRecommendedPackages_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TOtherRecommendedPackageResponse> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TOtherRecommendedPackageResponse elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<TOtherRecommendedPackageResponse>();
      }
      this.success.add(elem);
    }

    public java.util.List<TOtherRecommendedPackageResponse> getSuccess() {
      return this.success;
    }

    public void setSuccess(java.util.List<TOtherRecommendedPackageResponse> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<TOtherRecommendedPackageResponse>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listOtherRecommendedPackages_result)
        return this.equals((listOtherRecommendedPackages_result)that);
      return false;
    }

    public boolean equals(listOtherRecommendedPackages_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listOtherRecommendedPackages_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listOtherRecommendedPackages_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listOtherRecommendedPackages_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listOtherRecommendedPackages_resultStandardScheme getScheme() {
        return new listOtherRecommendedPackages_resultStandardScheme();
      }
    }

    private static class listOtherRecommendedPackages_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listOtherRecommendedPackages_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listOtherRecommendedPackages_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list588 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<TOtherRecommendedPackageResponse>(_list588.size);
                  TOtherRecommendedPackageResponse _elem589;
                  for (int _i590 = 0; _i590 < _list588.size; ++_i590)
                  {
                    _elem589 = new TOtherRecommendedPackageResponse();
                    _elem589.read(iprot);
                    struct.success.add(_elem589);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listOtherRecommendedPackages_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TOtherRecommendedPackageResponse _iter591 : struct.success)
            {
              _iter591.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listOtherRecommendedPackages_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listOtherRecommendedPackages_resultTupleScheme getScheme() {
        return new listOtherRecommendedPackages_resultTupleScheme();
      }
    }

    private static class listOtherRecommendedPackages_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listOtherRecommendedPackages_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listOtherRecommendedPackages_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TOtherRecommendedPackageResponse _iter592 : struct.success)
            {
              _iter592.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listOtherRecommendedPackages_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list593 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<TOtherRecommendedPackageResponse>(_list593.size);
            TOtherRecommendedPackageResponse _elem594;
            for (int _i595 = 0; _i595 < _list593.size; ++_i595)
            {
              _elem594 = new TOtherRecommendedPackageResponse();
              _elem594.read(iprot);
              struct.success.add(_elem594);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createOtherRecommendedPackage_args implements org.apache.thrift.TBase<createOtherRecommendedPackage_args, createOtherRecommendedPackage_args._Fields>, java.io.Serializable, Cloneable, Comparable<createOtherRecommendedPackage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createOtherRecommendedPackage_args");

    private static final org.apache.thrift.protocol.TField CATALOG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("catalogId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createOtherRecommendedPackage_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createOtherRecommendedPackage_argsTupleSchemeFactory();

    private java.lang.String catalogId; // required
    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CATALOG_ID((short)1, "catalogId"),
      LOCALE((short)2, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CATALOG_ID
            return CATALOG_ID;
          case 2: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CATALOG_ID, new org.apache.thrift.meta_data.FieldMetaData("catalogId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createOtherRecommendedPackage_args.class, metaDataMap);
    }

    public createOtherRecommendedPackage_args() {
    }

    public createOtherRecommendedPackage_args(
      java.lang.String catalogId,
      java.lang.String locale)
    {
      this();
      this.catalogId = catalogId;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createOtherRecommendedPackage_args(createOtherRecommendedPackage_args other) {
      if (other.isSetCatalogId()) {
        this.catalogId = other.catalogId;
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public createOtherRecommendedPackage_args deepCopy() {
      return new createOtherRecommendedPackage_args(this);
    }

    @Override
    public void clear() {
      this.catalogId = null;
      this.locale = null;
    }

    public java.lang.String getCatalogId() {
      return this.catalogId;
    }

    public void setCatalogId(java.lang.String catalogId) {
      this.catalogId = catalogId;
    }

    public void unsetCatalogId() {
      this.catalogId = null;
    }

    /** Returns true if field catalogId is set (has been assigned a value) and false otherwise */
    public boolean isSetCatalogId() {
      return this.catalogId != null;
    }

    public void setCatalogIdIsSet(boolean value) {
      if (!value) {
        this.catalogId = null;
      }
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CATALOG_ID:
        if (value == null) {
          unsetCatalogId();
        } else {
          setCatalogId((java.lang.String)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CATALOG_ID:
        return getCatalogId();

      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CATALOG_ID:
        return isSetCatalogId();
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createOtherRecommendedPackage_args)
        return this.equals((createOtherRecommendedPackage_args)that);
      return false;
    }

    public boolean equals(createOtherRecommendedPackage_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_catalogId = true && this.isSetCatalogId();
      boolean that_present_catalogId = true && that.isSetCatalogId();
      if (this_present_catalogId || that_present_catalogId) {
        if (!(this_present_catalogId && that_present_catalogId))
          return false;
        if (!this.catalogId.equals(that.catalogId))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCatalogId()) ? 131071 : 524287);
      if (isSetCatalogId())
        hashCode = hashCode * 8191 + catalogId.hashCode();

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createOtherRecommendedPackage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCatalogId()).compareTo(other.isSetCatalogId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCatalogId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalogId, other.catalogId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createOtherRecommendedPackage_args(");
      boolean first = true;

      sb.append("catalogId:");
      if (this.catalogId == null) {
        sb.append("null");
      } else {
        sb.append(this.catalogId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createOtherRecommendedPackage_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createOtherRecommendedPackage_argsStandardScheme getScheme() {
        return new createOtherRecommendedPackage_argsStandardScheme();
      }
    }

    private static class createOtherRecommendedPackage_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createOtherRecommendedPackage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createOtherRecommendedPackage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CATALOG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.catalogId = iprot.readString();
                struct.setCatalogIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createOtherRecommendedPackage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.catalogId != null) {
          oprot.writeFieldBegin(CATALOG_ID_FIELD_DESC);
          oprot.writeString(struct.catalogId);
          oprot.writeFieldEnd();
        }
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createOtherRecommendedPackage_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createOtherRecommendedPackage_argsTupleScheme getScheme() {
        return new createOtherRecommendedPackage_argsTupleScheme();
      }
    }

    private static class createOtherRecommendedPackage_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createOtherRecommendedPackage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createOtherRecommendedPackage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCatalogId()) {
          optionals.set(0);
        }
        if (struct.isSetLocale()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCatalogId()) {
          oprot.writeString(struct.catalogId);
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createOtherRecommendedPackage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.catalogId = iprot.readString();
          struct.setCatalogIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createOtherRecommendedPackage_result implements org.apache.thrift.TBase<createOtherRecommendedPackage_result, createOtherRecommendedPackage_result._Fields>, java.io.Serializable, Cloneable, Comparable<createOtherRecommendedPackage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createOtherRecommendedPackage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createOtherRecommendedPackage_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createOtherRecommendedPackage_resultTupleSchemeFactory();

    private TOtherRecommendedPackageResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TOtherRecommendedPackageResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createOtherRecommendedPackage_result.class, metaDataMap);
    }

    public createOtherRecommendedPackage_result() {
    }

    public createOtherRecommendedPackage_result(
      TOtherRecommendedPackageResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createOtherRecommendedPackage_result(createOtherRecommendedPackage_result other) {
      if (other.isSetSuccess()) {
        this.success = new TOtherRecommendedPackageResponse(other.success);
      }
    }

    public createOtherRecommendedPackage_result deepCopy() {
      return new createOtherRecommendedPackage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TOtherRecommendedPackageResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TOtherRecommendedPackageResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TOtherRecommendedPackageResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createOtherRecommendedPackage_result)
        return this.equals((createOtherRecommendedPackage_result)that);
      return false;
    }

    public boolean equals(createOtherRecommendedPackage_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createOtherRecommendedPackage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createOtherRecommendedPackage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createOtherRecommendedPackage_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createOtherRecommendedPackage_resultStandardScheme getScheme() {
        return new createOtherRecommendedPackage_resultStandardScheme();
      }
    }

    private static class createOtherRecommendedPackage_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createOtherRecommendedPackage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createOtherRecommendedPackage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TOtherRecommendedPackageResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createOtherRecommendedPackage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createOtherRecommendedPackage_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createOtherRecommendedPackage_resultTupleScheme getScheme() {
        return new createOtherRecommendedPackage_resultTupleScheme();
      }
    }

    private static class createOtherRecommendedPackage_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createOtherRecommendedPackage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createOtherRecommendedPackage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createOtherRecommendedPackage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TOtherRecommendedPackageResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listOtherDestinationsToExplore_args implements org.apache.thrift.TBase<listOtherDestinationsToExplore_args, listOtherDestinationsToExplore_args._Fields>, java.io.Serializable, Cloneable, Comparable<listOtherDestinationsToExplore_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listOtherDestinationsToExplore_args");

    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listOtherDestinationsToExplore_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listOtherDestinationsToExplore_argsTupleSchemeFactory();

    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCALE((short)1, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listOtherDestinationsToExplore_args.class, metaDataMap);
    }

    public listOtherDestinationsToExplore_args() {
    }

    public listOtherDestinationsToExplore_args(
      java.lang.String locale)
    {
      this();
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listOtherDestinationsToExplore_args(listOtherDestinationsToExplore_args other) {
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public listOtherDestinationsToExplore_args deepCopy() {
      return new listOtherDestinationsToExplore_args(this);
    }

    @Override
    public void clear() {
      this.locale = null;
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listOtherDestinationsToExplore_args)
        return this.equals((listOtherDestinationsToExplore_args)that);
      return false;
    }

    public boolean equals(listOtherDestinationsToExplore_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listOtherDestinationsToExplore_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listOtherDestinationsToExplore_args(");
      boolean first = true;

      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listOtherDestinationsToExplore_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listOtherDestinationsToExplore_argsStandardScheme getScheme() {
        return new listOtherDestinationsToExplore_argsStandardScheme();
      }
    }

    private static class listOtherDestinationsToExplore_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listOtherDestinationsToExplore_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listOtherDestinationsToExplore_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listOtherDestinationsToExplore_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listOtherDestinationsToExplore_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listOtherDestinationsToExplore_argsTupleScheme getScheme() {
        return new listOtherDestinationsToExplore_argsTupleScheme();
      }
    }

    private static class listOtherDestinationsToExplore_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listOtherDestinationsToExplore_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listOtherDestinationsToExplore_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetLocale()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listOtherDestinationsToExplore_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listOtherDestinationsToExplore_result implements org.apache.thrift.TBase<listOtherDestinationsToExplore_result, listOtherDestinationsToExplore_result._Fields>, java.io.Serializable, Cloneable, Comparable<listOtherDestinationsToExplore_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listOtherDestinationsToExplore_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listOtherDestinationsToExplore_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listOtherDestinationsToExplore_resultTupleSchemeFactory();

    private java.util.List<TOtherDestinationToExploreResponse> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TOtherDestinationToExploreResponse.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listOtherDestinationsToExplore_result.class, metaDataMap);
    }

    public listOtherDestinationsToExplore_result() {
    }

    public listOtherDestinationsToExplore_result(
      java.util.List<TOtherDestinationToExploreResponse> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listOtherDestinationsToExplore_result(listOtherDestinationsToExplore_result other) {
      if (other.isSetSuccess()) {
        java.util.List<TOtherDestinationToExploreResponse> __this__success = new java.util.ArrayList<TOtherDestinationToExploreResponse>(other.success.size());
        for (TOtherDestinationToExploreResponse other_element : other.success) {
          __this__success.add(new TOtherDestinationToExploreResponse(other_element));
        }
        this.success = __this__success;
      }
    }

    public listOtherDestinationsToExplore_result deepCopy() {
      return new listOtherDestinationsToExplore_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TOtherDestinationToExploreResponse> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TOtherDestinationToExploreResponse elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<TOtherDestinationToExploreResponse>();
      }
      this.success.add(elem);
    }

    public java.util.List<TOtherDestinationToExploreResponse> getSuccess() {
      return this.success;
    }

    public void setSuccess(java.util.List<TOtherDestinationToExploreResponse> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<TOtherDestinationToExploreResponse>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listOtherDestinationsToExplore_result)
        return this.equals((listOtherDestinationsToExplore_result)that);
      return false;
    }

    public boolean equals(listOtherDestinationsToExplore_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listOtherDestinationsToExplore_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listOtherDestinationsToExplore_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listOtherDestinationsToExplore_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listOtherDestinationsToExplore_resultStandardScheme getScheme() {
        return new listOtherDestinationsToExplore_resultStandardScheme();
      }
    }

    private static class listOtherDestinationsToExplore_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listOtherDestinationsToExplore_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listOtherDestinationsToExplore_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list596 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<TOtherDestinationToExploreResponse>(_list596.size);
                  TOtherDestinationToExploreResponse _elem597;
                  for (int _i598 = 0; _i598 < _list596.size; ++_i598)
                  {
                    _elem597 = new TOtherDestinationToExploreResponse();
                    _elem597.read(iprot);
                    struct.success.add(_elem597);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listOtherDestinationsToExplore_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TOtherDestinationToExploreResponse _iter599 : struct.success)
            {
              _iter599.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listOtherDestinationsToExplore_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listOtherDestinationsToExplore_resultTupleScheme getScheme() {
        return new listOtherDestinationsToExplore_resultTupleScheme();
      }
    }

    private static class listOtherDestinationsToExplore_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listOtherDestinationsToExplore_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listOtherDestinationsToExplore_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TOtherDestinationToExploreResponse _iter600 : struct.success)
            {
              _iter600.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listOtherDestinationsToExplore_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list601 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<TOtherDestinationToExploreResponse>(_list601.size);
            TOtherDestinationToExploreResponse _elem602;
            for (int _i603 = 0; _i603 < _list601.size; ++_i603)
            {
              _elem602 = new TOtherDestinationToExploreResponse();
              _elem602.read(iprot);
              struct.success.add(_elem602);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createOtherDestinationToExplore_args implements org.apache.thrift.TBase<createOtherDestinationToExplore_args, createOtherDestinationToExplore_args._Fields>, java.io.Serializable, Cloneable, Comparable<createOtherDestinationToExplore_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createOtherDestinationToExplore_args");

    private static final org.apache.thrift.protocol.TField CATALOG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("catalogId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createOtherDestinationToExplore_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createOtherDestinationToExplore_argsTupleSchemeFactory();

    private java.lang.String catalogId; // required
    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CATALOG_ID((short)1, "catalogId"),
      LOCALE((short)2, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CATALOG_ID
            return CATALOG_ID;
          case 2: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CATALOG_ID, new org.apache.thrift.meta_data.FieldMetaData("catalogId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createOtherDestinationToExplore_args.class, metaDataMap);
    }

    public createOtherDestinationToExplore_args() {
    }

    public createOtherDestinationToExplore_args(
      java.lang.String catalogId,
      java.lang.String locale)
    {
      this();
      this.catalogId = catalogId;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createOtherDestinationToExplore_args(createOtherDestinationToExplore_args other) {
      if (other.isSetCatalogId()) {
        this.catalogId = other.catalogId;
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public createOtherDestinationToExplore_args deepCopy() {
      return new createOtherDestinationToExplore_args(this);
    }

    @Override
    public void clear() {
      this.catalogId = null;
      this.locale = null;
    }

    public java.lang.String getCatalogId() {
      return this.catalogId;
    }

    public void setCatalogId(java.lang.String catalogId) {
      this.catalogId = catalogId;
    }

    public void unsetCatalogId() {
      this.catalogId = null;
    }

    /** Returns true if field catalogId is set (has been assigned a value) and false otherwise */
    public boolean isSetCatalogId() {
      return this.catalogId != null;
    }

    public void setCatalogIdIsSet(boolean value) {
      if (!value) {
        this.catalogId = null;
      }
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CATALOG_ID:
        if (value == null) {
          unsetCatalogId();
        } else {
          setCatalogId((java.lang.String)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CATALOG_ID:
        return getCatalogId();

      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CATALOG_ID:
        return isSetCatalogId();
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createOtherDestinationToExplore_args)
        return this.equals((createOtherDestinationToExplore_args)that);
      return false;
    }

    public boolean equals(createOtherDestinationToExplore_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_catalogId = true && this.isSetCatalogId();
      boolean that_present_catalogId = true && that.isSetCatalogId();
      if (this_present_catalogId || that_present_catalogId) {
        if (!(this_present_catalogId && that_present_catalogId))
          return false;
        if (!this.catalogId.equals(that.catalogId))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCatalogId()) ? 131071 : 524287);
      if (isSetCatalogId())
        hashCode = hashCode * 8191 + catalogId.hashCode();

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createOtherDestinationToExplore_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCatalogId()).compareTo(other.isSetCatalogId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCatalogId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalogId, other.catalogId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createOtherDestinationToExplore_args(");
      boolean first = true;

      sb.append("catalogId:");
      if (this.catalogId == null) {
        sb.append("null");
      } else {
        sb.append(this.catalogId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createOtherDestinationToExplore_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createOtherDestinationToExplore_argsStandardScheme getScheme() {
        return new createOtherDestinationToExplore_argsStandardScheme();
      }
    }

    private static class createOtherDestinationToExplore_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createOtherDestinationToExplore_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createOtherDestinationToExplore_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CATALOG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.catalogId = iprot.readString();
                struct.setCatalogIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createOtherDestinationToExplore_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.catalogId != null) {
          oprot.writeFieldBegin(CATALOG_ID_FIELD_DESC);
          oprot.writeString(struct.catalogId);
          oprot.writeFieldEnd();
        }
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createOtherDestinationToExplore_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createOtherDestinationToExplore_argsTupleScheme getScheme() {
        return new createOtherDestinationToExplore_argsTupleScheme();
      }
    }

    private static class createOtherDestinationToExplore_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createOtherDestinationToExplore_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createOtherDestinationToExplore_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCatalogId()) {
          optionals.set(0);
        }
        if (struct.isSetLocale()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCatalogId()) {
          oprot.writeString(struct.catalogId);
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createOtherDestinationToExplore_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.catalogId = iprot.readString();
          struct.setCatalogIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createOtherDestinationToExplore_result implements org.apache.thrift.TBase<createOtherDestinationToExplore_result, createOtherDestinationToExplore_result._Fields>, java.io.Serializable, Cloneable, Comparable<createOtherDestinationToExplore_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createOtherDestinationToExplore_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createOtherDestinationToExplore_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createOtherDestinationToExplore_resultTupleSchemeFactory();

    private TOtherDestinationToExploreResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TOtherDestinationToExploreResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createOtherDestinationToExplore_result.class, metaDataMap);
    }

    public createOtherDestinationToExplore_result() {
    }

    public createOtherDestinationToExplore_result(
      TOtherDestinationToExploreResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createOtherDestinationToExplore_result(createOtherDestinationToExplore_result other) {
      if (other.isSetSuccess()) {
        this.success = new TOtherDestinationToExploreResponse(other.success);
      }
    }

    public createOtherDestinationToExplore_result deepCopy() {
      return new createOtherDestinationToExplore_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TOtherDestinationToExploreResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TOtherDestinationToExploreResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TOtherDestinationToExploreResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createOtherDestinationToExplore_result)
        return this.equals((createOtherDestinationToExplore_result)that);
      return false;
    }

    public boolean equals(createOtherDestinationToExplore_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createOtherDestinationToExplore_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createOtherDestinationToExplore_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createOtherDestinationToExplore_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createOtherDestinationToExplore_resultStandardScheme getScheme() {
        return new createOtherDestinationToExplore_resultStandardScheme();
      }
    }

    private static class createOtherDestinationToExplore_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createOtherDestinationToExplore_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createOtherDestinationToExplore_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TOtherDestinationToExploreResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createOtherDestinationToExplore_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createOtherDestinationToExplore_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createOtherDestinationToExplore_resultTupleScheme getScheme() {
        return new createOtherDestinationToExplore_resultTupleScheme();
      }
    }

    private static class createOtherDestinationToExplore_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createOtherDestinationToExplore_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createOtherDestinationToExplore_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createOtherDestinationToExplore_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TOtherDestinationToExploreResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
